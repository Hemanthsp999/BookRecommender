{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * Compare two arrays or strings by performing strict equality check for each value.\n * @template T [T=any]\n * @param {ArrayLike<T>} a Array of values to be compared\n * @param {ArrayLike<T>} b Array of values to be compared\n * @returns {boolean} returns true if all the elements of passed arrays are strictly equal.\n */\nexports.equals = (a, b) => {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Partition an array by calling a predicate function on each value.\n * @template T [T=any]\n * @param {Array<T>} arr Array of values to be partitioned\n * @param {(value: T) => boolean} fn Partition function which partitions based on truthiness of result.\n * @returns {[Array<T>, Array<T>]} returns the values of `arr` partitioned into two new arrays based on fn predicate.\n */\nexports.groupBy = function () {\n  let arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fn = arguments.length > 1 ? arguments[1] : undefined;\n  return arr.reduce(\n  /**\n   * @param {[Array<T>, Array<T>]} groups An accumulator storing already partitioned values returned from previous call.\n   * @param {T} value The value of the current element\n   * @returns {[Array<T>, Array<T>]} returns an array of partitioned groups accumulator resulting from calling a predicate on the current value.\n   */\n  (groups, value) => {\n    groups[fn(value) ? 0 : 1].push(value);\n    return groups;\n  }, [[], []]);\n};","map":{"version":3,"names":["exports","equals","a","b","length","i","groupBy","arr","arguments","undefined","fn","reduce","groups","value","push"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/util/ArrayHelpers.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * Compare two arrays or strings by performing strict equality check for each value.\n * @template T [T=any]\n * @param {ArrayLike<T>} a Array of values to be compared\n * @param {ArrayLike<T>} b Array of values to be compared\n * @returns {boolean} returns true if all the elements of passed arrays are strictly equal.\n */\n\nexports.equals = (a, b) => {\n\tif (a.length !== b.length) return false;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\treturn true;\n};\n\n/**\n * Partition an array by calling a predicate function on each value.\n * @template T [T=any]\n * @param {Array<T>} arr Array of values to be partitioned\n * @param {(value: T) => boolean} fn Partition function which partitions based on truthiness of result.\n * @returns {[Array<T>, Array<T>]} returns the values of `arr` partitioned into two new arrays based on fn predicate.\n */\nexports.groupBy = (arr = [], fn) => {\n\treturn arr.reduce(\n\t\t/**\n\t\t * @param {[Array<T>, Array<T>]} groups An accumulator storing already partitioned values returned from previous call.\n\t\t * @param {T} value The value of the current element\n\t\t * @returns {[Array<T>, Array<T>]} returns an array of partitioned groups accumulator resulting from calling a predicate on the current value.\n\t\t */\n\t\t(groups, value) => {\n\t\t\tgroups[fn(value) ? 0 : 1].push(value);\n\t\t\treturn groups;\n\t\t},\n\t\t[[], []]\n\t);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,OAAO,CAACC,MAAM,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC1B,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE,OAAO,KAAK;EACvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IAClC,IAAIH,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE,OAAO,KAAK;EAChC;EACA,OAAO,IAAI;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACM,OAAO,GAAG,YAAkB;EAAA,IAAjBC,GAAG,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAAA,IAAEE,EAAE,GAAAF,SAAA,CAAAJ,MAAA,OAAAI,SAAA,MAAAC,SAAA;EAC9B,OAAOF,GAAG,CAACI,MAAM;EAChB;AACF;AACA;AACA;AACA;EACE,CAACC,MAAM,EAAEC,KAAK,KAAK;IAClBD,MAAM,CAACF,EAAE,CAACG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACC,IAAI,CAACD,KAAK,CAAC;IACrC,OAAOD,MAAM;EACd,CAAC,EACD,CAAC,EAAE,EAAE,EAAE,CACR,CAAC;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}