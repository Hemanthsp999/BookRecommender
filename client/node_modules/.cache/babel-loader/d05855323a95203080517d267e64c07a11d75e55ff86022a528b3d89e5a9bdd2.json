{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  ConcatSource,\n  PrefixSource\n} = require(\"webpack-sources\");\nconst CssModule = require(\"../CssModule\");\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\nconst {\n  CSS_MODULE_TYPE,\n  CSS_MODULE_TYPE_GLOBAL,\n  CSS_MODULE_TYPE_MODULE\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst SelfModuleFactory = require(\"../SelfModuleFactory\");\nconst WebpackError = require(\"../WebpackError\");\nconst CssExportDependency = require(\"../dependencies/CssExportDependency\");\nconst CssImportDependency = require(\"../dependencies/CssImportDependency\");\nconst CssLocalIdentifierDependency = require(\"../dependencies/CssLocalIdentifierDependency\");\nconst CssSelfLocalIdentifierDependency = require(\"../dependencies/CssSelfLocalIdentifierDependency\");\nconst CssUrlDependency = require(\"../dependencies/CssUrlDependency\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst createHash = require(\"../util/createHash\");\nconst memoize = require(\"../util/memoize\");\nconst nonNumericOnlyHash = require(\"../util/nonNumericOnlyHash\");\nconst CssExportsGenerator = require(\"./CssExportsGenerator\");\nconst CssGenerator = require(\"./CssGenerator\");\nconst CssParser = require(\"./CssParser\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssExperimentOptions} CssExperimentOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../util/memoize\")} Memoize */\n\nconst getCssLoadingRuntimeModule = memoize(() => require(\"./CssLoadingRuntimeModule\"));\nconst getSchema = name => {\n  const {\n    definitions\n  } = require(\"../../schemas/WebpackOptions.json\");\n  return {\n    definitions,\n    oneOf: [{\n      $ref: `#/definitions/${name}`\n    }]\n  };\n};\nconst validateGeneratorOptions = createSchemaValidation(require(\"../../schemas/plugins/css/CssGeneratorOptions.check.js\"), () => getSchema(\"CssGeneratorOptions\"), {\n  name: \"Css Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nconst validateParserOptions = createSchemaValidation(require(\"../../schemas/plugins/css/CssParserOptions.check.js\"), () => getSchema(\"CssParserOptions\"), {\n  name: \"Css Modules Plugin\",\n  baseDataPath: \"parser\"\n});\n\n/**\n * @param {string} str string\n * @param {boolean=} omitOptionalUnderscore if true, optional underscore is not added\n * @returns {string} escaped string\n */\nconst escapeCss = (str, omitOptionalUnderscore) => {\n  const escaped = `${str}`.replace(\n  // cspell:word uffff\n  /[^a-zA-Z0-9_\\u0081-\\uffff-]/g, s => `\\\\${s}`);\n  return !omitOptionalUnderscore && /^(?!--)[0-9_-]/.test(escaped) ? `_${escaped}` : escaped;\n};\nconst plugin = \"CssModulesPlugin\";\nclass CssModulesPlugin {\n  /**\n   * @param {CssExperimentOptions} options options\n   */\n  constructor(_ref) {\n    let {\n      exportsOnly = false\n    } = _ref;\n    this._exportsOnly = exportsOnly;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(plugin, (compilation, _ref2) => {\n      let {\n        normalModuleFactory\n      } = _ref2;\n      const selfFactory = new SelfModuleFactory(compilation.moduleGraph);\n      compilation.dependencyFactories.set(CssUrlDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(CssUrlDependency, new CssUrlDependency.Template());\n      compilation.dependencyTemplates.set(CssLocalIdentifierDependency, new CssLocalIdentifierDependency.Template());\n      compilation.dependencyFactories.set(CssSelfLocalIdentifierDependency, selfFactory);\n      compilation.dependencyTemplates.set(CssSelfLocalIdentifierDependency, new CssSelfLocalIdentifierDependency.Template());\n      compilation.dependencyTemplates.set(CssExportDependency, new CssExportDependency.Template());\n      compilation.dependencyFactories.set(CssImportDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(CssImportDependency, new CssImportDependency.Template());\n      compilation.dependencyTemplates.set(StaticExportsDependency, new StaticExportsDependency.Template());\n      for (const type of [CSS_MODULE_TYPE, CSS_MODULE_TYPE_GLOBAL, CSS_MODULE_TYPE_MODULE]) {\n        normalModuleFactory.hooks.createParser.for(type).tap(plugin, parserOptions => {\n          validateParserOptions(parserOptions);\n          switch (type) {\n            case CSS_MODULE_TYPE:\n              return new CssParser();\n            case CSS_MODULE_TYPE_GLOBAL:\n              return new CssParser({\n                allowModeSwitch: false\n              });\n            case CSS_MODULE_TYPE_MODULE:\n              return new CssParser({\n                defaultMode: \"local\"\n              });\n          }\n        });\n        normalModuleFactory.hooks.createGenerator.for(type).tap(plugin, generatorOptions => {\n          validateGeneratorOptions(generatorOptions);\n          return this._exportsOnly ? new CssExportsGenerator() : new CssGenerator();\n        });\n        normalModuleFactory.hooks.createModuleClass.for(type).tap(plugin, (createData, resolveData) => {\n          if (resolveData.dependencies.length > 0) {\n            // When CSS is imported from CSS there is only one dependency\n            const dependency = resolveData.dependencies[0];\n            if (dependency instanceof CssImportDependency) {\n              const parent = /** @type {CssModule} */\n              compilation.moduleGraph.getParentModule(dependency);\n              if (parent instanceof CssModule) {\n                /** @type {import(\"../CssModule\").Inheritance | undefined} */\n                let inheritance;\n                if (parent.cssLayer !== null && parent.cssLayer !== undefined || parent.supports || parent.media) {\n                  if (!inheritance) {\n                    inheritance = [];\n                  }\n                  inheritance.push([parent.cssLayer, parent.supports, parent.media]);\n                }\n                if (parent.inheritance) {\n                  if (!inheritance) {\n                    inheritance = [];\n                  }\n                  inheritance.push(...parent.inheritance);\n                }\n                return new CssModule({\n                  ...createData,\n                  cssLayer: dependency.layer,\n                  supports: dependency.supports,\n                  media: dependency.media,\n                  inheritance\n                });\n              }\n              return new CssModule({\n                ...createData,\n                cssLayer: dependency.layer,\n                supports: dependency.supports,\n                media: dependency.media\n              });\n            }\n          }\n          return new CssModule(createData);\n        });\n      }\n      const orderedCssModulesPerChunk = new WeakMap();\n      compilation.hooks.afterCodeGeneration.tap(\"CssModulesPlugin\", () => {\n        const {\n          chunkGraph\n        } = compilation;\n        for (const chunk of compilation.chunks) {\n          if (CssModulesPlugin.chunkHasCss(chunk, chunkGraph)) {\n            orderedCssModulesPerChunk.set(chunk, this.getOrderedChunkCssModules(chunk, chunkGraph, compilation));\n          }\n        }\n      });\n      compilation.hooks.contentHash.tap(\"CssModulesPlugin\", chunk => {\n        const {\n          chunkGraph,\n          outputOptions: {\n            hashSalt,\n            hashDigest,\n            hashDigestLength,\n            hashFunction\n          }\n        } = compilation;\n        const modules = orderedCssModulesPerChunk.get(chunk);\n        if (modules === undefined) return;\n        const hash = createHash(hashFunction);\n        if (hashSalt) hash.update(hashSalt);\n        for (const module of modules) {\n          hash.update(chunkGraph.getModuleHash(module, chunk.runtime));\n        }\n        const digest = /** @type {string} */hash.digest(hashDigest);\n        chunk.contentHash.css = nonNumericOnlyHash(digest, hashDigestLength);\n      });\n      compilation.hooks.renderManifest.tap(plugin, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          hash,\n          chunk,\n          codeGenerationResults\n        } = options;\n        if (chunk instanceof HotUpdateChunk) return result;\n\n        /** @type {CssModule[] | undefined} */\n        const modules = orderedCssModulesPerChunk.get(chunk);\n        if (modules !== undefined) {\n          result.push({\n            render: () => this.renderChunk({\n              chunk,\n              chunkGraph,\n              codeGenerationResults,\n              uniqueName: compilation.outputOptions.uniqueName,\n              modules\n            }),\n            filenameTemplate: CssModulesPlugin.getChunkFilenameTemplate(chunk, compilation.outputOptions),\n            pathOptions: {\n              hash,\n              runtime: chunk.runtime,\n              chunk,\n              contentHashType: \"css\"\n            },\n            identifier: `css${chunk.id}`,\n            hash: chunk.contentHash.css\n          });\n        }\n        return result;\n      });\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === \"jsonp\";\n      };\n      const onceForChunkSet = new WeakSet();\n      const handler = (chunk, set) => {\n        if (onceForChunkSet.has(chunk)) return;\n        onceForChunkSet.add(chunk);\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getChunkCssFilename);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.makeNamespaceObject);\n        const CssLoadingRuntimeModule = getCssLoadingRuntimeModule();\n        compilation.addRuntimeModule(chunk, new CssLoadingRuntimeModule(set));\n      };\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hasCssModules).tap(plugin, handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(plugin, handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(plugin, handler);\n    });\n  }\n\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {Iterable<Module>} modules unordered modules\n   * @param {Compilation} compilation compilation\n   * @returns {Module[]} ordered modules\n   */\n  getModulesInOrder(chunk, modules, compilation) {\n    if (!modules) return [];\n\n    /** @type {Module[]} */\n    const modulesList = [...modules];\n\n    // Get ordered list of modules per chunk group\n    // Lists are in reverse order to allow to use Array.pop()\n    const modulesByChunkGroup = Array.from(chunk.groupsIterable, chunkGroup => {\n      const sortedModules = modulesList.map(module => {\n        return {\n          module,\n          index: chunkGroup.getModulePostOrderIndex(module)\n        };\n      }).filter(item => item.index !== undefined).sort((a, b) => b.index - a.index).map(item => item.module);\n      return {\n        list: sortedModules,\n        set: new Set(sortedModules)\n      };\n    });\n    if (modulesByChunkGroup.length === 1) return modulesByChunkGroup[0].list.reverse();\n    const compareModuleLists = (_ref3, _ref4) => {\n      let {\n        list: a\n      } = _ref3;\n      let {\n        list: b\n      } = _ref4;\n      if (a.length === 0) {\n        return b.length === 0 ? 0 : 1;\n      } else {\n        if (b.length === 0) return -1;\n        return compareModulesByIdentifier(a[a.length - 1], b[b.length - 1]);\n      }\n    };\n    modulesByChunkGroup.sort(compareModuleLists);\n\n    /** @type {Module[]} */\n    const finalModules = [];\n    for (;;) {\n      const failedModules = new Set();\n      const list = modulesByChunkGroup[0].list;\n      if (list.length === 0) {\n        // done, everything empty\n        break;\n      }\n      /** @type {Module} */\n      let selectedModule = list[list.length - 1];\n      let hasFailed = undefined;\n      outer: for (;;) {\n        for (const {\n          list,\n          set\n        } of modulesByChunkGroup) {\n          if (list.length === 0) continue;\n          const lastModule = list[list.length - 1];\n          if (lastModule === selectedModule) continue;\n          if (!set.has(selectedModule)) continue;\n          failedModules.add(selectedModule);\n          if (failedModules.has(lastModule)) {\n            // There is a conflict, try other alternatives\n            hasFailed = lastModule;\n            continue;\n          }\n          selectedModule = lastModule;\n          hasFailed = false;\n          continue outer; // restart\n        }\n\n        break;\n      }\n      if (hasFailed) {\n        // There is a not resolve-able conflict with the selectedModule\n        if (compilation) {\n          // TODO print better warning\n          compilation.warnings.push(new WebpackError(`chunk ${chunk.name || chunk.id}\\nConflicting order between ${\n          /** @type {Module} */hasFailed.readableIdentifier(compilation.requestShortener)} and ${selectedModule.readableIdentifier(compilation.requestShortener)}`));\n        }\n        selectedModule = /** @type {Module} */hasFailed;\n      }\n      // Insert the selected module into the final modules list\n      finalModules.push(selectedModule);\n      // Remove the selected module from all lists\n      for (const {\n        list,\n        set\n      } of modulesByChunkGroup) {\n        const lastModule = list[list.length - 1];\n        if (lastModule === selectedModule) list.pop();else if (hasFailed && set.has(selectedModule)) {\n          const idx = list.indexOf(selectedModule);\n          if (idx >= 0) list.splice(idx, 1);\n        }\n      }\n      modulesByChunkGroup.sort(compareModuleLists);\n    }\n    return finalModules;\n  }\n\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {ChunkGraph} chunkGraph chunk graph\n   * @param {Compilation} compilation compilation\n   * @returns {Module[]} ordered css modules\n   */\n  getOrderedChunkCssModules(chunk, chunkGraph, compilation) {\n    return [...this.getModulesInOrder(chunk, chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"css-import\", compareModulesByIdentifier), compilation), ...this.getModulesInOrder(chunk, chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"css\", compareModulesByIdentifier), compilation)];\n  }\n\n  /**\n   * @param {Object} options options\n   * @param {string | undefined} options.uniqueName unique name\n   * @param {Chunk} options.chunk chunk\n   * @param {ChunkGraph} options.chunkGraph chunk graph\n   * @param {CodeGenerationResults} options.codeGenerationResults code generation results\n   * @param {CssModule[]} options.modules ordered css modules\n   * @returns {Source} generated source\n   */\n  renderChunk(_ref5) {\n    let {\n      uniqueName,\n      chunk,\n      chunkGraph,\n      codeGenerationResults,\n      modules\n    } = _ref5;\n    const source = new ConcatSource();\n    /** @type {string[]} */\n    const metaData = [];\n    for (const module of modules) {\n      try {\n        const codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n        let moduleSource = codeGenResult.sources.get(\"css\") || codeGenResult.sources.get(\"css-import\");\n        let inheritance = [[module.cssLayer, module.supports, module.media]];\n        if (module.inheritance) {\n          inheritance.push(...module.inheritance);\n        }\n        for (let i = 0; i < inheritance.length; i++) {\n          const layer = inheritance[i][0];\n          const supports = inheritance[i][1];\n          const media = inheritance[i][2];\n          if (media) {\n            moduleSource = new ConcatSource(`@media ${media} {\\n`, new PrefixSource(\"\\t\", moduleSource), \"}\\n\");\n          }\n          if (supports) {\n            moduleSource = new ConcatSource(`@supports (${supports}) {\\n`, new PrefixSource(\"\\t\", moduleSource), \"}\\n\");\n          }\n\n          // Layer can be anonymous\n          if (layer !== undefined && layer !== null) {\n            moduleSource = new ConcatSource(`@layer${layer ? ` ${layer}` : \"\"} {\\n`, new PrefixSource(\"\\t\", moduleSource), \"}\\n\");\n          }\n        }\n        if (moduleSource) {\n          source.add(moduleSource);\n          source.add(\"\\n\");\n        }\n        /** @type {Map<string, string> | undefined} */\n        const exports = codeGenResult.data && codeGenResult.data.get(\"css-exports\");\n        let moduleId = chunkGraph.getModuleId(module) + \"\";\n\n        // When `optimization.moduleIds` is `named` the module id is a path, so we need to normalize it between platforms\n        if (typeof moduleId === \"string\") {\n          moduleId = moduleId.replace(/\\\\/g, \"/\");\n        }\n        metaData.push(`${exports ? Array.from(exports, _ref6 => {\n          let [n, v] = _ref6;\n          const shortcutValue = `${uniqueName ? uniqueName + \"-\" : \"\"}${moduleId}-${n}`;\n          return v === shortcutValue ? `${escapeCss(n)}/` : v === \"--\" + shortcutValue ? `${escapeCss(n)}%` : `${escapeCss(n)}(${escapeCss(v)})`;\n        }).join(\"\") : \"\"}${escapeCss(moduleId)}`);\n      } catch (e) {\n        e.message += `\\nduring rendering of css ${module.identifier()}`;\n        throw e;\n      }\n    }\n    source.add(`head{--webpack-${escapeCss((uniqueName ? uniqueName + \"-\" : \"\") + chunk.id, true)}:${metaData.join(\",\")};}`);\n    return source;\n  }\n\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {OutputOptions} outputOptions output options\n   * @returns {Chunk[\"cssFilenameTemplate\"] | OutputOptions[\"cssFilename\"] | OutputOptions[\"cssChunkFilename\"]} used filename template\n   */\n  static getChunkFilenameTemplate(chunk, outputOptions) {\n    if (chunk.cssFilenameTemplate) {\n      return chunk.cssFilenameTemplate;\n    } else if (chunk.canBeInitial()) {\n      return outputOptions.cssFilename;\n    } else {\n      return outputOptions.cssChunkFilename;\n    }\n  }\n\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {ChunkGraph} chunkGraph chunk graph\n   * @returns {boolean} true, when the chunk has css\n   */\n  static chunkHasCss(chunk, chunkGraph) {\n    return !!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css\") || !!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css-import\");\n  }\n}\nmodule.exports = CssModulesPlugin;","map":{"version":3,"names":["ConcatSource","PrefixSource","require","CssModule","HotUpdateChunk","CSS_MODULE_TYPE","CSS_MODULE_TYPE_GLOBAL","CSS_MODULE_TYPE_MODULE","RuntimeGlobals","SelfModuleFactory","WebpackError","CssExportDependency","CssImportDependency","CssLocalIdentifierDependency","CssSelfLocalIdentifierDependency","CssUrlDependency","StaticExportsDependency","compareModulesByIdentifier","createSchemaValidation","createHash","memoize","nonNumericOnlyHash","CssExportsGenerator","CssGenerator","CssParser","getCssLoadingRuntimeModule","getSchema","name","definitions","oneOf","$ref","validateGeneratorOptions","baseDataPath","validateParserOptions","escapeCss","str","omitOptionalUnderscore","escaped","replace","s","test","plugin","CssModulesPlugin","constructor","_ref","exportsOnly","_exportsOnly","apply","compiler","hooks","compilation","tap","_ref2","normalModuleFactory","selfFactory","moduleGraph","dependencyFactories","set","dependencyTemplates","Template","type","createParser","for","parserOptions","allowModeSwitch","defaultMode","createGenerator","generatorOptions","createModuleClass","createData","resolveData","dependencies","length","dependency","parent","getParentModule","inheritance","cssLayer","undefined","supports","media","push","layer","orderedCssModulesPerChunk","WeakMap","afterCodeGeneration","chunkGraph","chunk","chunks","chunkHasCss","getOrderedChunkCssModules","contentHash","outputOptions","hashSalt","hashDigest","hashDigestLength","hashFunction","modules","get","hash","update","module","getModuleHash","runtime","digest","css","renderManifest","result","options","codeGenerationResults","render","renderChunk","uniqueName","filenameTemplate","getChunkFilenameTemplate","pathOptions","contentHashType","identifier","id","globalChunkLoading","chunkLoading","isEnabledForChunk","getEntryOptions","onceForChunkSet","WeakSet","handler","has","add","publicPath","getChunkCssFilename","hasOwnProperty","moduleFactoriesAddOnly","makeNamespaceObject","CssLoadingRuntimeModule","addRuntimeModule","runtimeRequirementInTree","hasCssModules","ensureChunkHandlers","hmrDownloadUpdateHandlers","getModulesInOrder","modulesList","modulesByChunkGroup","Array","from","groupsIterable","chunkGroup","sortedModules","map","index","getModulePostOrderIndex","filter","item","sort","a","b","list","Set","reverse","compareModuleLists","_ref3","_ref4","finalModules","failedModules","selectedModule","hasFailed","outer","lastModule","warnings","readableIdentifier","requestShortener","pop","idx","indexOf","splice","getOrderedChunkModulesIterableBySourceType","_ref5","source","metaData","codeGenResult","moduleSource","sources","i","exports","data","moduleId","getModuleId","_ref6","n","v","shortcutValue","join","e","message","cssFilenameTemplate","canBeInitial","cssFilename","cssChunkFilename","getChunkModulesIterableBySourceType"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/css/CssModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\nconst CssModule = require(\"../CssModule\");\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\nconst {\n\tCSS_MODULE_TYPE,\n\tCSS_MODULE_TYPE_GLOBAL,\n\tCSS_MODULE_TYPE_MODULE\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst SelfModuleFactory = require(\"../SelfModuleFactory\");\nconst WebpackError = require(\"../WebpackError\");\nconst CssExportDependency = require(\"../dependencies/CssExportDependency\");\nconst CssImportDependency = require(\"../dependencies/CssImportDependency\");\nconst CssLocalIdentifierDependency = require(\"../dependencies/CssLocalIdentifierDependency\");\nconst CssSelfLocalIdentifierDependency = require(\"../dependencies/CssSelfLocalIdentifierDependency\");\nconst CssUrlDependency = require(\"../dependencies/CssUrlDependency\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst createHash = require(\"../util/createHash\");\nconst memoize = require(\"../util/memoize\");\nconst nonNumericOnlyHash = require(\"../util/nonNumericOnlyHash\");\nconst CssExportsGenerator = require(\"./CssExportsGenerator\");\nconst CssGenerator = require(\"./CssGenerator\");\nconst CssParser = require(\"./CssParser\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssExperimentOptions} CssExperimentOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../util/memoize\")} Memoize */\n\nconst getCssLoadingRuntimeModule = memoize(() =>\n\trequire(\"./CssLoadingRuntimeModule\")\n);\n\nconst getSchema = name => {\n\tconst { definitions } = require(\"../../schemas/WebpackOptions.json\");\n\treturn {\n\t\tdefinitions,\n\t\toneOf: [{ $ref: `#/definitions/${name}` }]\n\t};\n};\n\nconst validateGeneratorOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/css/CssGeneratorOptions.check.js\"),\n\t() => getSchema(\"CssGeneratorOptions\"),\n\t{\n\t\tname: \"Css Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\nconst validateParserOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/css/CssParserOptions.check.js\"),\n\t() => getSchema(\"CssParserOptions\"),\n\t{\n\t\tname: \"Css Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\n\n/**\n * @param {string} str string\n * @param {boolean=} omitOptionalUnderscore if true, optional underscore is not added\n * @returns {string} escaped string\n */\nconst escapeCss = (str, omitOptionalUnderscore) => {\n\tconst escaped = `${str}`.replace(\n\t\t// cspell:word uffff\n\t\t/[^a-zA-Z0-9_\\u0081-\\uffff-]/g,\n\t\ts => `\\\\${s}`\n\t);\n\treturn !omitOptionalUnderscore && /^(?!--)[0-9_-]/.test(escaped)\n\t\t? `_${escaped}`\n\t\t: escaped;\n};\n\nconst plugin = \"CssModulesPlugin\";\n\nclass CssModulesPlugin {\n\t/**\n\t * @param {CssExperimentOptions} options options\n\t */\n\tconstructor({ exportsOnly = false }) {\n\t\tthis._exportsOnly = exportsOnly;\n\t}\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tplugin,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst selfFactory = new SelfModuleFactory(compilation.moduleGraph);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssUrlDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssUrlDependency,\n\t\t\t\t\tnew CssUrlDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssLocalIdentifierDependency,\n\t\t\t\t\tnew CssLocalIdentifierDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssSelfLocalIdentifierDependency,\n\t\t\t\t\tselfFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssSelfLocalIdentifierDependency,\n\t\t\t\t\tnew CssSelfLocalIdentifierDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssExportDependency,\n\t\t\t\t\tnew CssExportDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssImportDependency,\n\t\t\t\t\tnew CssImportDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tStaticExportsDependency,\n\t\t\t\t\tnew StaticExportsDependency.Template()\n\t\t\t\t);\n\t\t\t\tfor (const type of [\n\t\t\t\t\tCSS_MODULE_TYPE,\n\t\t\t\t\tCSS_MODULE_TYPE_GLOBAL,\n\t\t\t\t\tCSS_MODULE_TYPE_MODULE\n\t\t\t\t]) {\n\t\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\n\t\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\t\tcase CSS_MODULE_TYPE:\n\t\t\t\t\t\t\t\t\treturn new CssParser();\n\t\t\t\t\t\t\t\tcase CSS_MODULE_TYPE_GLOBAL:\n\t\t\t\t\t\t\t\t\treturn new CssParser({\n\t\t\t\t\t\t\t\t\t\tallowModeSwitch: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tcase CSS_MODULE_TYPE_MODULE:\n\t\t\t\t\t\t\t\t\treturn new CssParser({\n\t\t\t\t\t\t\t\t\t\tdefaultMode: \"local\"\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\t\tvalidateGeneratorOptions(generatorOptions);\n\t\t\t\t\t\t\treturn this._exportsOnly\n\t\t\t\t\t\t\t\t? new CssExportsGenerator()\n\t\t\t\t\t\t\t\t: new CssGenerator();\n\t\t\t\t\t\t});\n\t\t\t\t\tnormalModuleFactory.hooks.createModuleClass\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, (createData, resolveData) => {\n\t\t\t\t\t\t\tif (resolveData.dependencies.length > 0) {\n\t\t\t\t\t\t\t\t// When CSS is imported from CSS there is only one dependency\n\t\t\t\t\t\t\t\tconst dependency = resolveData.dependencies[0];\n\n\t\t\t\t\t\t\t\tif (dependency instanceof CssImportDependency) {\n\t\t\t\t\t\t\t\t\tconst parent =\n\t\t\t\t\t\t\t\t\t\t/** @type {CssModule} */\n\t\t\t\t\t\t\t\t\t\t(compilation.moduleGraph.getParentModule(dependency));\n\n\t\t\t\t\t\t\t\t\tif (parent instanceof CssModule) {\n\t\t\t\t\t\t\t\t\t\t/** @type {import(\"../CssModule\").Inheritance | undefined} */\n\t\t\t\t\t\t\t\t\t\tlet inheritance;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t(parent.cssLayer !== null &&\n\t\t\t\t\t\t\t\t\t\t\t\tparent.cssLayer !== undefined) ||\n\t\t\t\t\t\t\t\t\t\t\tparent.supports ||\n\t\t\t\t\t\t\t\t\t\t\tparent.media\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tif (!inheritance) {\n\t\t\t\t\t\t\t\t\t\t\t\tinheritance = [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tinheritance.push([\n\t\t\t\t\t\t\t\t\t\t\t\tparent.cssLayer,\n\t\t\t\t\t\t\t\t\t\t\t\tparent.supports,\n\t\t\t\t\t\t\t\t\t\t\t\tparent.media\n\t\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (parent.inheritance) {\n\t\t\t\t\t\t\t\t\t\t\tif (!inheritance) {\n\t\t\t\t\t\t\t\t\t\t\t\tinheritance = [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tinheritance.push(...parent.inheritance);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn new CssModule({\n\t\t\t\t\t\t\t\t\t\t\t...createData,\n\t\t\t\t\t\t\t\t\t\t\tcssLayer: dependency.layer,\n\t\t\t\t\t\t\t\t\t\t\tsupports: dependency.supports,\n\t\t\t\t\t\t\t\t\t\t\tmedia: dependency.media,\n\t\t\t\t\t\t\t\t\t\t\tinheritance\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn new CssModule({\n\t\t\t\t\t\t\t\t\t\t...createData,\n\t\t\t\t\t\t\t\t\t\tcssLayer: dependency.layer,\n\t\t\t\t\t\t\t\t\t\tsupports: dependency.supports,\n\t\t\t\t\t\t\t\t\t\tmedia: dependency.media\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn new CssModule(createData);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconst orderedCssModulesPerChunk = new WeakMap();\n\t\t\t\tcompilation.hooks.afterCodeGeneration.tap(\"CssModulesPlugin\", () => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (CssModulesPlugin.chunkHasCss(chunk, chunkGraph)) {\n\t\t\t\t\t\t\torderedCssModulesPerChunk.set(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tthis.getOrderedChunkCssModules(chunk, chunkGraph, compilation)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcompilation.hooks.contentHash.tap(\"CssModulesPlugin\", chunk => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\toutputOptions: {\n\t\t\t\t\t\t\thashSalt,\n\t\t\t\t\t\t\thashDigest,\n\t\t\t\t\t\t\thashDigestLength,\n\t\t\t\t\t\t\thashFunction\n\t\t\t\t\t\t}\n\t\t\t\t\t} = compilation;\n\t\t\t\t\tconst modules = orderedCssModulesPerChunk.get(chunk);\n\t\t\t\t\tif (modules === undefined) return;\n\t\t\t\t\tconst hash = createHash(hashFunction);\n\t\t\t\t\tif (hashSalt) hash.update(hashSalt);\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\thash.update(chunkGraph.getModuleHash(module, chunk.runtime));\n\t\t\t\t\t}\n\t\t\t\t\tconst digest = /** @type {string} */ (hash.digest(hashDigest));\n\t\t\t\t\tchunk.contentHash.css = nonNumericOnlyHash(digest, hashDigestLength);\n\t\t\t\t});\n\t\t\t\tcompilation.hooks.renderManifest.tap(plugin, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { hash, chunk, codeGenerationResults } = options;\n\n\t\t\t\t\tif (chunk instanceof HotUpdateChunk) return result;\n\n\t\t\t\t\t/** @type {CssModule[] | undefined} */\n\t\t\t\t\tconst modules = orderedCssModulesPerChunk.get(chunk);\n\t\t\t\t\tif (modules !== undefined) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\tthis.renderChunk({\n\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\t\tcodeGenerationResults,\n\t\t\t\t\t\t\t\t\tuniqueName: compilation.outputOptions.uniqueName,\n\t\t\t\t\t\t\t\t\tmodules\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tfilenameTemplate: CssModulesPlugin.getChunkFilenameTemplate(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tcompilation.outputOptions\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tcontentHashType: \"css\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tidentifier: `css${chunk.id}`,\n\t\t\t\t\t\t\thash: chunk.contentHash.css\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === \"jsonp\";\n\t\t\t\t};\n\t\t\t\tconst onceForChunkSet = new WeakSet();\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\n\t\t\t\t\tonceForChunkSet.add(chunk);\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\n\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\tset.add(RuntimeGlobals.getChunkCssFilename);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.makeNamespaceObject);\n\n\t\t\t\t\tconst CssLoadingRuntimeModule = getCssLoadingRuntimeModule();\n\t\t\t\t\tcompilation.addRuntimeModule(chunk, new CssLoadingRuntimeModule(set));\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hasCssModules)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {Iterable<Module>} modules unordered modules\n\t * @param {Compilation} compilation compilation\n\t * @returns {Module[]} ordered modules\n\t */\n\tgetModulesInOrder(chunk, modules, compilation) {\n\t\tif (!modules) return [];\n\n\t\t/** @type {Module[]} */\n\t\tconst modulesList = [...modules];\n\n\t\t// Get ordered list of modules per chunk group\n\t\t// Lists are in reverse order to allow to use Array.pop()\n\t\tconst modulesByChunkGroup = Array.from(chunk.groupsIterable, chunkGroup => {\n\t\t\tconst sortedModules = modulesList\n\t\t\t\t.map(module => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmodule,\n\t\t\t\t\t\tindex: chunkGroup.getModulePostOrderIndex(module)\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.filter(item => item.index !== undefined)\n\t\t\t\t.sort((a, b) => b.index - a.index)\n\t\t\t\t.map(item => item.module);\n\n\t\t\treturn { list: sortedModules, set: new Set(sortedModules) };\n\t\t});\n\n\t\tif (modulesByChunkGroup.length === 1)\n\t\t\treturn modulesByChunkGroup[0].list.reverse();\n\n\t\tconst compareModuleLists = ({ list: a }, { list: b }) => {\n\t\t\tif (a.length === 0) {\n\t\t\t\treturn b.length === 0 ? 0 : 1;\n\t\t\t} else {\n\t\t\t\tif (b.length === 0) return -1;\n\t\t\t\treturn compareModulesByIdentifier(a[a.length - 1], b[b.length - 1]);\n\t\t\t}\n\t\t};\n\n\t\tmodulesByChunkGroup.sort(compareModuleLists);\n\n\t\t/** @type {Module[]} */\n\t\tconst finalModules = [];\n\n\t\tfor (;;) {\n\t\t\tconst failedModules = new Set();\n\t\t\tconst list = modulesByChunkGroup[0].list;\n\t\t\tif (list.length === 0) {\n\t\t\t\t// done, everything empty\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/** @type {Module} */\n\t\t\tlet selectedModule = list[list.length - 1];\n\t\t\tlet hasFailed = undefined;\n\t\t\touter: for (;;) {\n\t\t\t\tfor (const { list, set } of modulesByChunkGroup) {\n\t\t\t\t\tif (list.length === 0) continue;\n\t\t\t\t\tconst lastModule = list[list.length - 1];\n\t\t\t\t\tif (lastModule === selectedModule) continue;\n\t\t\t\t\tif (!set.has(selectedModule)) continue;\n\t\t\t\t\tfailedModules.add(selectedModule);\n\t\t\t\t\tif (failedModules.has(lastModule)) {\n\t\t\t\t\t\t// There is a conflict, try other alternatives\n\t\t\t\t\t\thasFailed = lastModule;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tselectedModule = lastModule;\n\t\t\t\t\thasFailed = false;\n\t\t\t\t\tcontinue outer; // restart\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (hasFailed) {\n\t\t\t\t// There is a not resolve-able conflict with the selectedModule\n\t\t\t\tif (compilation) {\n\t\t\t\t\t// TODO print better warning\n\t\t\t\t\tcompilation.warnings.push(\n\t\t\t\t\t\tnew WebpackError(\n\t\t\t\t\t\t\t`chunk ${chunk.name || chunk.id}\\nConflicting order between ${\n\t\t\t\t\t\t\t\t/** @type {Module} */\n\t\t\t\t\t\t\t\t(hasFailed).readableIdentifier(compilation.requestShortener)\n\t\t\t\t\t\t\t} and ${selectedModule.readableIdentifier(\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tselectedModule = /** @type {Module} */ (hasFailed);\n\t\t\t}\n\t\t\t// Insert the selected module into the final modules list\n\t\t\tfinalModules.push(selectedModule);\n\t\t\t// Remove the selected module from all lists\n\t\t\tfor (const { list, set } of modulesByChunkGroup) {\n\t\t\t\tconst lastModule = list[list.length - 1];\n\t\t\t\tif (lastModule === selectedModule) list.pop();\n\t\t\t\telse if (hasFailed && set.has(selectedModule)) {\n\t\t\t\t\tconst idx = list.indexOf(selectedModule);\n\t\t\t\t\tif (idx >= 0) list.splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmodulesByChunkGroup.sort(compareModuleLists);\n\t\t}\n\t\treturn finalModules;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {ChunkGraph} chunkGraph chunk graph\n\t * @param {Compilation} compilation compilation\n\t * @returns {Module[]} ordered css modules\n\t */\n\tgetOrderedChunkCssModules(chunk, chunkGraph, compilation) {\n\t\treturn [\n\t\t\t...this.getModulesInOrder(\n\t\t\t\tchunk,\n\t\t\t\tchunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\tchunk,\n\t\t\t\t\t\"css-import\",\n\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t),\n\t\t\t\tcompilation\n\t\t\t),\n\t\t\t...this.getModulesInOrder(\n\t\t\t\tchunk,\n\t\t\t\tchunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\tchunk,\n\t\t\t\t\t\"css\",\n\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t),\n\t\t\t\tcompilation\n\t\t\t)\n\t\t];\n\t}\n\n\t/**\n\t * @param {Object} options options\n\t * @param {string | undefined} options.uniqueName unique name\n\t * @param {Chunk} options.chunk chunk\n\t * @param {ChunkGraph} options.chunkGraph chunk graph\n\t * @param {CodeGenerationResults} options.codeGenerationResults code generation results\n\t * @param {CssModule[]} options.modules ordered css modules\n\t * @returns {Source} generated source\n\t */\n\trenderChunk({\n\t\tuniqueName,\n\t\tchunk,\n\t\tchunkGraph,\n\t\tcodeGenerationResults,\n\t\tmodules\n\t}) {\n\t\tconst source = new ConcatSource();\n\t\t/** @type {string[]} */\n\t\tconst metaData = [];\n\t\tfor (const module of modules) {\n\t\t\ttry {\n\t\t\t\tconst codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n\n\t\t\t\tlet moduleSource =\n\t\t\t\t\tcodeGenResult.sources.get(\"css\") ||\n\t\t\t\t\tcodeGenResult.sources.get(\"css-import\");\n\n\t\t\t\tlet inheritance = [[module.cssLayer, module.supports, module.media]];\n\n\t\t\t\tif (module.inheritance) {\n\t\t\t\t\tinheritance.push(...module.inheritance);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < inheritance.length; i++) {\n\t\t\t\t\tconst layer = inheritance[i][0];\n\t\t\t\t\tconst supports = inheritance[i][1];\n\t\t\t\t\tconst media = inheritance[i][2];\n\n\t\t\t\t\tif (media) {\n\t\t\t\t\t\tmoduleSource = new ConcatSource(\n\t\t\t\t\t\t\t`@media ${media} {\\n`,\n\t\t\t\t\t\t\tnew PrefixSource(\"\\t\", moduleSource),\n\t\t\t\t\t\t\t\"}\\n\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (supports) {\n\t\t\t\t\t\tmoduleSource = new ConcatSource(\n\t\t\t\t\t\t\t`@supports (${supports}) {\\n`,\n\t\t\t\t\t\t\tnew PrefixSource(\"\\t\", moduleSource),\n\t\t\t\t\t\t\t\"}\\n\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Layer can be anonymous\n\t\t\t\t\tif (layer !== undefined && layer !== null) {\n\t\t\t\t\t\tmoduleSource = new ConcatSource(\n\t\t\t\t\t\t\t`@layer${layer ? ` ${layer}` : \"\"} {\\n`,\n\t\t\t\t\t\t\tnew PrefixSource(\"\\t\", moduleSource),\n\t\t\t\t\t\t\t\"}\\n\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (moduleSource) {\n\t\t\t\t\tsource.add(moduleSource);\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t}\n\t\t\t\t/** @type {Map<string, string> | undefined} */\n\t\t\t\tconst exports =\n\t\t\t\t\tcodeGenResult.data && codeGenResult.data.get(\"css-exports\");\n\t\t\t\tlet moduleId = chunkGraph.getModuleId(module) + \"\";\n\n\t\t\t\t// When `optimization.moduleIds` is `named` the module id is a path, so we need to normalize it between platforms\n\t\t\t\tif (typeof moduleId === \"string\") {\n\t\t\t\t\tmoduleId = moduleId.replace(/\\\\/g, \"/\");\n\t\t\t\t}\n\n\t\t\t\tmetaData.push(\n\t\t\t\t\t`${\n\t\t\t\t\t\texports\n\t\t\t\t\t\t\t? Array.from(exports, ([n, v]) => {\n\t\t\t\t\t\t\t\t\tconst shortcutValue = `${\n\t\t\t\t\t\t\t\t\t\tuniqueName ? uniqueName + \"-\" : \"\"\n\t\t\t\t\t\t\t\t\t}${moduleId}-${n}`;\n\t\t\t\t\t\t\t\t\treturn v === shortcutValue\n\t\t\t\t\t\t\t\t\t\t? `${escapeCss(n)}/`\n\t\t\t\t\t\t\t\t\t\t: v === \"--\" + shortcutValue\n\t\t\t\t\t\t\t\t\t\t? `${escapeCss(n)}%`\n\t\t\t\t\t\t\t\t\t\t: `${escapeCss(n)}(${escapeCss(v)})`;\n\t\t\t\t\t\t\t  }).join(\"\")\n\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t}${escapeCss(moduleId)}`\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\te.message += `\\nduring rendering of css ${module.identifier()}`;\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tsource.add(\n\t\t\t`head{--webpack-${escapeCss(\n\t\t\t\t(uniqueName ? uniqueName + \"-\" : \"\") + chunk.id,\n\t\t\t\ttrue\n\t\t\t)}:${metaData.join(\",\")};}`\n\t\t);\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {OutputOptions} outputOptions output options\n\t * @returns {Chunk[\"cssFilenameTemplate\"] | OutputOptions[\"cssFilename\"] | OutputOptions[\"cssChunkFilename\"]} used filename template\n\t */\n\tstatic getChunkFilenameTemplate(chunk, outputOptions) {\n\t\tif (chunk.cssFilenameTemplate) {\n\t\t\treturn chunk.cssFilenameTemplate;\n\t\t} else if (chunk.canBeInitial()) {\n\t\t\treturn outputOptions.cssFilename;\n\t\t} else {\n\t\t\treturn outputOptions.cssChunkFilename;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {ChunkGraph} chunkGraph chunk graph\n\t * @returns {boolean} true, when the chunk has css\n\t */\n\tstatic chunkHasCss(chunk, chunkGraph) {\n\t\treturn (\n\t\t\t!!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css\") ||\n\t\t\t!!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css-import\")\n\t\t);\n\t}\n}\n\nmodule.exports = CssModulesPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}