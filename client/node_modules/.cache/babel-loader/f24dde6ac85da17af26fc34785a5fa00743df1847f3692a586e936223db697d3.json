{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  STAGE_ADVANCED\n} = require(\"../OptimizationStages\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AggressiveMergingPlugin {\n  constructor(options) {\n    if (options !== undefined && typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\");\n    }\n    this.options = options || {};\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const options = this.options;\n    const minSizeReduce = options.minSizeReduce || 1.5;\n    compiler.hooks.thisCompilation.tap(\"AggressiveMergingPlugin\", compilation => {\n      compilation.hooks.optimizeChunks.tap({\n        name: \"AggressiveMergingPlugin\",\n        stage: STAGE_ADVANCED\n      }, chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        /** @type {{a: Chunk, b: Chunk, improvement: number}[]} */\n        let combinations = [];\n        for (const a of chunks) {\n          if (a.canBeInitial()) continue;\n          for (const b of chunks) {\n            if (b.canBeInitial()) continue;\n            if (b === a) break;\n            if (!chunkGraph.canChunksBeIntegrated(a, b)) {\n              continue;\n            }\n            const aSize = chunkGraph.getChunkSize(b, {\n              chunkOverhead: 0\n            });\n            const bSize = chunkGraph.getChunkSize(a, {\n              chunkOverhead: 0\n            });\n            const abSize = chunkGraph.getIntegratedChunksSize(b, a, {\n              chunkOverhead: 0\n            });\n            const improvement = (aSize + bSize) / abSize;\n            combinations.push({\n              a,\n              b,\n              improvement\n            });\n          }\n        }\n        combinations.sort((a, b) => {\n          return b.improvement - a.improvement;\n        });\n        const pair = combinations[0];\n        if (!pair) return;\n        if (pair.improvement < minSizeReduce) return;\n        chunkGraph.integrateChunks(pair.b, pair.a);\n        compilation.chunks.delete(pair.a);\n        return true;\n      });\n    });\n  }\n}\nmodule.exports = AggressiveMergingPlugin;","map":{"version":3,"names":["STAGE_ADVANCED","require","AggressiveMergingPlugin","constructor","options","undefined","Array","isArray","Error","apply","compiler","minSizeReduce","hooks","thisCompilation","tap","compilation","optimizeChunks","name","stage","chunks","chunkGraph","combinations","a","canBeInitial","b","canChunksBeIntegrated","aSize","getChunkSize","chunkOverhead","bSize","abSize","getIntegratedChunksSize","improvement","push","sort","pair","integrateChunks","delete","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/optimize/AggressiveMergingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { STAGE_ADVANCED } = require(\"../OptimizationStages\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AggressiveMergingPlugin {\n\tconstructor(options) {\n\t\tif (\n\t\t\t(options !== undefined && typeof options !== \"object\") ||\n\t\t\tArray.isArray(options)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst minSizeReduce = options.minSizeReduce || 1.5;\n\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"AggressiveMergingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeChunks.tap(\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"AggressiveMergingPlugin\",\n\t\t\t\t\t\tstage: STAGE_ADVANCED\n\t\t\t\t\t},\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\t/** @type {{a: Chunk, b: Chunk, improvement: number}[]} */\n\t\t\t\t\t\tlet combinations = [];\n\t\t\t\t\t\tfor (const a of chunks) {\n\t\t\t\t\t\t\tif (a.canBeInitial()) continue;\n\t\t\t\t\t\t\tfor (const b of chunks) {\n\t\t\t\t\t\t\t\tif (b.canBeInitial()) continue;\n\t\t\t\t\t\t\t\tif (b === a) break;\n\t\t\t\t\t\t\t\tif (!chunkGraph.canChunksBeIntegrated(a, b)) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst aSize = chunkGraph.getChunkSize(b, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst bSize = chunkGraph.getChunkSize(a, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst abSize = chunkGraph.getIntegratedChunksSize(b, a, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst improvement = (aSize + bSize) / abSize;\n\t\t\t\t\t\t\t\tcombinations.push({\n\t\t\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\t\timprovement\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcombinations.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.improvement - a.improvement;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst pair = combinations[0];\n\n\t\t\t\t\t\tif (!pair) return;\n\t\t\t\t\t\tif (pair.improvement < minSizeReduce) return;\n\n\t\t\t\t\t\tchunkGraph.integrateChunks(pair.b, pair.a);\n\t\t\t\t\t\tcompilation.chunks.delete(pair.a);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AggressiveMergingPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAe,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAE3D;AACA;;AAEA,MAAMC,uBAAuB,CAAC;EAC7BC,WAAWA,CAACC,OAAO,EAAE;IACpB,IACEA,OAAO,KAAKC,SAAS,IAAI,OAAOD,OAAO,KAAK,QAAQ,IACrDE,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EACrB;MACD,MAAM,IAAII,KAAK,CACd,wIACD,CAAC;IACF;IACA,IAAI,CAACJ,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCK,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMN,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMO,aAAa,GAAGP,OAAO,CAACO,aAAa,IAAI,GAAG;IAElDD,QAAQ,CAACE,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,yBAAyB,EACzBC,WAAW,IAAI;MACdA,WAAW,CAACH,KAAK,CAACI,cAAc,CAACF,GAAG,CACnC;QACCG,IAAI,EAAE,yBAAyB;QAC/BC,KAAK,EAAElB;MACR,CAAC,EACDmB,MAAM,IAAI;QACT,MAAMC,UAAU,GAAGL,WAAW,CAACK,UAAU;QACzC;QACA,IAAIC,YAAY,GAAG,EAAE;QACrB,KAAK,MAAMC,CAAC,IAAIH,MAAM,EAAE;UACvB,IAAIG,CAAC,CAACC,YAAY,CAAC,CAAC,EAAE;UACtB,KAAK,MAAMC,CAAC,IAAIL,MAAM,EAAE;YACvB,IAAIK,CAAC,CAACD,YAAY,CAAC,CAAC,EAAE;YACtB,IAAIC,CAAC,KAAKF,CAAC,EAAE;YACb,IAAI,CAACF,UAAU,CAACK,qBAAqB,CAACH,CAAC,EAAEE,CAAC,CAAC,EAAE;cAC5C;YACD;YACA,MAAME,KAAK,GAAGN,UAAU,CAACO,YAAY,CAACH,CAAC,EAAE;cACxCI,aAAa,EAAE;YAChB,CAAC,CAAC;YACF,MAAMC,KAAK,GAAGT,UAAU,CAACO,YAAY,CAACL,CAAC,EAAE;cACxCM,aAAa,EAAE;YAChB,CAAC,CAAC;YACF,MAAME,MAAM,GAAGV,UAAU,CAACW,uBAAuB,CAACP,CAAC,EAAEF,CAAC,EAAE;cACvDM,aAAa,EAAE;YAChB,CAAC,CAAC;YACF,MAAMI,WAAW,GAAG,CAACN,KAAK,GAAGG,KAAK,IAAIC,MAAM;YAC5CT,YAAY,CAACY,IAAI,CAAC;cACjBX,CAAC;cACDE,CAAC;cACDQ;YACD,CAAC,CAAC;UACH;QACD;QAEAX,YAAY,CAACa,IAAI,CAAC,CAACZ,CAAC,EAAEE,CAAC,KAAK;UAC3B,OAAOA,CAAC,CAACQ,WAAW,GAAGV,CAAC,CAACU,WAAW;QACrC,CAAC,CAAC;QAEF,MAAMG,IAAI,GAAGd,YAAY,CAAC,CAAC,CAAC;QAE5B,IAAI,CAACc,IAAI,EAAE;QACX,IAAIA,IAAI,CAACH,WAAW,GAAGrB,aAAa,EAAE;QAEtCS,UAAU,CAACgB,eAAe,CAACD,IAAI,CAACX,CAAC,EAAEW,IAAI,CAACb,CAAC,CAAC;QAC1CP,WAAW,CAACI,MAAM,CAACkB,MAAM,CAACF,IAAI,CAACb,CAAC,CAAC;QACjC,OAAO,IAAI;MACZ,CACD,CAAC;IACF,CACD,CAAC;EACF;AACD;AAEAgB,MAAM,CAACC,OAAO,GAAGrC,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}