{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass NullDependency extends Dependency {\n  get type() {\n    return \"null\";\n  }\n\n  /**\n   * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n   */\n  couldAffectReferencingModule() {\n    return false;\n  }\n}\nNullDependency.Template = class NullDependencyTemplate extends DependencyTemplate {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {}\n};\nmodule.exports = NullDependency;","map":{"version":3,"names":["Dependency","require","DependencyTemplate","NullDependency","type","couldAffectReferencingModule","Template","NullDependencyTemplate","apply","dependency","source","templateContext","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/dependencies/NullDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass NullDependency extends Dependency {\n\tget type() {\n\t\treturn \"null\";\n\t}\n\n\t/**\n\t * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n\t */\n\tcouldAffectReferencingModule() {\n\t\treturn false;\n\t}\n}\n\nNullDependency.Template = class NullDependencyTemplate extends (\n\tDependencyTemplate\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {}\n};\n\nmodule.exports = NullDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;;AAE3D;AACA;AACA;;AAEA,MAAME,cAAc,SAASH,UAAU,CAAC;EACvC,IAAII,IAAIA,CAAA,EAAG;IACV,OAAO,MAAM;EACd;;EAEA;AACD;AACA;EACCC,4BAA4BA,CAAA,EAAG;IAC9B,OAAO,KAAK;EACb;AACD;AAEAF,cAAc,CAACG,QAAQ,GAAG,MAAMC,sBAAsB,SACrDL,kBAAkB,CACjB;EACD;AACD;AACA;AACA;AACA;AACA;EACCM,KAAKA,CAACC,UAAU,EAAEC,MAAM,EAAEC,eAAe,EAAE,CAAC;AAC7C,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGV,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}