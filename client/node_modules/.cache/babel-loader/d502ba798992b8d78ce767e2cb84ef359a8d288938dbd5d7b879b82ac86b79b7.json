{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nclass GlobalRuntimeModule extends RuntimeModule {\n  constructor() {\n    super(\"global\");\n  }\n\n  /**\n   * @returns {string} runtime code\n   */\n  generate() {\n    return Template.asString([`${RuntimeGlobals.global} = (function() {`, Template.indent([\"if (typeof globalThis === 'object') return globalThis;\", \"try {\", Template.indent(\n    // This works in non-strict mode\n    // or\n    // This works if eval is allowed (see CSP)\n    \"return this || new Function('return this')();\"), \"} catch (e) {\", Template.indent(\n    // This works if the window reference is available\n    \"if (typeof window === 'object') return window;\"), \"}\"\n    // It can still be `undefined`, but nothing to do about it...\n    // We return `undefined`, instead of nothing here, so it's\n    // easier to handle this case:\n    //   if (!global) { … }\n    ]), \"})();\"]);\n  }\n}\nmodule.exports = GlobalRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","GlobalRuntimeModule","constructor","generate","asString","global","indent","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/runtime/GlobalRuntimeModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\nclass GlobalRuntimeModule extends RuntimeModule {\n\tconstructor() {\n\t\tsuper(\"global\");\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\treturn Template.asString([\n\t\t\t`${RuntimeGlobals.global} = (function() {`,\n\t\t\tTemplate.indent([\n\t\t\t\t\"if (typeof globalThis === 'object') return globalThis;\",\n\t\t\t\t\"try {\",\n\t\t\t\tTemplate.indent(\n\t\t\t\t\t// This works in non-strict mode\n\t\t\t\t\t// or\n\t\t\t\t\t// This works if eval is allowed (see CSP)\n\t\t\t\t\t\"return this || new Function('return this')();\"\n\t\t\t\t),\n\t\t\t\t\"} catch (e) {\",\n\t\t\t\tTemplate.indent(\n\t\t\t\t\t// This works if the window reference is available\n\t\t\t\t\t\"if (typeof window === 'object') return window;\"\n\t\t\t\t),\n\t\t\t\t\"}\"\n\t\t\t\t// It can still be `undefined`, but nothing to do about it...\n\t\t\t\t// We return `undefined`, instead of nothing here, so it's\n\t\t\t\t// easier to handle this case:\n\t\t\t\t//   if (!global) { … }\n\t\t\t]),\n\t\t\t\"})();\"\n\t\t]);\n\t}\n}\n\nmodule.exports = GlobalRuntimeModule;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEvC,MAAMG,mBAAmB,SAASF,aAAa,CAAC;EAC/CG,WAAWA,CAAA,EAAG;IACb,KAAK,CAAC,QAAQ,CAAC;EAChB;;EAEA;AACD;AACA;EACCC,QAAQA,CAAA,EAAG;IACV,OAAOH,QAAQ,CAACI,QAAQ,CAAC,CACvB,GAAEP,cAAc,CAACQ,MAAO,kBAAiB,EAC1CL,QAAQ,CAACM,MAAM,CAAC,CACf,wDAAwD,EACxD,OAAO,EACPN,QAAQ,CAACM,MAAM;IACd;IACA;IACA;IACA,+CACD,CAAC,EACD,eAAe,EACfN,QAAQ,CAACM,MAAM;IACd;IACA,gDACD,CAAC,EACD;IACA;IACA;IACA;IACA;IAAA,CACA,CAAC,EACF,OAAO,CACP,CAAC;EACH;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGP,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}