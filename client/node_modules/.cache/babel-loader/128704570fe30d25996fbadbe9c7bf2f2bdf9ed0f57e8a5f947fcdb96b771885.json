{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = void 0;\nvar constants_1 = require(\"./constants\");\nvar getBigInt_1 = require(\"./getBigInt\");\nvar S_IFMT = constants_1.constants.S_IFMT,\n  S_IFDIR = constants_1.constants.S_IFDIR,\n  S_IFREG = constants_1.constants.S_IFREG,\n  S_IFBLK = constants_1.constants.S_IFBLK,\n  S_IFCHR = constants_1.constants.S_IFCHR,\n  S_IFLNK = constants_1.constants.S_IFLNK,\n  S_IFIFO = constants_1.constants.S_IFIFO,\n  S_IFSOCK = constants_1.constants.S_IFSOCK;\n/**\n * Statistics about a file/directory, like `fs.Stats`.\n */\nvar Stats = /** @class */function () {\n  function Stats() {}\n  Stats.build = function (node, bigint) {\n    if (bigint === void 0) {\n      bigint = false;\n    }\n    var stats = new Stats();\n    var uid = node.uid,\n      gid = node.gid,\n      atime = node.atime,\n      mtime = node.mtime,\n      ctime = node.ctime;\n    var getStatNumber = !bigint ? function (number) {\n      return number;\n    } : getBigInt_1.default;\n    // Copy all values on Stats from Node, so that if Node values\n    // change, values on Stats would still be the old ones,\n    // just like in Node fs.\n    stats.uid = getStatNumber(uid);\n    stats.gid = getStatNumber(gid);\n    stats.rdev = getStatNumber(0);\n    stats.blksize = getStatNumber(4096);\n    stats.ino = getStatNumber(node.ino);\n    stats.size = getStatNumber(node.getSize());\n    stats.blocks = getStatNumber(1);\n    stats.atime = atime;\n    stats.mtime = mtime;\n    stats.ctime = ctime;\n    stats.birthtime = ctime;\n    stats.atimeMs = getStatNumber(atime.getTime());\n    stats.mtimeMs = getStatNumber(mtime.getTime());\n    var ctimeMs = getStatNumber(ctime.getTime());\n    stats.ctimeMs = ctimeMs;\n    stats.birthtimeMs = ctimeMs;\n    stats.dev = getStatNumber(0);\n    stats.mode = getStatNumber(node.mode);\n    stats.nlink = getStatNumber(node.nlink);\n    return stats;\n  };\n  Stats.prototype._checkModeProperty = function (property) {\n    return (Number(this.mode) & S_IFMT) === property;\n  };\n  Stats.prototype.isDirectory = function () {\n    return this._checkModeProperty(S_IFDIR);\n  };\n  Stats.prototype.isFile = function () {\n    return this._checkModeProperty(S_IFREG);\n  };\n  Stats.prototype.isBlockDevice = function () {\n    return this._checkModeProperty(S_IFBLK);\n  };\n  Stats.prototype.isCharacterDevice = function () {\n    return this._checkModeProperty(S_IFCHR);\n  };\n  Stats.prototype.isSymbolicLink = function () {\n    return this._checkModeProperty(S_IFLNK);\n  };\n  Stats.prototype.isFIFO = function () {\n    return this._checkModeProperty(S_IFIFO);\n  };\n  Stats.prototype.isSocket = function () {\n    return this._checkModeProperty(S_IFSOCK);\n  };\n  return Stats;\n}();\nexports.Stats = Stats;\nexports.default = Stats;","map":{"version":3,"names":["Object","defineProperty","exports","value","Stats","constants_1","require","getBigInt_1","S_IFMT","constants","S_IFDIR","S_IFREG","S_IFBLK","S_IFCHR","S_IFLNK","S_IFIFO","S_IFSOCK","build","node","bigint","stats","uid","gid","atime","mtime","ctime","getStatNumber","number","default","rdev","blksize","ino","size","getSize","blocks","birthtime","atimeMs","getTime","mtimeMs","ctimeMs","birthtimeMs","dev","mode","nlink","prototype","_checkModeProperty","property","Number","isDirectory","isFile","isBlockDevice","isCharacterDevice","isSymbolicLink","isFIFO","isSocket"],"sources":["/home/hemanth/react-project/client/node_modules/memfs/lib/Stats.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stats = void 0;\nvar constants_1 = require(\"./constants\");\nvar getBigInt_1 = require(\"./getBigInt\");\nvar S_IFMT = constants_1.constants.S_IFMT, S_IFDIR = constants_1.constants.S_IFDIR, S_IFREG = constants_1.constants.S_IFREG, S_IFBLK = constants_1.constants.S_IFBLK, S_IFCHR = constants_1.constants.S_IFCHR, S_IFLNK = constants_1.constants.S_IFLNK, S_IFIFO = constants_1.constants.S_IFIFO, S_IFSOCK = constants_1.constants.S_IFSOCK;\n/**\n * Statistics about a file/directory, like `fs.Stats`.\n */\nvar Stats = /** @class */ (function () {\n    function Stats() {\n    }\n    Stats.build = function (node, bigint) {\n        if (bigint === void 0) { bigint = false; }\n        var stats = new Stats();\n        var uid = node.uid, gid = node.gid, atime = node.atime, mtime = node.mtime, ctime = node.ctime;\n        var getStatNumber = !bigint ? function (number) { return number; } : getBigInt_1.default;\n        // Copy all values on Stats from Node, so that if Node values\n        // change, values on Stats would still be the old ones,\n        // just like in Node fs.\n        stats.uid = getStatNumber(uid);\n        stats.gid = getStatNumber(gid);\n        stats.rdev = getStatNumber(0);\n        stats.blksize = getStatNumber(4096);\n        stats.ino = getStatNumber(node.ino);\n        stats.size = getStatNumber(node.getSize());\n        stats.blocks = getStatNumber(1);\n        stats.atime = atime;\n        stats.mtime = mtime;\n        stats.ctime = ctime;\n        stats.birthtime = ctime;\n        stats.atimeMs = getStatNumber(atime.getTime());\n        stats.mtimeMs = getStatNumber(mtime.getTime());\n        var ctimeMs = getStatNumber(ctime.getTime());\n        stats.ctimeMs = ctimeMs;\n        stats.birthtimeMs = ctimeMs;\n        stats.dev = getStatNumber(0);\n        stats.mode = getStatNumber(node.mode);\n        stats.nlink = getStatNumber(node.nlink);\n        return stats;\n    };\n    Stats.prototype._checkModeProperty = function (property) {\n        return (Number(this.mode) & S_IFMT) === property;\n    };\n    Stats.prototype.isDirectory = function () {\n        return this._checkModeProperty(S_IFDIR);\n    };\n    Stats.prototype.isFile = function () {\n        return this._checkModeProperty(S_IFREG);\n    };\n    Stats.prototype.isBlockDevice = function () {\n        return this._checkModeProperty(S_IFBLK);\n    };\n    Stats.prototype.isCharacterDevice = function () {\n        return this._checkModeProperty(S_IFCHR);\n    };\n    Stats.prototype.isSymbolicLink = function () {\n        return this._checkModeProperty(S_IFLNK);\n    };\n    Stats.prototype.isFIFO = function () {\n        return this._checkModeProperty(S_IFIFO);\n    };\n    Stats.prototype.isSocket = function () {\n        return this._checkModeProperty(S_IFSOCK);\n    };\n    return Stats;\n}());\nexports.Stats = Stats;\nexports.default = Stats;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}