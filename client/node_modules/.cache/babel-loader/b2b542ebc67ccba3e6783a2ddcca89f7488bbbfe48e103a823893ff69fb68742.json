{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\nclass AMDRequireArrayDependency extends NullDependency {\n  /**\n   * @param {TODO} depsArray deps array\n   * @param {Range} range range\n   */\n  constructor(depsArray, range) {\n    super();\n    this.depsArray = depsArray;\n    this.range = range;\n  }\n  get type() {\n    return \"amd require array\";\n  }\n  get category() {\n    return \"amd\";\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.depsArray);\n    write(this.range);\n    super.serialize(context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.depsArray = read();\n    this.range = read();\n    super.deserialize(context);\n  }\n}\nmakeSerializable(AMDRequireArrayDependency, \"webpack/lib/dependencies/AMDRequireArrayDependency\");\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends DependencyTemplate {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const dep = /** @type {AMDRequireArrayDependency} */dependency;\n    const content = this.getContent(dep, templateContext);\n    source.replace(dep.range[0], dep.range[1] - 1, content);\n  }\n  getContent(dep, templateContext) {\n    const requires = dep.depsArray.map(dependency => {\n      return this.contentForDependency(dependency, templateContext);\n    });\n    return `[${requires.join(\", \")}]`;\n  }\n  contentForDependency(dep, _ref) {\n    let {\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      runtimeRequirements\n    } = _ref;\n    if (typeof dep === \"string\") {\n      return dep;\n    }\n    if (dep.localModule) {\n      return dep.localModule.variableName();\n    } else {\n      return runtimeTemplate.moduleExports({\n        module: moduleGraph.getModule(dep),\n        chunkGraph,\n        request: dep.request,\n        runtimeRequirements\n      });\n    }\n  }\n};\nmodule.exports = AMDRequireArrayDependency;","map":{"version":3,"names":["DependencyTemplate","require","makeSerializable","NullDependency","AMDRequireArrayDependency","constructor","depsArray","range","type","category","serialize","context","write","deserialize","read","Template","AMDRequireArrayDependencyTemplate","apply","dependency","source","templateContext","dep","content","getContent","replace","requires","map","contentForDependency","join","_ref","runtimeTemplate","moduleGraph","chunkGraph","runtimeRequirements","localModule","variableName","moduleExports","module","getModule","request","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/dependencies/AMDRequireArrayDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\nclass AMDRequireArrayDependency extends NullDependency {\n\t/**\n\t * @param {TODO} depsArray deps array\n\t * @param {Range} range range\n\t */\n\tconstructor(depsArray, range) {\n\t\tsuper();\n\n\t\tthis.depsArray = depsArray;\n\t\tthis.range = range;\n\t}\n\n\tget type() {\n\t\treturn \"amd require array\";\n\t}\n\n\tget category() {\n\t\treturn \"amd\";\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.depsArray);\n\t\twrite(this.range);\n\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.depsArray = read();\n\t\tthis.range = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tAMDRequireArrayDependency,\n\t\"webpack/lib/dependencies/AMDRequireArrayDependency\"\n);\n\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends (\n\tDependencyTemplate\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst dep = /** @type {AMDRequireArrayDependency} */ (dependency);\n\t\tconst content = this.getContent(dep, templateContext);\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, content);\n\t}\n\n\tgetContent(dep, templateContext) {\n\t\tconst requires = dep.depsArray.map(dependency => {\n\t\t\treturn this.contentForDependency(dependency, templateContext);\n\t\t});\n\t\treturn `[${requires.join(\", \")}]`;\n\t}\n\n\tcontentForDependency(\n\t\tdep,\n\t\t{ runtimeTemplate, moduleGraph, chunkGraph, runtimeRequirements }\n\t) {\n\t\tif (typeof dep === \"string\") {\n\t\t\treturn dep;\n\t\t}\n\n\t\tif (dep.localModule) {\n\t\t\treturn dep.localModule.variableName();\n\t\t} else {\n\t\t\treturn runtimeTemplate.moduleExports({\n\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\tchunkGraph,\n\t\t\t\trequest: dep.request,\n\t\t\t\truntimeRequirements\n\t\t\t});\n\t\t}\n\t}\n};\n\nmodule.exports = AMDRequireArrayDependency;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}