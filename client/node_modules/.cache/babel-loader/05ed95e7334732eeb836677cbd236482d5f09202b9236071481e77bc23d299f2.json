{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\nconst JsonpChunkLoadingRuntimeModule = require(\"./JsonpChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass JsonpTemplatePlugin {\n  /**\n   * @deprecated use JsonpChunkLoadingRuntimeModule.getCompilationHooks instead\n   * @param {Compilation} compilation the compilation\n   * @returns {JsonpChunkLoadingRuntimeModule.JsonpCompilationPluginHooks} hooks\n   */\n  static getCompilationHooks(compilation) {\n    return JsonpChunkLoadingRuntimeModule.getCompilationHooks(compilation);\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.options.output.chunkLoading = \"jsonp\";\n    new ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n    new EnableChunkLoadingPlugin(\"jsonp\").apply(compiler);\n  }\n}\nmodule.exports = JsonpTemplatePlugin;","map":{"version":3,"names":["ArrayPushCallbackChunkFormatPlugin","require","EnableChunkLoadingPlugin","JsonpChunkLoadingRuntimeModule","JsonpTemplatePlugin","getCompilationHooks","compilation","apply","compiler","options","output","chunkLoading","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/web/JsonpTemplatePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\nconst JsonpChunkLoadingRuntimeModule = require(\"./JsonpChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass JsonpTemplatePlugin {\n\t/**\n\t * @deprecated use JsonpChunkLoadingRuntimeModule.getCompilationHooks instead\n\t * @param {Compilation} compilation the compilation\n\t * @returns {JsonpChunkLoadingRuntimeModule.JsonpCompilationPluginHooks} hooks\n\t */\n\tstatic getCompilationHooks(compilation) {\n\t\treturn JsonpChunkLoadingRuntimeModule.getCompilationHooks(compilation);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.options.output.chunkLoading = \"jsonp\";\n\t\tnew ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n\t\tnew EnableChunkLoadingPlugin(\"jsonp\").apply(compiler);\n\t}\n}\n\nmodule.exports = JsonpTemplatePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,kCAAkC,GAAGC,OAAO,CAAC,kDAAkD,CAAC;AACtG,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,wCAAwC,CAAC;AAClF,MAAME,8BAA8B,GAAGF,OAAO,CAAC,kCAAkC,CAAC;;AAElF;AACA;AACA;;AAEA,MAAMG,mBAAmB,CAAC;EACzB;AACD;AACA;AACA;AACA;EACC,OAAOC,mBAAmBA,CAACC,WAAW,EAAE;IACvC,OAAOH,8BAA8B,CAACE,mBAAmB,CAACC,WAAW,CAAC;EACvE;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACC,YAAY,GAAG,OAAO;IAC9C,IAAIX,kCAAkC,CAAC,CAAC,CAACO,KAAK,CAACC,QAAQ,CAAC;IACxD,IAAIN,wBAAwB,CAAC,OAAO,CAAC,CAACK,KAAK,CAACC,QAAQ,CAAC;EACtD;AACD;AAEAI,MAAM,CAACC,OAAO,GAAGT,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}