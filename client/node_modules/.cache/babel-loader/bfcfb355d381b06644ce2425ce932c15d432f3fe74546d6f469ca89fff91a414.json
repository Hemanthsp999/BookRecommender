{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst memoize = require(\"../util/memoize\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\nclass CssUrlDependency extends ModuleDependency {\n  /**\n   * @param {string} request request\n   * @param {Range} range range of the argument\n   * @param {\"string\" | \"url\"} urlType dependency type e.g. url() or string\n   */\n  constructor(request, range, urlType) {\n    super(request);\n    this.range = range;\n    this.urlType = urlType;\n  }\n  get type() {\n    return \"css url()\";\n  }\n  get category() {\n    return \"url\";\n  }\n\n  /**\n   * @param {string} context context directory\n   * @returns {Module} a module\n   */\n  createIgnoredModule(context) {\n    const RawDataUrlModule = getRawDataUrlModule();\n    return new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.urlType);\n    super.serialize(context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.urlType = read();\n    super.deserialize(context);\n  }\n}\n\n/**\n * @param {string} str string\n * @returns {string} string in quotes if needed\n */\nconst cssEscapeString = str => {\n  let countWhiteOrBracket = 0;\n  let countQuotation = 0;\n  let countApostrophe = 0;\n  for (let i = 0; i < str.length; i++) {\n    const cc = str.charCodeAt(i);\n    switch (cc) {\n      case 9: // tab\n      case 10: // nl\n      case 32: // space\n      case 40: // (\n      case 41:\n        // )\n        countWhiteOrBracket++;\n        break;\n      case 34:\n        countQuotation++;\n        break;\n      case 39:\n        countApostrophe++;\n        break;\n    }\n  }\n  if (countWhiteOrBracket < 2) {\n    return str.replace(/[\\n\\t ()'\"\\\\]/g, m => `\\\\${m}`);\n  } else if (countQuotation <= countApostrophe) {\n    return `\"${str.replace(/[\\n\"\\\\]/g, m => `\\\\${m}`)}\"`;\n  } else {\n    return `'${str.replace(/[\\n'\\\\]/g, m => `\\\\${m}`)}'`;\n  }\n};\nCssUrlDependency.Template = class CssUrlDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, _ref) {\n    let {\n      moduleGraph,\n      runtimeTemplate,\n      codeGenerationResults\n    } = _ref;\n    const dep = /** @type {CssUrlDependency} */dependency;\n\n    /** @type {string | undefined} */\n    let newValue;\n    switch (dep.urlType) {\n      case \"string\":\n        newValue = cssEscapeString(runtimeTemplate.assetUrl({\n          publicPath: \"\",\n          module: moduleGraph.getModule(dep),\n          codeGenerationResults\n        }));\n        break;\n      case \"url\":\n        newValue = `url(${cssEscapeString(runtimeTemplate.assetUrl({\n          publicPath: \"\",\n          module: moduleGraph.getModule(dep),\n          codeGenerationResults\n        }))})`;\n        break;\n    }\n    source.replace(dep.range[0], dep.range[1] - 1, /** @type {string} */newValue);\n  }\n};\nmakeSerializable(CssUrlDependency, \"webpack/lib/dependencies/CssUrlDependency\");\nmodule.exports = CssUrlDependency;","map":{"version":3,"names":["makeSerializable","require","memoize","ModuleDependency","getRawDataUrlModule","CssUrlDependency","constructor","request","range","urlType","type","category","createIgnoredModule","context","RawDataUrlModule","serialize","write","deserialize","read","cssEscapeString","str","countWhiteOrBracket","countQuotation","countApostrophe","i","length","cc","charCodeAt","replace","m","Template","CssUrlDependencyTemplate","apply","dependency","source","_ref","moduleGraph","runtimeTemplate","codeGenerationResults","dep","newValue","assetUrl","publicPath","module","getModule","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/dependencies/CssUrlDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst memoize = require(\"../util/memoize\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\n\nclass CssUrlDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request request\n\t * @param {Range} range range of the argument\n\t * @param {\"string\" | \"url\"} urlType dependency type e.g. url() or string\n\t */\n\tconstructor(request, range, urlType) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t\tthis.urlType = urlType;\n\t}\n\n\tget type() {\n\t\treturn \"css url()\";\n\t}\n\n\tget category() {\n\t\treturn \"url\";\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @returns {Module} a module\n\t */\n\tcreateIgnoredModule(context) {\n\t\tconst RawDataUrlModule = getRawDataUrlModule();\n\t\treturn new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.urlType);\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.urlType = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\n/**\n * @param {string} str string\n * @returns {string} string in quotes if needed\n */\nconst cssEscapeString = str => {\n\tlet countWhiteOrBracket = 0;\n\tlet countQuotation = 0;\n\tlet countApostrophe = 0;\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst cc = str.charCodeAt(i);\n\t\tswitch (cc) {\n\t\t\tcase 9: // tab\n\t\t\tcase 10: // nl\n\t\t\tcase 32: // space\n\t\t\tcase 40: // (\n\t\t\tcase 41: // )\n\t\t\t\tcountWhiteOrBracket++;\n\t\t\t\tbreak;\n\t\t\tcase 34:\n\t\t\t\tcountQuotation++;\n\t\t\t\tbreak;\n\t\t\tcase 39:\n\t\t\t\tcountApostrophe++;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif (countWhiteOrBracket < 2) {\n\t\treturn str.replace(/[\\n\\t ()'\"\\\\]/g, m => `\\\\${m}`);\n\t} else if (countQuotation <= countApostrophe) {\n\t\treturn `\"${str.replace(/[\\n\"\\\\]/g, m => `\\\\${m}`)}\"`;\n\t} else {\n\t\treturn `'${str.replace(/[\\n'\\\\]/g, m => `\\\\${m}`)}'`;\n\t}\n};\n\nCssUrlDependency.Template = class CssUrlDependencyTemplate extends (\n\tModuleDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{ moduleGraph, runtimeTemplate, codeGenerationResults }\n\t) {\n\t\tconst dep = /** @type {CssUrlDependency} */ (dependency);\n\n\t\t/** @type {string | undefined} */\n\t\tlet newValue;\n\n\t\tswitch (dep.urlType) {\n\t\t\tcase \"string\":\n\t\t\t\tnewValue = cssEscapeString(\n\t\t\t\t\truntimeTemplate.assetUrl({\n\t\t\t\t\t\tpublicPath: \"\",\n\t\t\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"url\":\n\t\t\t\tnewValue = `url(${cssEscapeString(\n\t\t\t\t\truntimeTemplate.assetUrl({\n\t\t\t\t\t\tpublicPath: \"\",\n\t\t\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t})\n\t\t\t\t)})`;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tsource.replace(\n\t\t\tdep.range[0],\n\t\t\tdep.range[1] - 1,\n\t\t\t/** @type {string} */ (newValue)\n\t\t);\n\t}\n};\n\nmakeSerializable(CssUrlDependency, \"webpack/lib/dependencies/CssUrlDependency\");\n\nmodule.exports = CssUrlDependency;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}