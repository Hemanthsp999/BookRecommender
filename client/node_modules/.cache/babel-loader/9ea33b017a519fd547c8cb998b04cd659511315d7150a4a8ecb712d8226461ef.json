{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\")} Compilation */\n/** @typedef {import(\"./ConcatenationScope\")} ConcatenationScope */\n/** @typedef {import(\"./DependencyTemplate\")} DependencyTemplate */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./util/Hash\")} Hash */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} GenerateContext\n * @property {DependencyTemplates} dependencyTemplates mapping from dependencies to templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {Set<string>} runtimeRequirements the requirements for runtime\n * @property {RuntimeSpec} runtime the runtime\n * @property {ConcatenationScope=} concatenationScope when in concatenated module, information about other concatenated modules\n * @property {CodeGenerationResults=} codeGenerationResults code generation results of other modules (need to have a codeGenerationDependency to use that)\n * @property {string} type which kind of code should be generated\n * @property {function(): Map<string, any>=} getData get access to the code generation data\n */\n\n/**\n * @typedef {Object} UpdateHashContext\n * @property {NormalModule} module the module\n * @property {ChunkGraph} chunkGraph\n * @property {RuntimeSpec} runtime\n * @property {RuntimeTemplate=} runtimeTemplate\n */\n\n/**\n *\n */\nclass Generator {\n  static byType(map) {\n    return new ByTypeGenerator(map);\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @abstract\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @abstract\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @abstract\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, _ref) {\n    let {\n      dependencyTemplates,\n      runtimeTemplate,\n      moduleGraph,\n      type\n    } = _ref;\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n\n  /**\n   * @param {NormalModule} module module for which the bailout reason should be determined\n   * @param {ConcatenationBailoutReasonContext} context context\n   * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n   */\n  getConcatenationBailoutReason(module, context) {\n    return `Module Concatenation is not implemented for ${this.constructor.name}`;\n  }\n\n  /**\n   * @param {Hash} hash hash that will be modified\n   * @param {UpdateHashContext} updateHashContext context for updating hash\n   */\n  updateHash(hash, _ref2) {\n    let {\n      module,\n      runtime\n    } = _ref2;\n  } // no nothing\n}\n\nclass ByTypeGenerator extends Generator {\n  constructor(map) {\n    super();\n    this.map = map;\n    this._types = new Set(Object.keys(map));\n  }\n\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    return this._types;\n  }\n\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    const t = type || \"javascript\";\n    const generator = this.map[t];\n    return generator ? generator.getSize(module, t) : 0;\n  }\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, generateContext) {\n    const type = generateContext.type;\n    const generator = this.map[type];\n    if (!generator) {\n      throw new Error(`Generator.byType: no generator specified for ${type}`);\n    }\n    return generator.generate(module, generateContext);\n  }\n}\nmodule.exports = Generator;","map":{"version":3,"names":["Generator","byType","map","ByTypeGenerator","getTypes","module","AbstractMethodError","require","getSize","type","generate","_ref","dependencyTemplates","runtimeTemplate","moduleGraph","getConcatenationBailoutReason","context","constructor","name","updateHash","hash","_ref2","runtime","_types","Set","Object","keys","t","generator","generateContext","Error","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/Generator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\")} Compilation */\n/** @typedef {import(\"./ConcatenationScope\")} ConcatenationScope */\n/** @typedef {import(\"./DependencyTemplate\")} DependencyTemplate */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./util/Hash\")} Hash */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} GenerateContext\n * @property {DependencyTemplates} dependencyTemplates mapping from dependencies to templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {Set<string>} runtimeRequirements the requirements for runtime\n * @property {RuntimeSpec} runtime the runtime\n * @property {ConcatenationScope=} concatenationScope when in concatenated module, information about other concatenated modules\n * @property {CodeGenerationResults=} codeGenerationResults code generation results of other modules (need to have a codeGenerationDependency to use that)\n * @property {string} type which kind of code should be generated\n * @property {function(): Map<string, any>=} getData get access to the code generation data\n */\n\n/**\n * @typedef {Object} UpdateHashContext\n * @property {NormalModule} module the module\n * @property {ChunkGraph} chunkGraph\n * @property {RuntimeSpec} runtime\n * @property {RuntimeTemplate=} runtimeTemplate\n */\n\n/**\n *\n */\nclass Generator {\n\tstatic byType(map) {\n\t\treturn new ByTypeGenerator(map);\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(\n\t\tmodule,\n\t\t{ dependencyTemplates, runtimeTemplate, moduleGraph, type }\n\t) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the bailout reason should be determined\n\t * @param {ConcatenationBailoutReasonContext} context context\n\t * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n\t */\n\tgetConcatenationBailoutReason(module, context) {\n\t\treturn `Module Concatenation is not implemented for ${this.constructor.name}`;\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module, runtime }) {\n\t\t// no nothing\n\t}\n}\n\nclass ByTypeGenerator extends Generator {\n\tconstructor(map) {\n\t\tsuper();\n\t\tthis.map = map;\n\t\tthis._types = new Set(Object.keys(map));\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn this._types;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst t = type || \"javascript\";\n\t\tconst generator = this.map[t];\n\t\treturn generator ? generator.getSize(module, t) : 0;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst type = generateContext.type;\n\t\tconst generator = this.map[type];\n\t\tif (!generator) {\n\t\t\tthrow new Error(`Generator.byType: no generator specified for ${type}`);\n\t\t}\n\t\treturn generator.generate(module, generateContext);\n\t}\n}\n\nmodule.exports = Generator;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACf,OAAOC,MAAMA,CAACC,GAAG,EAAE;IAClB,OAAO,IAAIC,eAAe,CAACD,GAAG,CAAC;EAChC;;EAEA;EACA;AACD;AACA;AACA;AACA;EACCE,QAAQA,CAACC,MAAM,EAAE;IAChB,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;IAC5D,MAAM,IAAID,mBAAmB,CAAC,CAAC;EAChC;;EAEA;EACA;AACD;AACA;AACA;AACA;AACA;EACCE,OAAOA,CAACH,MAAM,EAAEI,IAAI,EAAE;IACrB,MAAMH,mBAAmB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;IAC5D,MAAM,IAAID,mBAAmB,CAAC,CAAC;EAChC;;EAEA;EACA;AACD;AACA;AACA;AACA;AACA;EACCI,QAAQA,CACPL,MAAM,EAAAM,IAAA,EAEL;IAAA,IADD;MAAEC,mBAAmB;MAAEC,eAAe;MAAEC,WAAW;MAAEL;IAAK,CAAC,GAAAE,IAAA;IAE3D,MAAML,mBAAmB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;IAC5D,MAAM,IAAID,mBAAmB,CAAC,CAAC;EAChC;;EAEA;AACD;AACA;AACA;AACA;EACCS,6BAA6BA,CAACV,MAAM,EAAEW,OAAO,EAAE;IAC9C,OAAQ,+CAA8C,IAAI,CAACC,WAAW,CAACC,IAAK,EAAC;EAC9E;;EAEA;AACD;AACA;AACA;EACCC,UAAUA,CAACC,IAAI,EAAAC,KAAA,EAAuB;IAAA,IAArB;MAAEhB,MAAM;MAAEiB;IAAQ,CAAC,GAAAD,KAAA;EAEpC,CAAC,CADA;AAEF;;AAEA,MAAMlB,eAAe,SAASH,SAAS,CAAC;EACvCiB,WAAWA,CAACf,GAAG,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,IAAI,CAACqB,MAAM,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACxB,GAAG,CAAC,CAAC;EACxC;;EAEA;AACD;AACA;AACA;EACCE,QAAQA,CAACC,MAAM,EAAE;IAChB,OAAO,IAAI,CAACkB,MAAM;EACnB;;EAEA;AACD;AACA;AACA;AACA;EACCf,OAAOA,CAACH,MAAM,EAAEI,IAAI,EAAE;IACrB,MAAMkB,CAAC,GAAGlB,IAAI,IAAI,YAAY;IAC9B,MAAMmB,SAAS,GAAG,IAAI,CAAC1B,GAAG,CAACyB,CAAC,CAAC;IAC7B,OAAOC,SAAS,GAAGA,SAAS,CAACpB,OAAO,CAACH,MAAM,EAAEsB,CAAC,CAAC,GAAG,CAAC;EACpD;;EAEA;AACD;AACA;AACA;AACA;EACCjB,QAAQA,CAACL,MAAM,EAAEwB,eAAe,EAAE;IACjC,MAAMpB,IAAI,GAAGoB,eAAe,CAACpB,IAAI;IACjC,MAAMmB,SAAS,GAAG,IAAI,CAAC1B,GAAG,CAACO,IAAI,CAAC;IAChC,IAAI,CAACmB,SAAS,EAAE;MACf,MAAM,IAAIE,KAAK,CAAE,gDAA+CrB,IAAK,EAAC,CAAC;IACxE;IACA,OAAOmB,SAAS,CAAClB,QAAQ,CAACL,MAAM,EAAEwB,eAAe,CAAC;EACnD;AACD;AAEAxB,MAAM,CAAC0B,OAAO,GAAG/B,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}