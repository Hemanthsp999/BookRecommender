{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ChunkPrefetchPreloadPlugin {\n  /**\n   * @param {Compiler} compiler the compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ChunkPrefetchPreloadPlugin\", compilation => {\n      compilation.hooks.additionalChunkRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set, _ref) => {\n        let {\n          chunkGraph\n        } = _ref;\n        if (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n        const startupChildChunks = chunk.getChildrenOfTypeInOrder(chunkGraph, \"prefetchOrder\");\n        if (startupChildChunks) {\n          set.add(RuntimeGlobals.prefetchChunk);\n          set.add(RuntimeGlobals.onChunksLoaded);\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchStartupRuntimeModule(startupChildChunks));\n        }\n      });\n      compilation.hooks.additionalTreeRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set, _ref2) => {\n        let {\n          chunkGraph\n        } = _ref2;\n        const chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n        if (chunkMap.prefetch) {\n          set.add(RuntimeGlobals.prefetchChunk);\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch));\n        }\n        if (chunkMap.preload) {\n          set.add(RuntimeGlobals.preloadChunk);\n          compilation.addRuntimeModule(chunk, new ChunkPreloadTriggerRuntimeModule(chunkMap.preload));\n        }\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.prefetchChunk).tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"prefetch\", RuntimeGlobals.prefetchChunk, RuntimeGlobals.prefetchChunkHandlers));\n        set.add(RuntimeGlobals.prefetchChunkHandlers);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.preloadChunk).tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"preload\", RuntimeGlobals.preloadChunk, RuntimeGlobals.preloadChunkHandlers));\n        set.add(RuntimeGlobals.preloadChunkHandlers);\n      });\n    });\n  }\n}\nmodule.exports = ChunkPrefetchPreloadPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","ChunkPrefetchFunctionRuntimeModule","ChunkPrefetchStartupRuntimeModule","ChunkPrefetchTriggerRuntimeModule","ChunkPreloadTriggerRuntimeModule","ChunkPrefetchPreloadPlugin","apply","compiler","hooks","compilation","tap","additionalChunkRuntimeRequirements","chunk","set","_ref","chunkGraph","getNumberOfEntryModules","startupChildChunks","getChildrenOfTypeInOrder","add","prefetchChunk","onChunksLoaded","addRuntimeModule","additionalTreeRuntimeRequirements","_ref2","chunkMap","getChildIdsByOrdersMap","prefetch","preload","preloadChunk","runtimeRequirementInTree","for","prefetchChunkHandlers","preloadChunkHandlers","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/prefetch/ChunkPrefetchPreloadPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ChunkPrefetchPreloadPlugin {\n\t/**\n\t * @param {Compiler} compiler the compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tif (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n\t\t\t\t\t\tconst startupChildChunks = chunk.getChildrenOfTypeInOrder(\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\"prefetchOrder\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (startupChildChunks) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.onChunksLoaded);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchStartupRuntimeModule(startupChildChunks)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tconst chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n\n\t\t\t\t\t\tif (chunkMap.prefetch) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (chunkMap.preload) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPreloadTriggerRuntimeModule(chunkMap.preload)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.prefetchChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"prefetch\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunkHandlers);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.preloadChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"preload\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunkHandlers);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ChunkPrefetchPreloadPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}