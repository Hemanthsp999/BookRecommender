{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst makeSerializable = require(\"../util/makeSerializable\");\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\nclass FallbackDependency extends Dependency {\n  constructor(requests) {\n    super();\n    this.requests = requests;\n  }\n\n  /**\n   * @returns {string | null} an identifier to merge equal requests\n   */\n  getResourceIdentifier() {\n    return `fallback ${this.requests.join(\" \")}`;\n  }\n  get type() {\n    return \"fallback\";\n  }\n  get category() {\n    return \"esm\";\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.requests);\n    super.serialize(context);\n  }\n  static deserialize(context) {\n    const {\n      read\n    } = context;\n    const obj = new FallbackDependency(read());\n    obj.deserialize(context);\n    return obj;\n  }\n}\nmakeSerializable(FallbackDependency, \"webpack/lib/container/FallbackDependency\");\nmodule.exports = FallbackDependency;","map":{"version":3,"names":["Dependency","require","makeSerializable","FallbackDependency","constructor","requests","getResourceIdentifier","join","type","category","serialize","context","write","deserialize","read","obj","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/container/FallbackDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst makeSerializable = require(\"../util/makeSerializable\");\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\nclass FallbackDependency extends Dependency {\n\tconstructor(requests) {\n\t\tsuper();\n\t\tthis.requests = requests;\n\t}\n\n\t/**\n\t * @returns {string | null} an identifier to merge equal requests\n\t */\n\tgetResourceIdentifier() {\n\t\treturn `fallback ${this.requests.join(\" \")}`;\n\t}\n\n\tget type() {\n\t\treturn \"fallback\";\n\t}\n\n\tget category() {\n\t\treturn \"esm\";\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.requests);\n\t\tsuper.serialize(context);\n\t}\n\n\tstatic deserialize(context) {\n\t\tconst { read } = context;\n\t\tconst obj = new FallbackDependency(read());\n\t\tobj.deserialize(context);\n\t\treturn obj;\n\t}\n}\n\nmakeSerializable(\n\tFallbackDependency,\n\t\"webpack/lib/container/FallbackDependency\"\n);\n\nmodule.exports = FallbackDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;;AAE5D;AACA;;AAEA,MAAME,kBAAkB,SAASH,UAAU,CAAC;EAC3CI,WAAWA,CAACC,QAAQ,EAAE;IACrB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EACzB;;EAEA;AACD;AACA;EACCC,qBAAqBA,CAAA,EAAG;IACvB,OAAQ,YAAW,IAAI,CAACD,QAAQ,CAACE,IAAI,CAAC,GAAG,CAAE,EAAC;EAC7C;EAEA,IAAIC,IAAIA,CAAA,EAAG;IACV,OAAO,UAAU;EAClB;EAEA,IAAIC,QAAQA,CAAA,EAAG;IACd,OAAO,KAAK;EACb;;EAEA;AACD;AACA;EACCC,SAASA,CAACC,OAAO,EAAE;IAClB,MAAM;MAAEC;IAAM,CAAC,GAAGD,OAAO;IACzBC,KAAK,CAAC,IAAI,CAACP,QAAQ,CAAC;IACpB,KAAK,CAACK,SAAS,CAACC,OAAO,CAAC;EACzB;EAEA,OAAOE,WAAWA,CAACF,OAAO,EAAE;IAC3B,MAAM;MAAEG;IAAK,CAAC,GAAGH,OAAO;IACxB,MAAMI,GAAG,GAAG,IAAIZ,kBAAkB,CAACW,IAAI,CAAC,CAAC,CAAC;IAC1CC,GAAG,CAACF,WAAW,CAACF,OAAO,CAAC;IACxB,OAAOI,GAAG;EACX;AACD;AAEAb,gBAAgB,CACfC,kBAAkB,EAClB,0CACD,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAGd,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}