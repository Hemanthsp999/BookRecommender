{"ast":null,"code":"\"use strict\";\n\nconst {\n  isIP\n} = require(\"net\");\nconst {\n  networkInterfaces\n} = require(\"os\");\nconst execa = require(\"execa\");\nconst args = {\n  v4: [\"-4\", \"r\"],\n  v6: [\"-6\", \"r\"]\n};\nconst parse = (stdout, family) => {\n  let result;\n  (stdout || \"\").trim().split(\"\\n\").some(line => {\n    const results = /default( via .+?)?( dev .+?)( |$)/.exec(line) || [];\n    const gateway = (results[1] || \"\").substring(5);\n    const iface = (results[2] || \"\").substring(5);\n    if (gateway && isIP(gateway)) {\n      // default via 1.2.3.4 dev en0\n      result = {\n        gateway,\n        interface: iface ? iface : null\n      };\n      return true;\n    } else if (iface && !gateway) {\n      // default via dev en0\n      const interfaces = networkInterfaces();\n      const addresses = interfaces[iface];\n      if (!addresses || !addresses.length) return;\n      addresses.some(addr => {\n        if (addr.family.substring(2) === family && isIP(addr.address)) {\n          result = {\n            gateway: addr.address,\n            interface: iface ? iface : null\n          };\n          return true;\n        }\n      });\n    }\n  });\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n  return result;\n};\nconst promise = async family => {\n  const {\n    stdout\n  } = await execa(\"ip\", args[family]);\n  return parse(stdout, family);\n};\nconst sync = family => {\n  const {\n    stdout\n  } = execa.sync(\"ip\", args[family]);\n  return parse(stdout, family);\n};\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");","map":{"version":3,"names":["isIP","require","networkInterfaces","execa","args","v4","v6","parse","stdout","family","result","trim","split","some","line","results","exec","gateway","substring","iface","interface","interfaces","addresses","length","addr","address","Error","promise","sync","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/default-gateway/linux.js"],"sourcesContent":["\"use strict\";\n\nconst {isIP} = require(\"net\");\nconst {networkInterfaces} = require(\"os\");\nconst execa = require(\"execa\");\n\nconst args = {\n  v4: [\"-4\", \"r\"],\n  v6: [\"-6\", \"r\"],\n};\n\nconst parse = (stdout, family) => {\n  let result;\n\n  (stdout || \"\").trim().split(\"\\n\").some(line => {\n    const results = /default( via .+?)?( dev .+?)( |$)/.exec(line) || [];\n    const gateway = (results[1] || \"\").substring(5);\n    const iface = (results[2] || \"\").substring(5);\n    if (gateway && isIP(gateway)) { // default via 1.2.3.4 dev en0\n      result = {gateway, interface: (iface ? iface : null)};\n      return true;\n    } else if (iface && !gateway) { // default via dev en0\n      const interfaces = networkInterfaces();\n      const addresses = interfaces[iface];\n      if (!addresses || !addresses.length) return;\n\n      addresses.some(addr => {\n        if (addr.family.substring(2) === family && isIP(addr.address)) {\n          result = {gateway: addr.address, interface: (iface ? iface : null)};\n          return true;\n        }\n      });\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst promise = async family => {\n  const {stdout} = await execa(\"ip\", args[family]);\n  return parse(stdout, family);\n};\n\nconst sync = family => {\n  const {stdout} = execa.sync(\"ip\", args[family]);\n  return parse(stdout, family);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}