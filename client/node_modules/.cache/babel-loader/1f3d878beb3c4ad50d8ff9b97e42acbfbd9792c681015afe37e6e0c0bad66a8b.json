{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"webassembly\"]);\nclass AsyncWebAssemblyGenerator extends Generator {\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    return TYPES;\n  }\n\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return 0;\n    }\n    return originalSource.size();\n  }\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, generateContext) {\n    return module.originalSource();\n  }\n}\nmodule.exports = AsyncWebAssemblyGenerator;","map":{"version":3,"names":["Generator","require","TYPES","Set","AsyncWebAssemblyGenerator","constructor","options","getTypes","module","getSize","type","originalSource","size","generate","generateContext","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"webassembly\"]);\n\nclass AsyncWebAssemblyGenerator extends Generator {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn originalSource.size();\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\treturn module.originalSource();\n\t}\n}\n\nmodule.exports = AsyncWebAssemblyGenerator;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAEzC;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC;AAEtC,MAAMC,yBAAyB,SAASJ,SAAS,CAAC;EACjDK,WAAWA,CAACC,OAAO,EAAE;IACpB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;EACvB;;EAEA;AACD;AACA;AACA;EACCC,QAAQA,CAACC,MAAM,EAAE;IAChB,OAAON,KAAK;EACb;;EAEA;AACD;AACA;AACA;AACA;EACCO,OAAOA,CAACD,MAAM,EAAEE,IAAI,EAAE;IACrB,MAAMC,cAAc,GAAGH,MAAM,CAACG,cAAc,CAAC,CAAC;IAC9C,IAAI,CAACA,cAAc,EAAE;MACpB,OAAO,CAAC;IACT;IACA,OAAOA,cAAc,CAACC,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,QAAQA,CAACL,MAAM,EAAEM,eAAe,EAAE;IACjC,OAAON,MAAM,CAACG,cAAc,CAAC,CAAC;EAC/B;AACD;AAEAH,MAAM,CAACO,OAAO,GAAGX,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}