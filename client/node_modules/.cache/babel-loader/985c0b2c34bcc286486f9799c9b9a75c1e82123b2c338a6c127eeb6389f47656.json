{"ast":null,"code":"\"use strict\";\n\nconst {\n  isIP\n} = require(\"net\");\nconst {\n  networkInterfaces\n} = require(\"os\");\nconst execa = require(\"execa\");\nconst gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,GatewayCostMetric,IPConnectionMetric,Index /format:table\".split(\" \");\nconst ifArgs = index => `path Win32_NetworkAdapter where Index=${index} get NetConnectionID,MACAddress /format:table`.split(\" \");\nconst spawnOpts = {\n  windowsHide: true\n};\n\n// Parsing tables like this. The final metric is GatewayCostMetric + IPConnectionMetric\n//\n// DefaultIPGateway             GatewayCostMetric  Index  IPConnectionMetric\n// {\"1.2.3.4\", \"2001:db8::1\"}   {0, 256}           12     25\n// {\"2.3.4.5\"}                  {25}               12     55\nfunction parseGwTable(gwTable, family) {\n  let [bestGw, bestMetric, bestId] = [null, null, null];\n  for (let line of (gwTable || \"\").trim().split(/\\r?\\n/).splice(1)) {\n    line = line.trim();\n    const [_, gwArr, gwCostsArr, id, ipMetric] = /({.+?}) +?({.+?}) +?([0-9]+) +?([0-9]+)/g.exec(line) || [];\n    if (!gwArr) continue;\n    const gateways = (gwArr.match(/\"(.+?)\"/g) || []).map(match => match.substring(1, match.length - 1));\n    const gatewayCosts = gwCostsArr.match(/[0-9]+/g) || [];\n    for (const [index, gateway] of Object.entries(gateways)) {\n      if (!gateway || `v${isIP(gateway)}` !== family) continue;\n      const metric = parseInt(gatewayCosts[index]) + parseInt(ipMetric);\n      if (!bestGw || metric < bestMetric) {\n        [bestGw, bestMetric, bestId] = [gateway, metric, id];\n      }\n    }\n  }\n  if (bestGw) return [bestGw, bestId];\n}\nfunction parseIfTable(ifTable) {\n  const line = (ifTable || \"\").trim().split(\"\\n\")[1];\n  let [mac, name] = line.trim().split(/\\s+/);\n  mac = mac.toLowerCase();\n\n  // try to get the interface name by matching the mac to os.networkInterfaces to avoid wmic's encoding issues\n  // https://github.com/silverwind/default-gateway/issues/14\n  for (const [osname, addrs] of Object.entries(networkInterfaces())) {\n    for (const addr of addrs) {\n      if (addr && addr.mac && addr.mac.toLowerCase() === mac) {\n        return osname;\n      }\n    }\n  }\n  return name;\n}\nconst promise = async family => {\n  const {\n    stdout\n  } = await execa(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n  let name;\n  if (id) {\n    const {\n      stdout\n    } = await execa(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n  return {\n    gateway,\n    interface: name ? name : null\n  };\n};\nconst sync = family => {\n  const {\n    stdout\n  } = execa.sync(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n  let name;\n  if (id) {\n    const {\n      stdout\n    } = execa.sync(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n  return {\n    gateway,\n    interface: name ? name : null\n  };\n};\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");","map":{"version":3,"names":["isIP","require","networkInterfaces","execa","gwArgs","split","ifArgs","index","spawnOpts","windowsHide","parseGwTable","gwTable","family","bestGw","bestMetric","bestId","line","trim","splice","_","gwArr","gwCostsArr","id","ipMetric","exec","gateways","match","map","substring","length","gatewayCosts","gateway","Object","entries","metric","parseInt","parseIfTable","ifTable","mac","name","toLowerCase","osname","addrs","addr","promise","stdout","Error","interface","sync","module","exports","v4","v6"],"sources":["/home/hemanth/react-project/client/node_modules/default-gateway/win32.js"],"sourcesContent":["\"use strict\";\n\nconst {isIP} = require(\"net\");\nconst {networkInterfaces} = require(\"os\");\nconst execa = require(\"execa\");\n\nconst gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,GatewayCostMetric,IPConnectionMetric,Index /format:table\".split(\" \");\nconst ifArgs = index => `path Win32_NetworkAdapter where Index=${index} get NetConnectionID,MACAddress /format:table`.split(\" \");\n\nconst spawnOpts = {\n  windowsHide: true,\n};\n\n// Parsing tables like this. The final metric is GatewayCostMetric + IPConnectionMetric\n//\n// DefaultIPGateway             GatewayCostMetric  Index  IPConnectionMetric\n// {\"1.2.3.4\", \"2001:db8::1\"}   {0, 256}           12     25\n// {\"2.3.4.5\"}                  {25}               12     55\nfunction parseGwTable(gwTable, family) {\n  let [bestGw, bestMetric, bestId] = [null, null, null];\n\n  for (let line of (gwTable || \"\").trim().split(/\\r?\\n/).splice(1)) {\n    line = line.trim();\n    const [_, gwArr, gwCostsArr, id, ipMetric] = /({.+?}) +?({.+?}) +?([0-9]+) +?([0-9]+)/g.exec(line) || [];\n    if (!gwArr) continue;\n\n    const gateways = (gwArr.match(/\"(.+?)\"/g) || []).map(match => match.substring(1, match.length - 1));\n    const gatewayCosts = (gwCostsArr.match(/[0-9]+/g) || []);\n\n    for (const [index, gateway] of Object.entries(gateways)) {\n      if (!gateway || `v${isIP(gateway)}` !== family) continue;\n\n      const metric = parseInt(gatewayCosts[index]) + parseInt(ipMetric);\n      if (!bestGw || metric < bestMetric) {\n        [bestGw, bestMetric, bestId] = [gateway, metric, id];\n      }\n    }\n  }\n\n  if (bestGw) return [bestGw, bestId];\n}\n\nfunction parseIfTable(ifTable) {\n  const line = (ifTable || \"\").trim().split(\"\\n\")[1];\n\n  let [mac, name] = line.trim().split(/\\s+/);\n  mac = mac.toLowerCase();\n\n  // try to get the interface name by matching the mac to os.networkInterfaces to avoid wmic's encoding issues\n  // https://github.com/silverwind/default-gateway/issues/14\n  for (const [osname, addrs] of Object.entries(networkInterfaces())) {\n    for (const addr of addrs) {\n      if (addr && addr.mac && addr.mac.toLowerCase() === mac) {\n        return osname;\n      }\n    }\n  }\n  return name;\n}\n\nconst promise = async family => {\n  const {stdout} = await execa(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  let name;\n  if (id) {\n    const {stdout} = await execa(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n\n  return {gateway, interface: name ? name : null};\n};\n\nconst sync = family => {\n  const {stdout} = execa.sync(\"wmic\", gwArgs, spawnOpts);\n  const [gateway, id] = parseGwTable(stdout, family) || [];\n\n  if (!gateway) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  let name;\n  if (id) {\n    const {stdout} = execa.sync(\"wmic\", ifArgs(id), spawnOpts);\n    name = parseIfTable(stdout);\n  }\n\n  return {gateway, interface: name ? name : null};\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}