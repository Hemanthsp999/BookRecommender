{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  WEBASSEMBLY_MODULE_TYPE_ASYNC\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ReadFileCompileAsyncWasmPlugin {\n  constructor() {\n    let {\n      type = \"async-node\",\n      import: useImport = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._type = type;\n    this._import = useImport;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ReadFileCompileAsyncWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === this._type;\n      };\n      const generateLoadBinaryCode = this._import ? path => Template.asString([\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\", Template.indent([`readFile(new URL(${path}, import.meta.url), (err, buffer) => {`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"}))\"]) : path => Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"try {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", `readFile(join(__dirname, ${path}), function(err, buffer){`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.instantiateWasm).tap(\"ReadFileCompileAsyncWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === WEBASSEMBLY_MODULE_TYPE_ASYNC)) {\n          return;\n        }\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new AsyncWasmLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: false\n        }));\n      });\n    });\n  }\n}\nmodule.exports = ReadFileCompileAsyncWasmPlugin;","map":{"version":3,"names":["WEBASSEMBLY_MODULE_TYPE_ASYNC","require","RuntimeGlobals","Template","AsyncWasmLoadingRuntimeModule","ReadFileCompileAsyncWasmPlugin","constructor","type","import","useImport","arguments","length","undefined","_type","_import","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","options","getEntryOptions","generateLoadBinaryCode","path","asString","indent","runtimeRequirementInTree","for","instantiateWasm","set","chunkGraph","hasModuleInGraph","m","add","publicPath","addRuntimeModule","supportsStreaming","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/node/ReadFileCompileAsyncWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { WEBASSEMBLY_MODULE_TYPE_ASYNC } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ReadFileCompileAsyncWasmPlugin {\n\tconstructor({ type = \"async-node\", import: useImport = false } = {}) {\n\t\tthis._type = type;\n\t\tthis._import = useImport;\n\t}\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ReadFileCompileAsyncWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === this._type;\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = this._import\n\t\t\t\t\t? path =>\n\t\t\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\t\t\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t`readFile(new URL(${path}, import.meta.url), (err, buffer) => {`,\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"}))\"\n\t\t\t\t\t\t\t])\n\t\t\t\t\t: path =>\n\t\t\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"try {\",\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\n\t\t\t\t\t\t\t\t\t\t\"var { join } = require('path');\",\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"})\"\n\t\t\t\t\t\t\t]);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.instantiateWasm)\n\t\t\t\t\t.tap(\"ReadFileCompileAsyncWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === WEBASSEMBLY_MODULE_TYPE_ASYNC\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AsyncWasmLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ReadFileCompileAsyncWasmPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}