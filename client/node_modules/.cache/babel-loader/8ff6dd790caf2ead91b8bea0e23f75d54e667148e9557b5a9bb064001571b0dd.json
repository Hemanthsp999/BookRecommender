{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * StringXor class provides methods for performing\n * [XOR operations](https://en.wikipedia.org/wiki/Exclusive_or) on strings. In this context\n * we operating on the character codes of two strings, which are represented as\n * [Buffer](https://nodejs.org/api/buffer.html) objects.\n *\n * We use [StringXor in webpack](https://github.com/webpack/webpack/commit/41a8e2ea483a544c4ccd3e6217bdfb80daffca39)\n * to create a hash of the current state of the compilation. By XOR'ing the Module hashes, it\n * doesn't matter if the Module hashes are sorted or not. This is useful because it allows us to avoid sorting the\n * Module hashes.\n *\n * @example\n * ```js\n * const xor = new StringXor();\n * xor.add('hello');\n * xor.add('world');\n * console.log(xor.toString());\n * ```\n *\n * @example\n * ```js\n * const xor = new StringXor();\n * xor.add('foo');\n * xor.add('bar');\n * const hash = createHash('sha256');\n * hash.update(xor.toString());\n * console.log(hash.digest('hex'));\n * ```\n */\nclass StringXor {\n  constructor() {\n    /** @type {Buffer|undefined} */\n    this._value = undefined;\n  }\n\n  /**\n   * Adds a string to the current StringXor object.\n   *\n   * @param {string} str string\n   * @returns {void}\n   */\n  add(str) {\n    const len = str.length;\n    const value = this._value;\n    if (value === undefined) {\n      /**\n       * We are choosing to use Buffer.allocUnsafe() because it is often faster than Buffer.alloc() because\n       * it allocates a new buffer of the specified size without initializing the memory.\n       */\n      const newValue = this._value = Buffer.allocUnsafe(len);\n      for (let i = 0; i < len; i++) {\n        newValue[i] = str.charCodeAt(i);\n      }\n      return;\n    }\n    const valueLen = value.length;\n    if (valueLen < len) {\n      const newValue = this._value = Buffer.allocUnsafe(len);\n      let i;\n      for (i = 0; i < valueLen; i++) {\n        newValue[i] = value[i] ^ str.charCodeAt(i);\n      }\n      for (; i < len; i++) {\n        newValue[i] = str.charCodeAt(i);\n      }\n    } else {\n      for (let i = 0; i < len; i++) {\n        value[i] = value[i] ^ str.charCodeAt(i);\n      }\n    }\n  }\n\n  /**\n   * Returns a string that represents the current state of the StringXor object. We chose to use \"latin1\" encoding\n   * here because \"latin1\" encoding is a single-byte encoding that can represent all characters in the\n   * [ISO-8859-1 character set](https://en.wikipedia.org/wiki/ISO/IEC_8859-1). This is useful when working\n   * with binary data that needs to be represented as a string.\n   *\n   * @returns {string} Returns a string that represents the current state of the StringXor object.\n   */\n  toString() {\n    const value = this._value;\n    return value === undefined ? \"\" : value.toString(\"latin1\");\n  }\n\n  /**\n   * Updates the hash with the current state of the StringXor object.\n   *\n   * @param {Hash} hash Hash instance\n   */\n  updateHash(hash) {\n    const value = this._value;\n    if (value !== undefined) hash.update(value);\n  }\n}\nmodule.exports = StringXor;","map":{"version":3,"names":["StringXor","constructor","_value","undefined","add","str","len","length","value","newValue","Buffer","allocUnsafe","i","charCodeAt","valueLen","toString","updateHash","hash","update","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/util/StringXor.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * StringXor class provides methods for performing\n * [XOR operations](https://en.wikipedia.org/wiki/Exclusive_or) on strings. In this context\n * we operating on the character codes of two strings, which are represented as\n * [Buffer](https://nodejs.org/api/buffer.html) objects.\n *\n * We use [StringXor in webpack](https://github.com/webpack/webpack/commit/41a8e2ea483a544c4ccd3e6217bdfb80daffca39)\n * to create a hash of the current state of the compilation. By XOR'ing the Module hashes, it\n * doesn't matter if the Module hashes are sorted or not. This is useful because it allows us to avoid sorting the\n * Module hashes.\n *\n * @example\n * ```js\n * const xor = new StringXor();\n * xor.add('hello');\n * xor.add('world');\n * console.log(xor.toString());\n * ```\n *\n * @example\n * ```js\n * const xor = new StringXor();\n * xor.add('foo');\n * xor.add('bar');\n * const hash = createHash('sha256');\n * hash.update(xor.toString());\n * console.log(hash.digest('hex'));\n * ```\n */\nclass StringXor {\n\tconstructor() {\n\t\t/** @type {Buffer|undefined} */\n\t\tthis._value = undefined;\n\t}\n\n\t/**\n\t * Adds a string to the current StringXor object.\n\t *\n\t * @param {string} str string\n\t * @returns {void}\n\t */\n\tadd(str) {\n\t\tconst len = str.length;\n\t\tconst value = this._value;\n\t\tif (value === undefined) {\n\t\t\t/**\n\t\t\t * We are choosing to use Buffer.allocUnsafe() because it is often faster than Buffer.alloc() because\n\t\t\t * it allocates a new buffer of the specified size without initializing the memory.\n\t\t\t */\n\t\t\tconst newValue = (this._value = Buffer.allocUnsafe(len));\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tnewValue[i] = str.charCodeAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst valueLen = value.length;\n\t\tif (valueLen < len) {\n\t\t\tconst newValue = (this._value = Buffer.allocUnsafe(len));\n\t\t\tlet i;\n\t\t\tfor (i = 0; i < valueLen; i++) {\n\t\t\t\tnewValue[i] = value[i] ^ str.charCodeAt(i);\n\t\t\t}\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tnewValue[i] = str.charCodeAt(i);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvalue[i] = value[i] ^ str.charCodeAt(i);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a string that represents the current state of the StringXor object. We chose to use \"latin1\" encoding\n\t * here because \"latin1\" encoding is a single-byte encoding that can represent all characters in the\n\t * [ISO-8859-1 character set](https://en.wikipedia.org/wiki/ISO/IEC_8859-1). This is useful when working\n\t * with binary data that needs to be represented as a string.\n\t *\n\t * @returns {string} Returns a string that represents the current state of the StringXor object.\n\t */\n\ttoString() {\n\t\tconst value = this._value;\n\t\treturn value === undefined ? \"\" : value.toString(\"latin1\");\n\t}\n\n\t/**\n\t * Updates the hash with the current state of the StringXor object.\n\t *\n\t * @param {Hash} hash Hash instance\n\t */\n\tupdateHash(hash) {\n\t\tconst value = this._value;\n\t\tif (value !== undefined) hash.update(value);\n\t}\n}\n\nmodule.exports = StringXor;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACfC,WAAWA,CAAA,EAAG;IACb;IACA,IAAI,CAACC,MAAM,GAAGC,SAAS;EACxB;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,GAAGA,CAACC,GAAG,EAAE;IACR,MAAMC,GAAG,GAAGD,GAAG,CAACE,MAAM;IACtB,MAAMC,KAAK,GAAG,IAAI,CAACN,MAAM;IACzB,IAAIM,KAAK,KAAKL,SAAS,EAAE;MACxB;AACH;AACA;AACA;MACG,MAAMM,QAAQ,GAAI,IAAI,CAACP,MAAM,GAAGQ,MAAM,CAACC,WAAW,CAACL,GAAG,CAAE;MACxD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,EAAEM,CAAC,EAAE,EAAE;QAC7BH,QAAQ,CAACG,CAAC,CAAC,GAAGP,GAAG,CAACQ,UAAU,CAACD,CAAC,CAAC;MAChC;MACA;IACD;IACA,MAAME,QAAQ,GAAGN,KAAK,CAACD,MAAM;IAC7B,IAAIO,QAAQ,GAAGR,GAAG,EAAE;MACnB,MAAMG,QAAQ,GAAI,IAAI,CAACP,MAAM,GAAGQ,MAAM,CAACC,WAAW,CAACL,GAAG,CAAE;MACxD,IAAIM,CAAC;MACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,QAAQ,EAAEF,CAAC,EAAE,EAAE;QAC9BH,QAAQ,CAACG,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,CAAC,GAAGP,GAAG,CAACQ,UAAU,CAACD,CAAC,CAAC;MAC3C;MACA,OAAOA,CAAC,GAAGN,GAAG,EAAEM,CAAC,EAAE,EAAE;QACpBH,QAAQ,CAACG,CAAC,CAAC,GAAGP,GAAG,CAACQ,UAAU,CAACD,CAAC,CAAC;MAChC;IACD,CAAC,MAAM;MACN,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,EAAEM,CAAC,EAAE,EAAE;QAC7BJ,KAAK,CAACI,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,CAAC,GAAGP,GAAG,CAACQ,UAAU,CAACD,CAAC,CAAC;MACxC;IACD;EACD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCG,QAAQA,CAAA,EAAG;IACV,MAAMP,KAAK,GAAG,IAAI,CAACN,MAAM;IACzB,OAAOM,KAAK,KAAKL,SAAS,GAAG,EAAE,GAAGK,KAAK,CAACO,QAAQ,CAAC,QAAQ,CAAC;EAC3D;;EAEA;AACD;AACA;AACA;AACA;EACCC,UAAUA,CAACC,IAAI,EAAE;IAChB,MAAMT,KAAK,GAAG,IAAI,CAACN,MAAM;IACzB,IAAIM,KAAK,KAAKL,SAAS,EAAEc,IAAI,CAACC,MAAM,CAACV,KAAK,CAAC;EAC5C;AACD;AAEAW,MAAM,CAACC,OAAO,GAAGpB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}