{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<LibraryType>>} */\nconst enabledTypes = new WeakMap();\nconst getEnabledTypes = compiler => {\n  let set = enabledTypes.get(compiler);\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n  return set;\n};\nclass EnableLibraryPlugin {\n  /**\n   * @param {LibraryType} type library type that should be available\n   */\n  constructor(type) {\n    this.type = type;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {LibraryType} type type of library\n   * @returns {void}\n   */\n  static setEnabled(compiler, type) {\n    getEnabledTypes(compiler).add(type);\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {LibraryType} type type of library\n   * @returns {void}\n   */\n  static checkEnabled(compiler, type) {\n    if (!getEnabledTypes(compiler).has(type)) {\n      throw new Error(`Library type \"${type}\" is not enabled. ` + \"EnableLibraryPlugin need to be used to enable this type of library. \" + 'This usually happens through the \"output.enabledLibraryTypes\" option. ' + 'If you are using a function as entry which sets \"library\", you need to add all potential library types to \"output.enabledLibraryTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n    }\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const {\n      type\n    } = this;\n\n    // Only enable once\n    const enabled = getEnabledTypes(compiler);\n    if (enabled.has(type)) return;\n    enabled.add(type);\n    if (typeof type === \"string\") {\n      const enableExportProperty = () => {\n        const ExportPropertyTemplatePlugin = require(\"./ExportPropertyLibraryPlugin\");\n        new ExportPropertyTemplatePlugin({\n          type,\n          nsObjectUsed: type !== \"module\"\n        }).apply(compiler);\n      };\n      switch (type) {\n        case \"var\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [],\n              declare: \"var\",\n              unnamed: \"error\"\n            }).apply(compiler);\n            break;\n          }\n        case \"assign-properties\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [],\n              declare: false,\n              unnamed: \"error\",\n              named: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n        case \"assign\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [],\n              declare: false,\n              unnamed: \"error\"\n            }).apply(compiler);\n            break;\n          }\n        case \"this\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"this\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n        case \"window\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"window\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n        case \"self\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"self\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n        case \"global\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: \"global\",\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n        case \"commonjs\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"exports\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n        case \"commonjs-static\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"exports\"],\n              declare: false,\n              unnamed: \"static\"\n            }).apply(compiler);\n            break;\n          }\n        case \"commonjs2\":\n        case \"commonjs-module\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"module\", \"exports\"],\n              declare: false,\n              unnamed: \"assign\"\n            }).apply(compiler);\n            break;\n          }\n        case \"amd\":\n        case \"amd-require\":\n          {\n            enableExportProperty();\n            const AmdLibraryPlugin = require(\"./AmdLibraryPlugin\");\n            new AmdLibraryPlugin({\n              type,\n              requireAsWrapper: type === \"amd-require\"\n            }).apply(compiler);\n            break;\n          }\n        case \"umd\":\n        case \"umd2\":\n          {\n            enableExportProperty();\n            const UmdLibraryPlugin = require(\"./UmdLibraryPlugin\");\n            new UmdLibraryPlugin({\n              type,\n              optionalAmdExternalAsGlobal: type === \"umd2\"\n            }).apply(compiler);\n            break;\n          }\n        case \"system\":\n          {\n            enableExportProperty();\n            const SystemLibraryPlugin = require(\"./SystemLibraryPlugin\");\n            new SystemLibraryPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n        case \"jsonp\":\n          {\n            enableExportProperty();\n            const JsonpLibraryPlugin = require(\"./JsonpLibraryPlugin\");\n            new JsonpLibraryPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n        case \"module\":\n          {\n            enableExportProperty();\n            const ModuleLibraryPlugin = require(\"./ModuleLibraryPlugin\");\n            new ModuleLibraryPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n        default:\n          throw new Error(`Unsupported library type ${type}.\nPlugins which provide custom library types must call EnableLibraryPlugin.setEnabled(compiler, type) to disable this error.`);\n      }\n    } else {\n      // TODO support plugin instances here\n      // apply them to the compiler\n    }\n  }\n}\nmodule.exports = EnableLibraryPlugin;","map":{"version":3,"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableLibraryPlugin","constructor","type","setEnabled","add","checkEnabled","has","Error","Array","from","join","apply","enabled","enableExportProperty","ExportPropertyTemplatePlugin","require","nsObjectUsed","AssignLibraryPlugin","prefix","declare","unnamed","named","AmdLibraryPlugin","requireAsWrapper","UmdLibraryPlugin","optionalAmdExternalAsGlobal","SystemLibraryPlugin","JsonpLibraryPlugin","ModuleLibraryPlugin","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/library/EnableLibraryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<LibraryType>>} */\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n\tlet set = enabledTypes.get(compiler);\n\tif (set === undefined) {\n\t\tset = new Set();\n\t\tenabledTypes.set(compiler, set);\n\t}\n\treturn set;\n};\n\nclass EnableLibraryPlugin {\n\t/**\n\t * @param {LibraryType} type library type that should be available\n\t */\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {LibraryType} type type of library\n\t * @returns {void}\n\t */\n\tstatic setEnabled(compiler, type) {\n\t\tgetEnabledTypes(compiler).add(type);\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {LibraryType} type type of library\n\t * @returns {void}\n\t */\n\tstatic checkEnabled(compiler, type) {\n\t\tif (!getEnabledTypes(compiler).has(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Library type \"${type}\" is not enabled. ` +\n\t\t\t\t\t\"EnableLibraryPlugin need to be used to enable this type of library. \" +\n\t\t\t\t\t'This usually happens through the \"output.enabledLibraryTypes\" option. ' +\n\t\t\t\t\t'If you are using a function as entry which sets \"library\", you need to add all potential library types to \"output.enabledLibraryTypes\". ' +\n\t\t\t\t\t\"These types are enabled: \" +\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { type } = this;\n\n\t\t// Only enable once\n\t\tconst enabled = getEnabledTypes(compiler);\n\t\tif (enabled.has(type)) return;\n\t\tenabled.add(type);\n\n\t\tif (typeof type === \"string\") {\n\t\t\tconst enableExportProperty = () => {\n\t\t\t\tconst ExportPropertyTemplatePlugin = require(\"./ExportPropertyLibraryPlugin\");\n\t\t\t\tnew ExportPropertyTemplatePlugin({\n\t\t\t\t\ttype,\n\t\t\t\t\tnsObjectUsed: type !== \"module\"\n\t\t\t\t}).apply(compiler);\n\t\t\t};\n\t\t\tswitch (type) {\n\t\t\t\tcase \"var\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [],\n\t\t\t\t\t\tdeclare: \"var\",\n\t\t\t\t\t\tunnamed: \"error\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"assign-properties\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"error\",\n\t\t\t\t\t\tnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"assign\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"error\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"this\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"this\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"window\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"window\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"self\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"self\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"global\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: \"global\",\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"commonjs\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"exports\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"commonjs-static\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"exports\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"static\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"commonjs2\":\n\t\t\t\tcase \"commonjs-module\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"module\", \"exports\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"assign\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"amd\":\n\t\t\t\tcase \"amd-require\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst AmdLibraryPlugin = require(\"./AmdLibraryPlugin\");\n\t\t\t\t\tnew AmdLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\trequireAsWrapper: type === \"amd-require\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"umd\":\n\t\t\t\tcase \"umd2\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst UmdLibraryPlugin = require(\"./UmdLibraryPlugin\");\n\t\t\t\t\tnew UmdLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\toptionalAmdExternalAsGlobal: type === \"umd2\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"system\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst SystemLibraryPlugin = require(\"./SystemLibraryPlugin\");\n\t\t\t\t\tnew SystemLibraryPlugin({\n\t\t\t\t\t\ttype\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"jsonp\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst JsonpLibraryPlugin = require(\"./JsonpLibraryPlugin\");\n\t\t\t\t\tnew JsonpLibraryPlugin({\n\t\t\t\t\t\ttype\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"module\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst ModuleLibraryPlugin = require(\"./ModuleLibraryPlugin\");\n\t\t\t\t\tnew ModuleLibraryPlugin({\n\t\t\t\t\t\ttype\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported library type ${type}.\nPlugins which provide custom library types must call EnableLibraryPlugin.setEnabled(compiler, type) to disable this error.`);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO support plugin instances here\n\t\t\t// apply them to the compiler\n\t\t}\n\t}\n}\n\nmodule.exports = EnableLibraryPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}