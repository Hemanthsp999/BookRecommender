{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\nconst makeSerializable = require(\"./util/makeSerializable\");\n\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\nconst WASM_HEADER = Buffer.from([0x00, 0x61, 0x73, 0x6d]);\nclass ModuleParseError extends WebpackError {\n  /**\n   * @param {string | Buffer} source source code\n   * @param {Error&any} err the parse error\n   * @param {string[]} loaders the loaders used\n   * @param {string} type module type\n   */\n  constructor(source, err, loaders, type) {\n    let message = \"Module parse failed: \" + (err && err.message);\n    let loc = undefined;\n    if ((Buffer.isBuffer(source) && source.slice(0, 4).equals(WASM_HEADER) || typeof source === \"string\" && /^\\0asm/.test(source)) && !type.startsWith(\"webassembly\")) {\n      message += \"\\nThe module seem to be a WebAssembly module, but module is not flagged as WebAssembly module for webpack.\";\n      message += \"\\nBREAKING CHANGE: Since webpack 5 WebAssembly is not enabled by default and flagged as experimental feature.\";\n      message += \"\\nYou need to enable one of the WebAssembly experiments via 'experiments.asyncWebAssembly: true' (based on async modules) or 'experiments.syncWebAssembly: true' (like webpack 4, deprecated).\";\n      message += \"\\nFor files that transpile to WebAssembly, make sure to set the module type in the 'module.rules' section of the config (e. g. 'type: \\\"webassembly/async\\\"').\";\n    } else if (!loaders) {\n      message += \"\\nYou may need an appropriate loader to handle this file type.\";\n    } else if (loaders.length >= 1) {\n      message += `\\nFile was processed with these loaders:${loaders.map(loader => `\\n * ${loader}`).join(\"\")}`;\n      message += \"\\nYou may need an additional loader to handle the result of these loaders.\";\n    } else {\n      message += \"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n    }\n    if (err && err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n      var lineNumber = err.loc.line;\n      if (Buffer.isBuffer(source) || /[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)) {\n        // binary file\n        message += \"\\n(Source code omitted for this binary file)\";\n      } else {\n        const sourceLines = source.split(/\\r?\\n/);\n        const start = Math.max(0, lineNumber - 3);\n        const linesBefore = sourceLines.slice(start, lineNumber - 1);\n        const theLine = sourceLines[lineNumber - 1];\n        const linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n        message += linesBefore.map(l => `\\n| ${l}`).join(\"\") + `\\n> ${theLine}` + linesAfter.map(l => `\\n| ${l}`).join(\"\");\n      }\n      loc = {\n        start: err.loc\n      };\n    } else if (err && err.stack) {\n      message += \"\\n\" + err.stack;\n    }\n    super(message);\n    this.name = \"ModuleParseError\";\n    this.loc = loc;\n    this.error = err;\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.error);\n    super.serialize(context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.error = read();\n    super.deserialize(context);\n  }\n}\nmakeSerializable(ModuleParseError, \"webpack/lib/ModuleParseError\");\nmodule.exports = ModuleParseError;","map":{"version":3,"names":["WebpackError","require","makeSerializable","WASM_HEADER","Buffer","from","ModuleParseError","constructor","source","err","loaders","type","message","loc","undefined","isBuffer","slice","equals","test","startsWith","length","map","loader","join","line","lineNumber","sourceLines","split","start","Math","max","linesBefore","theLine","linesAfter","l","stack","name","error","serialize","context","write","deserialize","read","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/ModuleParseError.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\nconst makeSerializable = require(\"./util/makeSerializable\");\n\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\nconst WASM_HEADER = Buffer.from([0x00, 0x61, 0x73, 0x6d]);\n\nclass ModuleParseError extends WebpackError {\n\t/**\n\t * @param {string | Buffer} source source code\n\t * @param {Error&any} err the parse error\n\t * @param {string[]} loaders the loaders used\n\t * @param {string} type module type\n\t */\n\tconstructor(source, err, loaders, type) {\n\t\tlet message = \"Module parse failed: \" + (err && err.message);\n\t\tlet loc = undefined;\n\n\t\tif (\n\t\t\t((Buffer.isBuffer(source) && source.slice(0, 4).equals(WASM_HEADER)) ||\n\t\t\t\t(typeof source === \"string\" && /^\\0asm/.test(source))) &&\n\t\t\t!type.startsWith(\"webassembly\")\n\t\t) {\n\t\t\tmessage +=\n\t\t\t\t\"\\nThe module seem to be a WebAssembly module, but module is not flagged as WebAssembly module for webpack.\";\n\t\t\tmessage +=\n\t\t\t\t\"\\nBREAKING CHANGE: Since webpack 5 WebAssembly is not enabled by default and flagged as experimental feature.\";\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou need to enable one of the WebAssembly experiments via 'experiments.asyncWebAssembly: true' (based on async modules) or 'experiments.syncWebAssembly: true' (like webpack 4, deprecated).\";\n\t\t\tmessage +=\n\t\t\t\t\"\\nFor files that transpile to WebAssembly, make sure to set the module type in the 'module.rules' section of the config (e. g. 'type: \\\"webassembly/async\\\"').\";\n\t\t} else if (!loaders) {\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an appropriate loader to handle this file type.\";\n\t\t} else if (loaders.length >= 1) {\n\t\t\tmessage += `\\nFile was processed with these loaders:${loaders\n\t\t\t\t.map(loader => `\\n * ${loader}`)\n\t\t\t\t.join(\"\")}`;\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an additional loader to handle the result of these loaders.\";\n\t\t} else {\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n\t\t}\n\n\t\tif (\n\t\t\terr &&\n\t\t\terr.loc &&\n\t\t\ttypeof err.loc === \"object\" &&\n\t\t\ttypeof err.loc.line === \"number\"\n\t\t) {\n\t\t\tvar lineNumber = err.loc.line;\n\n\t\t\tif (\n\t\t\t\tBuffer.isBuffer(source) ||\n\t\t\t\t/[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)\n\t\t\t) {\n\t\t\t\t// binary file\n\t\t\t\tmessage += \"\\n(Source code omitted for this binary file)\";\n\t\t\t} else {\n\t\t\t\tconst sourceLines = source.split(/\\r?\\n/);\n\t\t\t\tconst start = Math.max(0, lineNumber - 3);\n\t\t\t\tconst linesBefore = sourceLines.slice(start, lineNumber - 1);\n\t\t\t\tconst theLine = sourceLines[lineNumber - 1];\n\t\t\t\tconst linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n\n\t\t\t\tmessage +=\n\t\t\t\t\tlinesBefore.map(l => `\\n| ${l}`).join(\"\") +\n\t\t\t\t\t`\\n> ${theLine}` +\n\t\t\t\t\tlinesAfter.map(l => `\\n| ${l}`).join(\"\");\n\t\t\t}\n\n\t\t\tloc = { start: err.loc };\n\t\t} else if (err && err.stack) {\n\t\t\tmessage += \"\\n\" + err.stack;\n\t\t}\n\n\t\tsuper(message);\n\n\t\tthis.name = \"ModuleParseError\";\n\t\tthis.loc = loc;\n\t\tthis.error = err;\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.error);\n\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.error = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(ModuleParseError, \"webpack/lib/ModuleParseError\");\n\nmodule.exports = ModuleParseError;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}