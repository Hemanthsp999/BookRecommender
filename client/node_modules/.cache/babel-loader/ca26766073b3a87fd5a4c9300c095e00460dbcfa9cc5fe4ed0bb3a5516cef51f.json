{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nmodule.exports = class ModulesInRootPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string} path path\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, path, target) {\n    this.source = source;\n    this.path = path;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ModulesInRootPlugin\", (request, resolveContext, callback) => {\n      /** @type {ResolveRequest} */\n      const obj = {\n        ...request,\n        path: this.path,\n        request: \"./\" + request.request,\n        module: false\n      };\n      resolver.doResolve(target, obj, \"looking for modules in \" + this.path, resolveContext, callback);\n    });\n  }\n};","map":{"version":3,"names":["module","exports","ModulesInRootPlugin","constructor","source","path","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","obj","doResolve"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/ModulesInRootPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ModulesInRootPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string} path path\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, path, target) {\n\t\tthis.source = source;\n\t\tthis.path = path;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ModulesInRootPlugin\", (request, resolveContext, callback) => {\n\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: this.path,\n\t\t\t\t\trequest: \"./\" + request.request,\n\t\t\t\t\tmodule: false\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"looking for modules in \" + this.path,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG,MAAMC,mBAAmB,CAAC;EAC1C;AACD;AACA;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAE;IACjC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/CE,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACN,MAAM,CAAC,CACpBO,QAAQ,CAAC,qBAAqB,EAAE,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACvE;MACA,MAAMC,GAAG,GAAG;QACX,GAAGH,OAAO;QACVP,IAAI,EAAE,IAAI,CAACA,IAAI;QACfO,OAAO,EAAE,IAAI,GAAGA,OAAO,CAACA,OAAO;QAC/BZ,MAAM,EAAE;MACT,CAAC;MACDQ,QAAQ,CAACQ,SAAS,CACjBV,MAAM,EACNS,GAAG,EACH,yBAAyB,GAAG,IAAI,CAACV,IAAI,EACrCQ,cAAc,EACdC,QACD,CAAC;IACF,CAAC,CAAC;EACJ;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}