{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./ConcatenationScope\")} ConcatenationScope */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Generator\").GenerateContext} GenerateContext */\n/** @template T @typedef {import(\"./InitFragment\")<T>} InitFragment */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/**\n * @typedef {Object} DependencyTemplateContext\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {Set<string>} runtimeRequirements the requirements for runtime\n * @property {Module} module current module\n * @property {RuntimeSpec} runtime current runtimes, for which code is generated\n * @property {InitFragment<GenerateContext>[]} initFragments mutable array of init fragments for the current module\n * @property {ConcatenationScope=} concatenationScope when in a concatenated module, information about other concatenated modules\n * @property {CodeGenerationResults} codeGenerationResults the code generation results\n */\n\n/**\n * @typedef {Object} CssDependencyTemplateContextExtras\n * @property {Map<string, string>} cssExports the css exports\n */\n\n/** @typedef {DependencyTemplateContext & CssDependencyTemplateContextExtras} CssDependencyTemplateContext */\nclass DependencyTemplate {\n  /* istanbul ignore next */\n  /**\n   * @abstract\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n}\nmodule.exports = DependencyTemplate;","map":{"version":3,"names":["DependencyTemplate","apply","dependency","source","templateContext","AbstractMethodError","require","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/DependencyTemplate.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./ConcatenationScope\")} ConcatenationScope */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Generator\").GenerateContext} GenerateContext */\n/** @template T @typedef {import(\"./InitFragment\")<T>} InitFragment */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/**\n * @typedef {Object} DependencyTemplateContext\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {Set<string>} runtimeRequirements the requirements for runtime\n * @property {Module} module current module\n * @property {RuntimeSpec} runtime current runtimes, for which code is generated\n * @property {InitFragment<GenerateContext>[]} initFragments mutable array of init fragments for the current module\n * @property {ConcatenationScope=} concatenationScope when in a concatenated module, information about other concatenated modules\n * @property {CodeGenerationResults} codeGenerationResults the code generation results\n */\n\n/**\n * @typedef {Object} CssDependencyTemplateContextExtras\n * @property {Map<string, string>} cssExports the css exports\n */\n\n/** @typedef {DependencyTemplateContext & CssDependencyTemplateContextExtras} CssDependencyTemplateContext */\n\nclass DependencyTemplate {\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n}\n\nmodule.exports = DependencyTemplate;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAEA,MAAMA,kBAAkB,CAAC;EACxB;EACA;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,KAAKA,CAACC,UAAU,EAAEC,MAAM,EAAEC,eAAe,EAAE;IAC1C,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;IAC5D,MAAM,IAAID,mBAAmB,CAAC,CAAC;EAChC;AACD;AAEAE,MAAM,CAACC,OAAO,GAAGR,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}