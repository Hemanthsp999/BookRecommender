{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst {\n  SyncBailHook\n} = require(\"tapable\");\nconst Compilation = require(\"../lib/Compilation\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst {\n  join\n} = require(\"./util/fs\");\nconst processAsyncTree = require(\"./util/processAsyncTree\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").CleanOptions} CleanOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n/** @typedef {import(\"./util/fs\").OutputFileSystem} OutputFileSystem */\n/** @typedef {import(\"./util/fs\").StatsCallback} StatsCallback */\n\n/** @typedef {(function(string):boolean)|RegExp} IgnoreItem */\n/** @typedef {Map<string, number>} Assets */\n/** @typedef {function(IgnoreItem): void} AddToIgnoreCallback */\n\n/**\n * @typedef {Object} CleanPluginCompilationHooks\n * @property {SyncBailHook<[string], boolean>} keep when returning true the file/directory will be kept during cleaning, returning false will clean it and ignore the following plugins and config\n */\n\nconst validate = createSchemaValidation(undefined, () => {\n  const {\n    definitions\n  } = require(\"../schemas/WebpackOptions.json\");\n  return {\n    definitions,\n    oneOf: [{\n      $ref: \"#/definitions/CleanOptions\"\n    }]\n  };\n}, {\n  name: \"Clean Plugin\",\n  baseDataPath: \"options\"\n});\nconst _10sec = 10 * 1000;\n\n/**\n * marge assets map 2 into map 1\n * @param {Assets} as1 assets\n * @param {Assets} as2 assets\n * @returns {void}\n */\nconst mergeAssets = (as1, as2) => {\n  for (const [key, value1] of as2) {\n    const value2 = as1.get(key);\n    if (!value2 || value1 > value2) as1.set(key, value1);\n  }\n};\n\n/**\n * @param {OutputFileSystem} fs filesystem\n * @param {string} outputPath output path\n * @param {Map<string, number>} currentAssets filename of the current assets (must not start with .. or ., must only use / as path separator)\n * @param {function((Error | null)=, Set<string>=): void} callback returns the filenames of the assets that shouldn't be there\n * @returns {void}\n */\nconst getDiffToFs = (fs, outputPath, currentAssets, callback) => {\n  const directories = new Set();\n  // get directories of assets\n  for (const [asset] of currentAssets) {\n    directories.add(asset.replace(/(^|\\/)[^/]*$/, \"\"));\n  }\n  // and all parent directories\n  for (const directory of directories) {\n    directories.add(directory.replace(/(^|\\/)[^/]*$/, \"\"));\n  }\n  const diff = new Set();\n  asyncLib.forEachLimit(directories, 10, (directory, callback) => {\n    fs.readdir(join(fs, outputPath, directory), (err, entries) => {\n      if (err) {\n        if (err.code === \"ENOENT\") return callback();\n        if (err.code === \"ENOTDIR\") {\n          diff.add(directory);\n          return callback();\n        }\n        return callback(err);\n      }\n      for (const entry of entries) {\n        const file = /** @type {string} */entry;\n        const filename = directory ? `${directory}/${file}` : file;\n        if (!directories.has(filename) && !currentAssets.has(filename)) {\n          diff.add(filename);\n        }\n      }\n      callback();\n    });\n  }, err => {\n    if (err) return callback(err);\n    callback(null, diff);\n  });\n};\n\n/**\n * @param {Assets} currentAssets assets list\n * @param {Assets} oldAssets old assets list\n * @returns {Set<string>} diff\n */\nconst getDiffToOldAssets = (currentAssets, oldAssets) => {\n  const diff = new Set();\n  const now = Date.now();\n  for (const [asset, ts] of oldAssets) {\n    if (ts >= now) continue;\n    if (!currentAssets.has(asset)) diff.add(asset);\n  }\n  return diff;\n};\n\n/**\n * @param {OutputFileSystem} fs filesystem\n * @param {string} filename path to file\n * @param {StatsCallback} callback callback for provided filename\n * @returns {void}\n */\nconst doStat = (fs, filename, callback) => {\n  if (\"lstat\" in fs) {\n    fs.lstat(filename, callback);\n  } else {\n    fs.stat(filename, callback);\n  }\n};\n\n/**\n * @param {OutputFileSystem} fs filesystem\n * @param {string} outputPath output path\n * @param {boolean} dry only log instead of fs modification\n * @param {Logger} logger logger\n * @param {Set<string>} diff filenames of the assets that shouldn't be there\n * @param {function(string): boolean} isKept check if the entry is ignored\n * @param {function(Error=, Assets=): void} callback callback\n * @returns {void}\n */\nconst applyDiff = (fs, outputPath, dry, logger, diff, isKept, callback) => {\n  const log = msg => {\n    if (dry) {\n      logger.info(msg);\n    } else {\n      logger.log(msg);\n    }\n  };\n  /** @typedef {{ type: \"check\" | \"unlink\" | \"rmdir\", filename: string, parent: { remaining: number, job: Job } | undefined }} Job */\n  /** @type {Job[]} */\n  const jobs = Array.from(diff.keys(), filename => ({\n    type: \"check\",\n    filename,\n    parent: undefined\n  }));\n  /** @type {Assets} */\n  const keptAssets = new Map();\n  processAsyncTree(jobs, 10, (_ref, push, callback) => {\n    let {\n      type,\n      filename,\n      parent\n    } = _ref;\n    const handleError = err => {\n      if (err.code === \"ENOENT\") {\n        log(`${filename} was removed during cleaning by something else`);\n        handleParent();\n        return callback();\n      }\n      return callback(err);\n    };\n    const handleParent = () => {\n      if (parent && --parent.remaining === 0) push(parent.job);\n    };\n    const path = join(fs, outputPath, filename);\n    switch (type) {\n      case \"check\":\n        if (isKept(filename)) {\n          keptAssets.set(filename, 0);\n          // do not decrement parent entry as we don't want to delete the parent\n          log(`${filename} will be kept`);\n          return process.nextTick(callback);\n        }\n        doStat(fs, path, (err, stats) => {\n          if (err) return handleError(err);\n          if (!stats.isDirectory()) {\n            push({\n              type: \"unlink\",\n              filename,\n              parent\n            });\n            return callback();\n          }\n          fs.readdir(path, (err, entries) => {\n            if (err) return handleError(err);\n            /** @type {Job} */\n            const deleteJob = {\n              type: \"rmdir\",\n              filename,\n              parent\n            };\n            if (entries.length === 0) {\n              push(deleteJob);\n            } else {\n              const parentToken = {\n                remaining: entries.length,\n                job: deleteJob\n              };\n              for (const entry of entries) {\n                const file = /** @type {string} */entry;\n                if (file.startsWith(\".\")) {\n                  log(`${filename} will be kept (dot-files will never be removed)`);\n                  continue;\n                }\n                push({\n                  type: \"check\",\n                  filename: `${filename}/${file}`,\n                  parent: parentToken\n                });\n              }\n            }\n            return callback();\n          });\n        });\n        break;\n      case \"rmdir\":\n        log(`${filename} will be removed`);\n        if (dry) {\n          handleParent();\n          return process.nextTick(callback);\n        }\n        if (!fs.rmdir) {\n          logger.warn(`${filename} can't be removed because output file system doesn't support removing directories (rmdir)`);\n          return process.nextTick(callback);\n        }\n        fs.rmdir(path, err => {\n          if (err) return handleError(err);\n          handleParent();\n          callback();\n        });\n        break;\n      case \"unlink\":\n        log(`${filename} will be removed`);\n        if (dry) {\n          handleParent();\n          return process.nextTick(callback);\n        }\n        if (!fs.unlink) {\n          logger.warn(`${filename} can't be removed because output file system doesn't support removing files (rmdir)`);\n          return process.nextTick(callback);\n        }\n        fs.unlink(path, err => {\n          if (err) return handleError(err);\n          handleParent();\n          callback();\n        });\n        break;\n    }\n  }, err => {\n    if (err) return callback(err);\n    callback(undefined, keptAssets);\n  });\n};\n\n/** @type {WeakMap<Compilation, CleanPluginCompilationHooks>} */\nconst compilationHooksMap = new WeakMap();\nclass CleanPlugin {\n  /**\n   * @param {Compilation} compilation the compilation\n   * @returns {CleanPluginCompilationHooks} the attached hooks\n   */\n  static getCompilationHooks(compilation) {\n    if (!(compilation instanceof Compilation)) {\n      throw new TypeError(\"The 'compilation' argument must be an instance of Compilation\");\n    }\n    let hooks = compilationHooksMap.get(compilation);\n    if (hooks === undefined) {\n      hooks = {\n        /** @type {SyncBailHook<[string], boolean>} */\n        keep: new SyncBailHook([\"ignore\"])\n      };\n      compilationHooksMap.set(compilation, hooks);\n    }\n    return hooks;\n  }\n\n  /** @param {CleanOptions} options options */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validate(options);\n    this.options = {\n      dry: false,\n      ...options\n    };\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const {\n      dry,\n      keep\n    } = this.options;\n    const keepFn = typeof keep === \"function\" ? keep : typeof keep === \"string\" ? path => path.startsWith(keep) : typeof keep === \"object\" && keep.test ? path => keep.test(path) : () => false;\n\n    // We assume that no external modification happens while the compiler is active\n    // So we can store the old assets and only diff to them to avoid fs access on\n    // incremental builds\n    /** @type {undefined|Assets} */\n    let oldAssets;\n    compiler.hooks.emit.tapAsync({\n      name: \"CleanPlugin\",\n      stage: 100\n    }, (compilation, callback) => {\n      const hooks = CleanPlugin.getCompilationHooks(compilation);\n      const logger = compilation.getLogger(\"webpack.CleanPlugin\");\n      const fs = compiler.outputFileSystem;\n      if (!fs.readdir) {\n        return callback(new Error(\"CleanPlugin: Output filesystem doesn't support listing directories (readdir)\"));\n      }\n\n      /** @type {Assets} */\n      const currentAssets = new Map();\n      const now = Date.now();\n      for (const asset of Object.keys(compilation.assets)) {\n        if (/^[A-Za-z]:\\\\|^\\/|^\\\\\\\\/.test(asset)) continue;\n        let normalizedAsset;\n        let newNormalizedAsset = asset.replace(/\\\\/g, \"/\");\n        do {\n          normalizedAsset = newNormalizedAsset;\n          newNormalizedAsset = normalizedAsset.replace(/(^|\\/)(?!\\.\\.)[^/]+\\/\\.\\.\\//g, \"$1\");\n        } while (newNormalizedAsset !== normalizedAsset);\n        if (normalizedAsset.startsWith(\"../\")) continue;\n        const assetInfo = compilation.assetsInfo.get(asset);\n        if (assetInfo && assetInfo.hotModuleReplacement) {\n          currentAssets.set(normalizedAsset, now + _10sec);\n        } else {\n          currentAssets.set(normalizedAsset, 0);\n        }\n      }\n      const outputPath = compilation.getPath(compiler.outputPath, {});\n      const isKept = path => {\n        const result = hooks.keep.call(path);\n        if (result !== undefined) return result;\n        return keepFn(path);\n      };\n\n      /**\n       * @param {Error=} err err\n       * @param {Set<string>=} diff diff\n       */\n      const diffCallback = (err, diff) => {\n        if (err) {\n          oldAssets = undefined;\n          callback(err);\n          return;\n        }\n        applyDiff(fs, outputPath, dry, logger, diff, isKept, (err, keptAssets) => {\n          if (err) {\n            oldAssets = undefined;\n          } else {\n            if (oldAssets) mergeAssets(currentAssets, oldAssets);\n            oldAssets = currentAssets;\n            if (keptAssets) mergeAssets(oldAssets, keptAssets);\n          }\n          callback(err);\n        });\n      };\n      if (oldAssets) {\n        diffCallback(null, getDiffToOldAssets(currentAssets, oldAssets));\n      } else {\n        getDiffToFs(fs, outputPath, currentAssets, diffCallback);\n      }\n    });\n  }\n}\nmodule.exports = CleanPlugin;","map":{"version":3,"names":["asyncLib","require","SyncBailHook","Compilation","createSchemaValidation","join","processAsyncTree","validate","undefined","definitions","oneOf","$ref","name","baseDataPath","_10sec","mergeAssets","as1","as2","key","value1","value2","get","set","getDiffToFs","fs","outputPath","currentAssets","callback","directories","Set","asset","add","replace","directory","diff","forEachLimit","readdir","err","entries","code","entry","file","filename","has","getDiffToOldAssets","oldAssets","now","Date","ts","doStat","lstat","stat","applyDiff","dry","logger","isKept","log","msg","info","jobs","Array","from","keys","type","parent","keptAssets","Map","_ref","push","handleError","handleParent","remaining","job","path","process","nextTick","stats","isDirectory","deleteJob","length","parentToken","startsWith","rmdir","warn","unlink","compilationHooksMap","WeakMap","CleanPlugin","getCompilationHooks","compilation","TypeError","hooks","keep","constructor","options","arguments","apply","compiler","keepFn","test","emit","tapAsync","stage","getLogger","outputFileSystem","Error","Object","assets","normalizedAsset","newNormalizedAsset","assetInfo","assetsInfo","hotModuleReplacement","getPath","result","call","diffCallback","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/CleanPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst { SyncBailHook } = require(\"tapable\");\nconst Compilation = require(\"../lib/Compilation\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst { join } = require(\"./util/fs\");\nconst processAsyncTree = require(\"./util/processAsyncTree\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").CleanOptions} CleanOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n/** @typedef {import(\"./util/fs\").OutputFileSystem} OutputFileSystem */\n/** @typedef {import(\"./util/fs\").StatsCallback} StatsCallback */\n\n/** @typedef {(function(string):boolean)|RegExp} IgnoreItem */\n/** @typedef {Map<string, number>} Assets */\n/** @typedef {function(IgnoreItem): void} AddToIgnoreCallback */\n\n/**\n * @typedef {Object} CleanPluginCompilationHooks\n * @property {SyncBailHook<[string], boolean>} keep when returning true the file/directory will be kept during cleaning, returning false will clean it and ignore the following plugins and config\n */\n\nconst validate = createSchemaValidation(\n\tundefined,\n\t() => {\n\t\tconst { definitions } = require(\"../schemas/WebpackOptions.json\");\n\t\treturn {\n\t\t\tdefinitions,\n\t\t\toneOf: [{ $ref: \"#/definitions/CleanOptions\" }]\n\t\t};\n\t},\n\t{\n\t\tname: \"Clean Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\nconst _10sec = 10 * 1000;\n\n/**\n * marge assets map 2 into map 1\n * @param {Assets} as1 assets\n * @param {Assets} as2 assets\n * @returns {void}\n */\nconst mergeAssets = (as1, as2) => {\n\tfor (const [key, value1] of as2) {\n\t\tconst value2 = as1.get(key);\n\t\tif (!value2 || value1 > value2) as1.set(key, value1);\n\t}\n};\n\n/**\n * @param {OutputFileSystem} fs filesystem\n * @param {string} outputPath output path\n * @param {Map<string, number>} currentAssets filename of the current assets (must not start with .. or ., must only use / as path separator)\n * @param {function((Error | null)=, Set<string>=): void} callback returns the filenames of the assets that shouldn't be there\n * @returns {void}\n */\nconst getDiffToFs = (fs, outputPath, currentAssets, callback) => {\n\tconst directories = new Set();\n\t// get directories of assets\n\tfor (const [asset] of currentAssets) {\n\t\tdirectories.add(asset.replace(/(^|\\/)[^/]*$/, \"\"));\n\t}\n\t// and all parent directories\n\tfor (const directory of directories) {\n\t\tdirectories.add(directory.replace(/(^|\\/)[^/]*$/, \"\"));\n\t}\n\tconst diff = new Set();\n\tasyncLib.forEachLimit(\n\t\tdirectories,\n\t\t10,\n\t\t(directory, callback) => {\n\t\t\tfs.readdir(join(fs, outputPath, directory), (err, entries) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === \"ENOENT\") return callback();\n\t\t\t\t\tif (err.code === \"ENOTDIR\") {\n\t\t\t\t\t\tdiff.add(directory);\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\tconst file = /** @type {string} */ (entry);\n\t\t\t\t\tconst filename = directory ? `${directory}/${file}` : file;\n\t\t\t\t\tif (!directories.has(filename) && !currentAssets.has(filename)) {\n\t\t\t\t\t\tdiff.add(filename);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcallback();\n\t\t\t});\n\t\t},\n\t\terr => {\n\t\t\tif (err) return callback(err);\n\n\t\t\tcallback(null, diff);\n\t\t}\n\t);\n};\n\n/**\n * @param {Assets} currentAssets assets list\n * @param {Assets} oldAssets old assets list\n * @returns {Set<string>} diff\n */\nconst getDiffToOldAssets = (currentAssets, oldAssets) => {\n\tconst diff = new Set();\n\tconst now = Date.now();\n\tfor (const [asset, ts] of oldAssets) {\n\t\tif (ts >= now) continue;\n\t\tif (!currentAssets.has(asset)) diff.add(asset);\n\t}\n\treturn diff;\n};\n\n/**\n * @param {OutputFileSystem} fs filesystem\n * @param {string} filename path to file\n * @param {StatsCallback} callback callback for provided filename\n * @returns {void}\n */\nconst doStat = (fs, filename, callback) => {\n\tif (\"lstat\" in fs) {\n\t\tfs.lstat(filename, callback);\n\t} else {\n\t\tfs.stat(filename, callback);\n\t}\n};\n\n/**\n * @param {OutputFileSystem} fs filesystem\n * @param {string} outputPath output path\n * @param {boolean} dry only log instead of fs modification\n * @param {Logger} logger logger\n * @param {Set<string>} diff filenames of the assets that shouldn't be there\n * @param {function(string): boolean} isKept check if the entry is ignored\n * @param {function(Error=, Assets=): void} callback callback\n * @returns {void}\n */\nconst applyDiff = (fs, outputPath, dry, logger, diff, isKept, callback) => {\n\tconst log = msg => {\n\t\tif (dry) {\n\t\t\tlogger.info(msg);\n\t\t} else {\n\t\t\tlogger.log(msg);\n\t\t}\n\t};\n\t/** @typedef {{ type: \"check\" | \"unlink\" | \"rmdir\", filename: string, parent: { remaining: number, job: Job } | undefined }} Job */\n\t/** @type {Job[]} */\n\tconst jobs = Array.from(diff.keys(), filename => ({\n\t\ttype: \"check\",\n\t\tfilename,\n\t\tparent: undefined\n\t}));\n\t/** @type {Assets} */\n\tconst keptAssets = new Map();\n\tprocessAsyncTree(\n\t\tjobs,\n\t\t10,\n\t\t({ type, filename, parent }, push, callback) => {\n\t\t\tconst handleError = err => {\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\tlog(`${filename} was removed during cleaning by something else`);\n\t\t\t\t\thandleParent();\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t};\n\t\t\tconst handleParent = () => {\n\t\t\t\tif (parent && --parent.remaining === 0) push(parent.job);\n\t\t\t};\n\t\t\tconst path = join(fs, outputPath, filename);\n\t\t\tswitch (type) {\n\t\t\t\tcase \"check\":\n\t\t\t\t\tif (isKept(filename)) {\n\t\t\t\t\t\tkeptAssets.set(filename, 0);\n\t\t\t\t\t\t// do not decrement parent entry as we don't want to delete the parent\n\t\t\t\t\t\tlog(`${filename} will be kept`);\n\t\t\t\t\t\treturn process.nextTick(callback);\n\t\t\t\t\t}\n\t\t\t\t\tdoStat(fs, path, (err, stats) => {\n\t\t\t\t\t\tif (err) return handleError(err);\n\t\t\t\t\t\tif (!stats.isDirectory()) {\n\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\ttype: \"unlink\",\n\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\tparent\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfs.readdir(path, (err, entries) => {\n\t\t\t\t\t\t\tif (err) return handleError(err);\n\t\t\t\t\t\t\t/** @type {Job} */\n\t\t\t\t\t\t\tconst deleteJob = {\n\t\t\t\t\t\t\t\ttype: \"rmdir\",\n\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\tparent\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (entries.length === 0) {\n\t\t\t\t\t\t\t\tpush(deleteJob);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst parentToken = {\n\t\t\t\t\t\t\t\t\tremaining: entries.length,\n\t\t\t\t\t\t\t\t\tjob: deleteJob\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\t\t\t\t\tconst file = /** @type {string} */ (entry);\n\t\t\t\t\t\t\t\t\tif (file.startsWith(\".\")) {\n\t\t\t\t\t\t\t\t\t\tlog(\n\t\t\t\t\t\t\t\t\t\t\t`${filename} will be kept (dot-files will never be removed)`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\ttype: \"check\",\n\t\t\t\t\t\t\t\t\t\tfilename: `${filename}/${file}`,\n\t\t\t\t\t\t\t\t\t\tparent: parentToken\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"rmdir\":\n\t\t\t\t\tlog(`${filename} will be removed`);\n\t\t\t\t\tif (dry) {\n\t\t\t\t\t\thandleParent();\n\t\t\t\t\t\treturn process.nextTick(callback);\n\t\t\t\t\t}\n\t\t\t\t\tif (!fs.rmdir) {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t`${filename} can't be removed because output file system doesn't support removing directories (rmdir)`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn process.nextTick(callback);\n\t\t\t\t\t}\n\t\t\t\t\tfs.rmdir(path, err => {\n\t\t\t\t\t\tif (err) return handleError(err);\n\t\t\t\t\t\thandleParent();\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"unlink\":\n\t\t\t\t\tlog(`${filename} will be removed`);\n\t\t\t\t\tif (dry) {\n\t\t\t\t\t\thandleParent();\n\t\t\t\t\t\treturn process.nextTick(callback);\n\t\t\t\t\t}\n\t\t\t\t\tif (!fs.unlink) {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t`${filename} can't be removed because output file system doesn't support removing files (rmdir)`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn process.nextTick(callback);\n\t\t\t\t\t}\n\t\t\t\t\tfs.unlink(path, err => {\n\t\t\t\t\t\tif (err) return handleError(err);\n\t\t\t\t\t\thandleParent();\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\terr => {\n\t\t\tif (err) return callback(err);\n\t\t\tcallback(undefined, keptAssets);\n\t\t}\n\t);\n};\n\n/** @type {WeakMap<Compilation, CleanPluginCompilationHooks>} */\nconst compilationHooksMap = new WeakMap();\n\nclass CleanPlugin {\n\t/**\n\t * @param {Compilation} compilation the compilation\n\t * @returns {CleanPluginCompilationHooks} the attached hooks\n\t */\n\tstatic getCompilationHooks(compilation) {\n\t\tif (!(compilation instanceof Compilation)) {\n\t\t\tthrow new TypeError(\n\t\t\t\t\"The 'compilation' argument must be an instance of Compilation\"\n\t\t\t);\n\t\t}\n\t\tlet hooks = compilationHooksMap.get(compilation);\n\t\tif (hooks === undefined) {\n\t\t\thooks = {\n\t\t\t\t/** @type {SyncBailHook<[string], boolean>} */\n\t\t\t\tkeep: new SyncBailHook([\"ignore\"])\n\t\t\t};\n\t\t\tcompilationHooksMap.set(compilation, hooks);\n\t\t}\n\t\treturn hooks;\n\t}\n\n\t/** @param {CleanOptions} options options */\n\tconstructor(options = {}) {\n\t\tvalidate(options);\n\t\tthis.options = { dry: false, ...options };\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { dry, keep } = this.options;\n\n\t\tconst keepFn =\n\t\t\ttypeof keep === \"function\"\n\t\t\t\t? keep\n\t\t\t\t: typeof keep === \"string\"\n\t\t\t\t? path => path.startsWith(keep)\n\t\t\t\t: typeof keep === \"object\" && keep.test\n\t\t\t\t? path => keep.test(path)\n\t\t\t\t: () => false;\n\n\t\t// We assume that no external modification happens while the compiler is active\n\t\t// So we can store the old assets and only diff to them to avoid fs access on\n\t\t// incremental builds\n\t\t/** @type {undefined|Assets} */\n\t\tlet oldAssets;\n\n\t\tcompiler.hooks.emit.tapAsync(\n\t\t\t{\n\t\t\t\tname: \"CleanPlugin\",\n\t\t\t\tstage: 100\n\t\t\t},\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst hooks = CleanPlugin.getCompilationHooks(compilation);\n\t\t\t\tconst logger = compilation.getLogger(\"webpack.CleanPlugin\");\n\t\t\t\tconst fs = compiler.outputFileSystem;\n\n\t\t\t\tif (!fs.readdir) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\"CleanPlugin: Output filesystem doesn't support listing directories (readdir)\"\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t/** @type {Assets} */\n\t\t\t\tconst currentAssets = new Map();\n\t\t\t\tconst now = Date.now();\n\t\t\t\tfor (const asset of Object.keys(compilation.assets)) {\n\t\t\t\t\tif (/^[A-Za-z]:\\\\|^\\/|^\\\\\\\\/.test(asset)) continue;\n\t\t\t\t\tlet normalizedAsset;\n\t\t\t\t\tlet newNormalizedAsset = asset.replace(/\\\\/g, \"/\");\n\t\t\t\t\tdo {\n\t\t\t\t\t\tnormalizedAsset = newNormalizedAsset;\n\t\t\t\t\t\tnewNormalizedAsset = normalizedAsset.replace(\n\t\t\t\t\t\t\t/(^|\\/)(?!\\.\\.)[^/]+\\/\\.\\.\\//g,\n\t\t\t\t\t\t\t\"$1\"\n\t\t\t\t\t\t);\n\t\t\t\t\t} while (newNormalizedAsset !== normalizedAsset);\n\t\t\t\t\tif (normalizedAsset.startsWith(\"../\")) continue;\n\t\t\t\t\tconst assetInfo = compilation.assetsInfo.get(asset);\n\t\t\t\t\tif (assetInfo && assetInfo.hotModuleReplacement) {\n\t\t\t\t\t\tcurrentAssets.set(normalizedAsset, now + _10sec);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentAssets.set(normalizedAsset, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst outputPath = compilation.getPath(compiler.outputPath, {});\n\n\t\t\t\tconst isKept = path => {\n\t\t\t\t\tconst result = hooks.keep.call(path);\n\t\t\t\t\tif (result !== undefined) return result;\n\t\t\t\t\treturn keepFn(path);\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @param {Error=} err err\n\t\t\t\t * @param {Set<string>=} diff diff\n\t\t\t\t */\n\t\t\t\tconst diffCallback = (err, diff) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\toldAssets = undefined;\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tapplyDiff(\n\t\t\t\t\t\tfs,\n\t\t\t\t\t\toutputPath,\n\t\t\t\t\t\tdry,\n\t\t\t\t\t\tlogger,\n\t\t\t\t\t\tdiff,\n\t\t\t\t\t\tisKept,\n\t\t\t\t\t\t(err, keptAssets) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\toldAssets = undefined;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (oldAssets) mergeAssets(currentAssets, oldAssets);\n\t\t\t\t\t\t\t\toldAssets = currentAssets;\n\t\t\t\t\t\t\t\tif (keptAssets) mergeAssets(oldAssets, keptAssets);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tif (oldAssets) {\n\t\t\t\t\tdiffCallback(null, getDiffToOldAssets(currentAssets, oldAssets));\n\t\t\t\t} else {\n\t\t\t\t\tgetDiffToFs(fs, outputPath, currentAssets, diffCallback);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = CleanPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}