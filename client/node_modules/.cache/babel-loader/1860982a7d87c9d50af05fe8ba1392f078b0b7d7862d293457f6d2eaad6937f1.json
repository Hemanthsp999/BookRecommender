{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\nconst CURRENT_METHOD_REGEXP = /at ([a-zA-Z0-9_.]*)/;\n\n/**\n * @param {string=} method method name\n * @returns {string} message\n */\nfunction createMessage(method) {\n  return `Abstract method${method ? \" \" + method : \"\"}. Must be overridden.`;\n}\n\n/**\n * @constructor\n */\nfunction Message() {\n  /** @type {string} */\n  this.stack = undefined;\n  Error.captureStackTrace(this);\n  /** @type {RegExpMatchArray} */\n  const match = this.stack.split(\"\\n\")[3].match(CURRENT_METHOD_REGEXP);\n  this.message = match && match[1] ? createMessage(match[1]) : createMessage();\n}\n\n/**\n * Error for abstract method\n * @example\n * class FooClass {\n *     abstractMethod() {\n *         throw new AbstractMethodError(); // error message: Abstract method FooClass.abstractMethod. Must be overridden.\n *     }\n * }\n *\n */\nclass AbstractMethodError extends WebpackError {\n  constructor() {\n    super(new Message().message);\n    this.name = \"AbstractMethodError\";\n  }\n}\nmodule.exports = AbstractMethodError;","map":{"version":3,"names":["WebpackError","require","CURRENT_METHOD_REGEXP","createMessage","method","Message","stack","undefined","Error","captureStackTrace","match","split","message","AbstractMethodError","constructor","name","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/AbstractMethodError.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\nconst CURRENT_METHOD_REGEXP = /at ([a-zA-Z0-9_.]*)/;\n\n/**\n * @param {string=} method method name\n * @returns {string} message\n */\nfunction createMessage(method) {\n\treturn `Abstract method${method ? \" \" + method : \"\"}. Must be overridden.`;\n}\n\n/**\n * @constructor\n */\nfunction Message() {\n\t/** @type {string} */\n\tthis.stack = undefined;\n\tError.captureStackTrace(this);\n\t/** @type {RegExpMatchArray} */\n\tconst match = this.stack.split(\"\\n\")[3].match(CURRENT_METHOD_REGEXP);\n\n\tthis.message = match && match[1] ? createMessage(match[1]) : createMessage();\n}\n\n/**\n * Error for abstract method\n * @example\n * class FooClass {\n *     abstractMethod() {\n *         throw new AbstractMethodError(); // error message: Abstract method FooClass.abstractMethod. Must be overridden.\n *     }\n * }\n *\n */\nclass AbstractMethodError extends WebpackError {\n\tconstructor() {\n\t\tsuper(new Message().message);\n\t\tthis.name = \"AbstractMethodError\";\n\t}\n}\n\nmodule.exports = AbstractMethodError;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMC,qBAAqB,GAAG,qBAAqB;;AAEnD;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,MAAM,EAAE;EAC9B,OAAQ,kBAAiBA,MAAM,GAAG,GAAG,GAAGA,MAAM,GAAG,EAAG,uBAAsB;AAC3E;;AAEA;AACA;AACA;AACA,SAASC,OAAOA,CAAA,EAAG;EAClB;EACA,IAAI,CAACC,KAAK,GAAGC,SAAS;EACtBC,KAAK,CAACC,iBAAiB,CAAC,IAAI,CAAC;EAC7B;EACA,MAAMC,KAAK,GAAG,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAACD,KAAK,CAACR,qBAAqB,CAAC;EAEpE,IAAI,CAACU,OAAO,GAAGF,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,GAAGP,aAAa,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGP,aAAa,CAAC,CAAC;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMU,mBAAmB,SAASb,YAAY,CAAC;EAC9Cc,WAAWA,CAAA,EAAG;IACb,KAAK,CAAC,IAAIT,OAAO,CAAC,CAAC,CAACO,OAAO,CAAC;IAC5B,IAAI,CAACG,IAAI,GAAG,qBAAqB;EAClC;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGJ,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}