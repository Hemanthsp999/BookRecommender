{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nclass EnsureChunkRuntimeModule extends RuntimeModule {\n  constructor(runtimeRequirements) {\n    super(\"ensure chunk\");\n    this.runtimeRequirements = runtimeRequirements;\n  }\n\n  /**\n   * @returns {string} runtime code\n   */\n  generate() {\n    const {\n      runtimeTemplate\n    } = this.compilation;\n    // Check if there are non initial chunks which need to be imported using require-ensure\n    if (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\n      const handlers = RuntimeGlobals.ensureChunkHandlers;\n      return Template.asString([`${handlers} = {};`, \"// This file contains only the entry chunk.\", \"// The chunk loading function for additional chunks\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(\"chunkId\", [`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\"promises, key\", [`${handlers}[key](chunkId, promises);`, \"return promises;\"])}, []));`])};`]);\n    } else {\n      // There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\n      // function. This can happen with multiple entrypoints.\n      return Template.asString([\"// The chunk loading function for additional chunks\", \"// Since all referenced chunks are already included\", \"// in this file, this function is empty here.\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\"Promise.resolve()\")};`]);\n    }\n  }\n}\nmodule.exports = EnsureChunkRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","EnsureChunkRuntimeModule","constructor","runtimeRequirements","generate","runtimeTemplate","compilation","has","ensureChunkHandlers","handlers","asString","ensureChunk","basicFunction","returningFunction","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/runtime/EnsureChunkRuntimeModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\nclass EnsureChunkRuntimeModule extends RuntimeModule {\n\tconstructor(runtimeRequirements) {\n\t\tsuper(\"ensure chunk\");\n\t\tthis.runtimeRequirements = runtimeRequirements;\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { runtimeTemplate } = this.compilation;\n\t\t// Check if there are non initial chunks which need to be imported using require-ensure\n\t\tif (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\n\t\t\tconst handlers = RuntimeGlobals.ensureChunkHandlers;\n\t\t\treturn Template.asString([\n\t\t\t\t`${handlers} = {};`,\n\t\t\t\t\"// This file contains only the entry chunk.\",\n\t\t\t\t\"// The chunk loading function for additional chunks\",\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(\n\t\t\t\t\t\"chunkId\",\n\t\t\t\t\t[\n\t\t\t\t\t\t`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\t\"promises, key\",\n\t\t\t\t\t\t\t[`${handlers}[key](chunkId, promises);`, \"return promises;\"]\n\t\t\t\t\t\t)}, []));`\n\t\t\t\t\t]\n\t\t\t\t)};`\n\t\t\t]);\n\t\t} else {\n\t\t\t// There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\n\t\t\t// function. This can happen with multiple entrypoints.\n\t\t\treturn Template.asString([\n\t\t\t\t\"// The chunk loading function for additional chunks\",\n\t\t\t\t\"// Since all referenced chunks are already included\",\n\t\t\t\t\"// in this file, this function is empty here.\",\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\"Promise.resolve()\"\n\t\t\t\t)};`\n\t\t\t]);\n\t\t}\n\t}\n}\n\nmodule.exports = EnsureChunkRuntimeModule;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEvC,MAAMG,wBAAwB,SAASF,aAAa,CAAC;EACpDG,WAAWA,CAACC,mBAAmB,EAAE;IAChC,KAAK,CAAC,cAAc,CAAC;IACrB,IAAI,CAACA,mBAAmB,GAAGA,mBAAmB;EAC/C;;EAEA;AACD;AACA;EACCC,QAAQA,CAAA,EAAG;IACV,MAAM;MAAEC;IAAgB,CAAC,GAAG,IAAI,CAACC,WAAW;IAC5C;IACA,IAAI,IAAI,CAACH,mBAAmB,CAACI,GAAG,CAACV,cAAc,CAACW,mBAAmB,CAAC,EAAE;MACrE,MAAMC,QAAQ,GAAGZ,cAAc,CAACW,mBAAmB;MACnD,OAAOR,QAAQ,CAACU,QAAQ,CAAC,CACvB,GAAED,QAAS,QAAO,EACnB,6CAA6C,EAC7C,qDAAqD,EACpD,GAAEZ,cAAc,CAACc,WAAY,MAAKN,eAAe,CAACO,aAAa,CAC/D,SAAS,EACT,CACE,kCAAiCH,QAAS,YAAWJ,eAAe,CAACO,aAAa,CAClF,eAAe,EACf,CAAE,GAAEH,QAAS,2BAA0B,EAAE,kBAAkB,CAC5D,CAAE,SAAQ,CAEZ,CAAE,GAAE,CACJ,CAAC;IACH,CAAC,MAAM;MACN;MACA;MACA,OAAOT,QAAQ,CAACU,QAAQ,CAAC,CACxB,qDAAqD,EACrD,qDAAqD,EACrD,+CAA+C,EAC9C,GAAEb,cAAc,CAACc,WAAY,MAAKN,eAAe,CAACQ,iBAAiB,CACnE,mBACD,CAAE,GAAE,CACJ,CAAC;IACH;EACD;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGd,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}