{"ast":null,"code":"const path = require('path');\nconst shellQuote = require('shell-quote');\nconst childProcess = require('child_process');\n\n// Map from full process name to binary that starts the process\n// We can't just re-use full process name, because it will spawn a new instance\n// of the app every time\nconst COMMON_EDITORS_OSX = require('./editor-info/osx');\nconst COMMON_EDITORS_LINUX = require('./editor-info/linux');\nconst COMMON_EDITORS_WIN = require('./editor-info/windows');\nmodule.exports = function guessEditor(specifiedEditor) {\n  if (specifiedEditor) {\n    return shellQuote.parse(specifiedEditor);\n  }\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR];\n  }\n  if (process.versions.webcontainer) {\n    return [process.env.EDITOR || 'code'];\n  }\n\n  // We can find out which editor is currently running by:\n  // `ps x` on macOS and Linux\n  // `Get-Process` on Windows\n  try {\n    if (process.platform === 'darwin') {\n      const output = childProcess.execSync('ps x -o comm=', {\n        stdio: ['pipe', 'pipe', 'ignore']\n      }).toString();\n      const processNames = Object.keys(COMMON_EDITORS_OSX);\n      const processList = output.split('\\n');\n      for (let i = 0; i < processNames.length; i++) {\n        const processName = processNames[i];\n        // Find editor by exact match.\n        if (output.indexOf(processName) !== -1) {\n          return [COMMON_EDITORS_OSX[processName]];\n        }\n        const processNameWithoutApplications = processName.replace('/Applications', '');\n        // Find editor installation not in /Applications.\n        if (output.indexOf(processNameWithoutApplications) !== -1) {\n          // Use the CLI command if one is specified\n          if (processName !== COMMON_EDITORS_OSX[processName]) {\n            return [COMMON_EDITORS_OSX[processName]];\n          }\n          // Use a partial match to find the running process path.  If one is found, use the\n          // existing path since it can be running from anywhere.\n          const runningProcess = processList.find(procName => procName.endsWith(processNameWithoutApplications));\n          if (runningProcess !== undefined) {\n            return [runningProcess];\n          }\n        }\n      }\n    } else if (process.platform === 'win32') {\n      const output = childProcess.execSync('powershell -NoProfile -Command \"Get-CimInstance -Query \\\\\"select executablepath from win32_process where executablepath is not null\\\\\" | % { $_.ExecutablePath }\"', {\n        stdio: ['pipe', 'pipe', 'ignore']\n      }).toString();\n      const runningProcesses = output.split('\\r\\n');\n      for (let i = 0; i < runningProcesses.length; i++) {\n        const fullProcessPath = runningProcesses[i].trim();\n        const shortProcessName = path.basename(fullProcessPath);\n        if (COMMON_EDITORS_WIN.indexOf(shortProcessName) !== -1) {\n          return [fullProcessPath];\n        }\n      }\n    } else if (process.platform === 'linux') {\n      // --no-heading No header line\n      // x List all processes owned by you\n      // -o comm Need only names column\n      const output = childProcess.execSync('ps x --no-heading -o comm --sort=comm', {\n        stdio: ['pipe', 'pipe', 'ignore']\n      }).toString();\n      const processNames = Object.keys(COMMON_EDITORS_LINUX);\n      for (let i = 0; i < processNames.length; i++) {\n        const processName = processNames[i];\n        if (output.indexOf(processName) !== -1) {\n          return [COMMON_EDITORS_LINUX[processName]];\n        }\n      }\n    }\n  } catch (error) {\n    // Ignore...\n  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL];\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR];\n  }\n  return [null];\n};","map":{"version":3,"names":["path","require","shellQuote","childProcess","COMMON_EDITORS_OSX","COMMON_EDITORS_LINUX","COMMON_EDITORS_WIN","module","exports","guessEditor","specifiedEditor","parse","process","env","LAUNCH_EDITOR","versions","webcontainer","EDITOR","platform","output","execSync","stdio","toString","processNames","Object","keys","processList","split","i","length","processName","indexOf","processNameWithoutApplications","replace","runningProcess","find","procName","endsWith","undefined","runningProcesses","fullProcessPath","trim","shortProcessName","basename","error","VISUAL"],"sources":["/home/hemanth/react-project/client/node_modules/launch-editor/guess.js"],"sourcesContent":["const path = require('path')\nconst shellQuote = require('shell-quote')\nconst childProcess = require('child_process')\n\n// Map from full process name to binary that starts the process\n// We can't just re-use full process name, because it will spawn a new instance\n// of the app every time\nconst COMMON_EDITORS_OSX = require('./editor-info/osx')\nconst COMMON_EDITORS_LINUX = require('./editor-info/linux')\nconst COMMON_EDITORS_WIN = require('./editor-info/windows')\n\nmodule.exports = function guessEditor (specifiedEditor) {\n  if (specifiedEditor) {\n    return shellQuote.parse(specifiedEditor)\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n  if (process.versions.webcontainer) {\n    return [process.env.EDITOR || 'code']\n  }\n\n  // We can find out which editor is currently running by:\n  // `ps x` on macOS and Linux\n  // `Get-Process` on Windows\n  try {\n    if (process.platform === 'darwin') {\n      const output = childProcess\n        .execSync('ps x -o comm=', {\n          stdio: ['pipe', 'pipe', 'ignore']\n        })\n        .toString()\n      const processNames = Object.keys(COMMON_EDITORS_OSX)\n      const processList = output.split('\\n')\n      for (let i = 0; i < processNames.length; i++) {\n        const processName = processNames[i]\n        // Find editor by exact match.\n        if (output.indexOf(processName) !== -1) {\n          return [COMMON_EDITORS_OSX[processName]]\n        }\n        const processNameWithoutApplications = processName.replace('/Applications', '')\n        // Find editor installation not in /Applications.\n        if (output.indexOf(processNameWithoutApplications) !== -1) {\n          // Use the CLI command if one is specified\n          if (processName !== COMMON_EDITORS_OSX[processName]) {\n            return [COMMON_EDITORS_OSX[processName]]\n          }\n          // Use a partial match to find the running process path.  If one is found, use the\n          // existing path since it can be running from anywhere.\n          const runningProcess = processList.find((procName) => procName.endsWith(processNameWithoutApplications))\n          if (runningProcess !== undefined) {\n            return [runningProcess]\n          }\n        }\n      }\n    } else if (process.platform === 'win32') {\n      const output = childProcess\n        .execSync(\n          'powershell -NoProfile -Command \"Get-CimInstance -Query \\\\\"select executablepath from win32_process where executablepath is not null\\\\\" | % { $_.ExecutablePath }\"',\n          {\n            stdio: ['pipe', 'pipe', 'ignore']\n          }\n        )\n        .toString()\n      const runningProcesses = output.split('\\r\\n')\n      for (let i = 0; i < runningProcesses.length; i++) {\n        const fullProcessPath = runningProcesses[i].trim()\n        const shortProcessName = path.basename(fullProcessPath)\n\n        if (COMMON_EDITORS_WIN.indexOf(shortProcessName) !== -1) {\n          return [fullProcessPath]\n        }\n      }\n    } else if (process.platform === 'linux') {\n      // --no-heading No header line\n      // x List all processes owned by you\n      // -o comm Need only names column\n      const output = childProcess\n        .execSync('ps x --no-heading -o comm --sort=comm', {\n          stdio: ['pipe', 'pipe', 'ignore']\n        })\n        .toString()\n      const processNames = Object.keys(COMMON_EDITORS_LINUX)\n      for (let i = 0; i < processNames.length; i++) {\n        const processName = processNames[i]\n        if (output.indexOf(processName) !== -1) {\n          return [COMMON_EDITORS_LINUX[processName]]\n        }\n      }\n    }\n  } catch (error) {\n    // Ignore...\n  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n\n  return [null]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}