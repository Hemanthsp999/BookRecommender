{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Source = require(\"./Source\");\nconst RawSource = require(\"./RawSource\");\nconst streamChunks = require(\"./helpers/streamChunks\");\nconst {\n  getMap,\n  getSourceAndMap\n} = require(\"./helpers/getFromStreamChunks\");\nconst REPLACE_REGEX = /\\n(?=.|\\s)/g;\nclass PrefixSource extends Source {\n  constructor(prefix, source) {\n    super();\n    this._source = typeof source === \"string\" || Buffer.isBuffer(source) ? new RawSource(source, true) : source;\n    this._prefix = prefix;\n  }\n  getPrefix() {\n    return this._prefix;\n  }\n  original() {\n    return this._source;\n  }\n  source() {\n    const node = this._source.source();\n    const prefix = this._prefix;\n    return prefix + node.replace(REPLACE_REGEX, \"\\n\" + prefix);\n  }\n\n  // TODO efficient buffer() implementation\n\n  map(options) {\n    return getMap(this, options);\n  }\n  sourceAndMap(options) {\n    return getSourceAndMap(this, options);\n  }\n  streamChunks(options, onChunk, onSource, onName) {\n    const prefix = this._prefix;\n    const prefixOffset = prefix.length;\n    const linesOnly = !!(options && options.columns === false);\n    const {\n      generatedLine,\n      generatedColumn,\n      source\n    } = streamChunks(this._source, options, (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) => {\n      if (generatedColumn !== 0) {\n        // In the middle of the line, we just adject the column\n        generatedColumn += prefixOffset;\n      } else if (chunk !== undefined) {\n        // At the start of the line, when we have source content\n        // add the prefix as generated mapping\n        // (in lines only mode we just add it to the original mapping\n        // for performance reasons)\n        if (linesOnly || sourceIndex < 0) {\n          chunk = prefix + chunk;\n        } else if (prefixOffset > 0) {\n          onChunk(prefix, generatedLine, generatedColumn, -1, -1, -1, -1);\n          generatedColumn += prefixOffset;\n        }\n      } else if (!linesOnly) {\n        // Without source content, we only need to adject the column info\n        // expect in lines only mode where prefix is added to original mapping\n        generatedColumn += prefixOffset;\n      }\n      onChunk(chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex);\n    }, onSource, onName);\n    return {\n      generatedLine,\n      generatedColumn: generatedColumn === 0 ? 0 : prefixOffset + generatedColumn,\n      source: source !== undefined ? prefix + source.replace(REPLACE_REGEX, \"\\n\" + prefix) : undefined\n    };\n  }\n  updateHash(hash) {\n    hash.update(\"PrefixSource\");\n    this._source.updateHash(hash);\n    hash.update(this._prefix);\n  }\n}\nmodule.exports = PrefixSource;","map":{"version":3,"names":["Source","require","RawSource","streamChunks","getMap","getSourceAndMap","REPLACE_REGEX","PrefixSource","constructor","prefix","source","_source","Buffer","isBuffer","_prefix","getPrefix","original","node","replace","map","options","sourceAndMap","onChunk","onSource","onName","prefixOffset","length","linesOnly","columns","generatedLine","generatedColumn","chunk","sourceIndex","originalLine","originalColumn","nameIndex","undefined","updateHash","hash","update","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack-sources/lib/PrefixSource.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Source = require(\"./Source\");\nconst RawSource = require(\"./RawSource\");\nconst streamChunks = require(\"./helpers/streamChunks\");\nconst { getMap, getSourceAndMap } = require(\"./helpers/getFromStreamChunks\");\n\nconst REPLACE_REGEX = /\\n(?=.|\\s)/g;\n\nclass PrefixSource extends Source {\n\tconstructor(prefix, source) {\n\t\tsuper();\n\t\tthis._source =\n\t\t\ttypeof source === \"string\" || Buffer.isBuffer(source)\n\t\t\t\t? new RawSource(source, true)\n\t\t\t\t: source;\n\t\tthis._prefix = prefix;\n\t}\n\n\tgetPrefix() {\n\t\treturn this._prefix;\n\t}\n\n\toriginal() {\n\t\treturn this._source;\n\t}\n\n\tsource() {\n\t\tconst node = this._source.source();\n\t\tconst prefix = this._prefix;\n\t\treturn prefix + node.replace(REPLACE_REGEX, \"\\n\" + prefix);\n\t}\n\n\t// TODO efficient buffer() implementation\n\n\tmap(options) {\n\t\treturn getMap(this, options);\n\t}\n\n\tsourceAndMap(options) {\n\t\treturn getSourceAndMap(this, options);\n\t}\n\n\tstreamChunks(options, onChunk, onSource, onName) {\n\t\tconst prefix = this._prefix;\n\t\tconst prefixOffset = prefix.length;\n\t\tconst linesOnly = !!(options && options.columns === false);\n\t\tconst { generatedLine, generatedColumn, source } = streamChunks(\n\t\t\tthis._source,\n\t\t\toptions,\n\t\t\t(\n\t\t\t\tchunk,\n\t\t\t\tgeneratedLine,\n\t\t\t\tgeneratedColumn,\n\t\t\t\tsourceIndex,\n\t\t\t\toriginalLine,\n\t\t\t\toriginalColumn,\n\t\t\t\tnameIndex\n\t\t\t) => {\n\t\t\t\tif (generatedColumn !== 0) {\n\t\t\t\t\t// In the middle of the line, we just adject the column\n\t\t\t\t\tgeneratedColumn += prefixOffset;\n\t\t\t\t} else if (chunk !== undefined) {\n\t\t\t\t\t// At the start of the line, when we have source content\n\t\t\t\t\t// add the prefix as generated mapping\n\t\t\t\t\t// (in lines only mode we just add it to the original mapping\n\t\t\t\t\t// for performance reasons)\n\t\t\t\t\tif (linesOnly || sourceIndex < 0) {\n\t\t\t\t\t\tchunk = prefix + chunk;\n\t\t\t\t\t} else if (prefixOffset > 0) {\n\t\t\t\t\t\tonChunk(prefix, generatedLine, generatedColumn, -1, -1, -1, -1);\n\t\t\t\t\t\tgeneratedColumn += prefixOffset;\n\t\t\t\t\t}\n\t\t\t\t} else if (!linesOnly) {\n\t\t\t\t\t// Without source content, we only need to adject the column info\n\t\t\t\t\t// expect in lines only mode where prefix is added to original mapping\n\t\t\t\t\tgeneratedColumn += prefixOffset;\n\t\t\t\t}\n\t\t\t\tonChunk(\n\t\t\t\t\tchunk,\n\t\t\t\t\tgeneratedLine,\n\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\tsourceIndex,\n\t\t\t\t\toriginalLine,\n\t\t\t\t\toriginalColumn,\n\t\t\t\t\tnameIndex\n\t\t\t\t);\n\t\t\t},\n\t\t\tonSource,\n\t\t\tonName\n\t\t);\n\t\treturn {\n\t\t\tgeneratedLine,\n\t\t\tgeneratedColumn:\n\t\t\t\tgeneratedColumn === 0 ? 0 : prefixOffset + generatedColumn,\n\t\t\tsource:\n\t\t\t\tsource !== undefined\n\t\t\t\t\t? prefix + source.replace(REPLACE_REGEX, \"\\n\" + prefix)\n\t\t\t\t\t: undefined\n\t\t};\n\t}\n\n\tupdateHash(hash) {\n\t\thash.update(\"PrefixSource\");\n\t\tthis._source.updateHash(hash);\n\t\thash.update(this._prefix);\n\t}\n}\n\nmodule.exports = PrefixSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}