{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  JSON_MODULE_TYPE\n} = require(\"../ModuleTypeConstants\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst JsonGenerator = require(\"./JsonGenerator\");\nconst JsonParser = require(\"./JsonParser\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {Record<string, any>} RawJsonData */\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/JsonModulesPluginParser.check.js\"), () => require(\"../../schemas/plugins/JsonModulesPluginParser.json\"), {\n  name: \"Json Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nconst PLUGIN_NAME = \"JsonModulesPlugin\";\n\n/**\n * The JsonModulesPlugin is the entrypoint plugin for the json modules feature.\n * It adds the json module type to the compiler and registers the json parser and generator.\n */\nclass JsonModulesPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   *\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      normalModuleFactory.hooks.createParser.for(JSON_MODULE_TYPE).tap(PLUGIN_NAME, parserOptions => {\n        validate(parserOptions);\n        return new JsonParser(parserOptions);\n      });\n      normalModuleFactory.hooks.createGenerator.for(JSON_MODULE_TYPE).tap(PLUGIN_NAME, () => {\n        return new JsonGenerator();\n      });\n    });\n  }\n}\nmodule.exports = JsonModulesPlugin;","map":{"version":3,"names":["JSON_MODULE_TYPE","require","createSchemaValidation","JsonGenerator","JsonParser","validate","name","baseDataPath","PLUGIN_NAME","JsonModulesPlugin","apply","compiler","hooks","compilation","tap","_ref","normalModuleFactory","createParser","for","parserOptions","createGenerator","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/json/JsonModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { JSON_MODULE_TYPE } = require(\"../ModuleTypeConstants\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst JsonGenerator = require(\"./JsonGenerator\");\nconst JsonParser = require(\"./JsonParser\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {Record<string, any>} RawJsonData */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/JsonModulesPluginParser.check.js\"),\n\t() => require(\"../../schemas/plugins/JsonModulesPluginParser.json\"),\n\t{\n\t\tname: \"Json Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\n\nconst PLUGIN_NAME = \"JsonModulesPlugin\";\n\n/**\n * The JsonModulesPlugin is the entrypoint plugin for the json modules feature.\n * It adds the json module type to the compiler and registers the json parser and generator.\n */\nclass JsonModulesPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t *\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(JSON_MODULE_TYPE)\n\t\t\t\t\t.tap(PLUGIN_NAME, parserOptions => {\n\t\t\t\t\t\tvalidate(parserOptions);\n\n\t\t\t\t\t\treturn new JsonParser(parserOptions);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(JSON_MODULE_TYPE)\n\t\t\t\t\t.tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\treturn new JsonGenerator();\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = JsonModulesPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAiB,CAAC,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAC9D,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AAC1E,MAAME,aAAa,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMG,UAAU,GAAGH,OAAO,CAAC,cAAc,CAAC;;AAE1C;AACA;;AAEA,MAAMI,QAAQ,GAAGH,sBAAsB,CACtCD,OAAO,CAAC,wDAAwD,CAAC,EACjE,MAAMA,OAAO,CAAC,oDAAoD,CAAC,EACnE;EACCK,IAAI,EAAE,qBAAqB;EAC3BC,YAAY,EAAE;AACf,CACD,CAAC;AAED,MAAMC,WAAW,GAAG,mBAAmB;;AAEvC;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACvB;AACD;AACA;AACA;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7BN,WAAW,EACX,CAACK,WAAW,EAAAE,IAAA,KAA8B;MAAA,IAA5B;QAAEC;MAAoB,CAAC,GAAAD,IAAA;MACpCC,mBAAmB,CAACJ,KAAK,CAACK,YAAY,CACpCC,GAAG,CAAClB,gBAAgB,CAAC,CACrBc,GAAG,CAACN,WAAW,EAAEW,aAAa,IAAI;QAClCd,QAAQ,CAACc,aAAa,CAAC;QAEvB,OAAO,IAAIf,UAAU,CAACe,aAAa,CAAC;MACrC,CAAC,CAAC;MACHH,mBAAmB,CAACJ,KAAK,CAACQ,eAAe,CACvCF,GAAG,CAAClB,gBAAgB,CAAC,CACrBc,GAAG,CAACN,WAAW,EAAE,MAAM;QACvB,OAAO,IAAIL,aAAa,CAAC,CAAC;MAC3B,CAAC,CAAC;IACJ,CACD,CAAC;EACF;AACD;AAEAkB,MAAM,CAACC,OAAO,GAAGb,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}