{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ModuleNotFoundError = require(\"../ModuleNotFoundError\");\nconst LazySet = require(\"../util/LazySet\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../ResolverFactory\").ResolveOptionsWithDependencyType} ResolveOptionsWithDependencyType */\n\n/**\n * @template T\n * @typedef {Object} MatchedConfigs\n * @property {Map<string, T>} resolved\n * @property {Map<string, T>} unresolved\n * @property {Map<string, T>} prefixed\n */\n\n/** @type {ResolveOptionsWithDependencyType} */\nconst RESOLVE_OPTIONS = {\n  dependencyType: \"esm\"\n};\n\n/**\n * @template T\n * @param {Compilation} compilation the compilation\n * @param {[string, T][]} configs to be processed configs\n * @returns {Promise<MatchedConfigs<T>>} resolved matchers\n */\nexports.resolveMatchedConfigs = (compilation, configs) => {\n  /** @type {Map<string, T>} */\n  const resolved = new Map();\n  /** @type {Map<string, T>} */\n  const unresolved = new Map();\n  /** @type {Map<string, T>} */\n  const prefixed = new Map();\n  const resolveContext = {\n    /** @type {LazySet<string>} */\n    fileDependencies: new LazySet(),\n    /** @type {LazySet<string>} */\n    contextDependencies: new LazySet(),\n    /** @type {LazySet<string>} */\n    missingDependencies: new LazySet()\n  };\n  const resolver = compilation.resolverFactory.get(\"normal\", RESOLVE_OPTIONS);\n  const context = compilation.compiler.context;\n  return Promise.all(configs.map(_ref => {\n    let [request, config] = _ref;\n    if (/^\\.\\.?(\\/|$)/.test(request)) {\n      // relative request\n      return new Promise(resolve => {\n        resolver.resolve({}, context, request, resolveContext, (err, result) => {\n          if (err || result === false) {\n            err = err || new Error(`Can't resolve ${request}`);\n            compilation.errors.push(new ModuleNotFoundError(null, err, {\n              name: `shared module ${request}`\n            }));\n            return resolve();\n          }\n          resolved.set(result, config);\n          resolve();\n        });\n      });\n    } else if (/^(\\/|[A-Za-z]:\\\\|\\\\\\\\)/.test(request)) {\n      // absolute path\n      resolved.set(request, config);\n    } else if (request.endsWith(\"/\")) {\n      // module request prefix\n      prefixed.set(request, config);\n    } else {\n      // module request\n      unresolved.set(request, config);\n    }\n  })).then(() => {\n    compilation.contextDependencies.addAll(resolveContext.contextDependencies);\n    compilation.fileDependencies.addAll(resolveContext.fileDependencies);\n    compilation.missingDependencies.addAll(resolveContext.missingDependencies);\n    return {\n      resolved,\n      unresolved,\n      prefixed\n    };\n  });\n};","map":{"version":3,"names":["ModuleNotFoundError","require","LazySet","RESOLVE_OPTIONS","dependencyType","exports","resolveMatchedConfigs","compilation","configs","resolved","Map","unresolved","prefixed","resolveContext","fileDependencies","contextDependencies","missingDependencies","resolver","resolverFactory","get","context","compiler","Promise","all","map","_ref","request","config","test","resolve","err","result","Error","errors","push","name","set","endsWith","then","addAll"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/sharing/resolveMatchedConfigs.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ModuleNotFoundError = require(\"../ModuleNotFoundError\");\nconst LazySet = require(\"../util/LazySet\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../ResolverFactory\").ResolveOptionsWithDependencyType} ResolveOptionsWithDependencyType */\n\n/**\n * @template T\n * @typedef {Object} MatchedConfigs\n * @property {Map<string, T>} resolved\n * @property {Map<string, T>} unresolved\n * @property {Map<string, T>} prefixed\n */\n\n/** @type {ResolveOptionsWithDependencyType} */\nconst RESOLVE_OPTIONS = { dependencyType: \"esm\" };\n\n/**\n * @template T\n * @param {Compilation} compilation the compilation\n * @param {[string, T][]} configs to be processed configs\n * @returns {Promise<MatchedConfigs<T>>} resolved matchers\n */\nexports.resolveMatchedConfigs = (compilation, configs) => {\n\t/** @type {Map<string, T>} */\n\tconst resolved = new Map();\n\t/** @type {Map<string, T>} */\n\tconst unresolved = new Map();\n\t/** @type {Map<string, T>} */\n\tconst prefixed = new Map();\n\tconst resolveContext = {\n\t\t/** @type {LazySet<string>} */\n\t\tfileDependencies: new LazySet(),\n\t\t/** @type {LazySet<string>} */\n\t\tcontextDependencies: new LazySet(),\n\t\t/** @type {LazySet<string>} */\n\t\tmissingDependencies: new LazySet()\n\t};\n\tconst resolver = compilation.resolverFactory.get(\"normal\", RESOLVE_OPTIONS);\n\tconst context = compilation.compiler.context;\n\n\treturn Promise.all(\n\t\tconfigs.map(([request, config]) => {\n\t\t\tif (/^\\.\\.?(\\/|$)/.test(request)) {\n\t\t\t\t// relative request\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tresolver.resolve(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\tif (err || result === false) {\n\t\t\t\t\t\t\t\terr = err || new Error(`Can't resolve ${request}`);\n\t\t\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\t\t\tnew ModuleNotFoundError(null, err, {\n\t\t\t\t\t\t\t\t\t\tname: `shared module ${request}`\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolved.set(result, config);\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else if (/^(\\/|[A-Za-z]:\\\\|\\\\\\\\)/.test(request)) {\n\t\t\t\t// absolute path\n\t\t\t\tresolved.set(request, config);\n\t\t\t} else if (request.endsWith(\"/\")) {\n\t\t\t\t// module request prefix\n\t\t\t\tprefixed.set(request, config);\n\t\t\t} else {\n\t\t\t\t// module request\n\t\t\t\tunresolved.set(request, config);\n\t\t\t}\n\t\t})\n\t).then(() => {\n\t\tcompilation.contextDependencies.addAll(resolveContext.contextDependencies);\n\t\tcompilation.fileDependencies.addAll(resolveContext.fileDependencies);\n\t\tcompilation.missingDependencies.addAll(resolveContext.missingDependencies);\n\t\treturn { resolved, unresolved, prefixed };\n\t});\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}