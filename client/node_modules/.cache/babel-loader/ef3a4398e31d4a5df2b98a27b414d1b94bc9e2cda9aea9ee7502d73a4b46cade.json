{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Hash = require(\"../Hash\");\nconst MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\nclass BatchedHash extends Hash {\n  constructor(hash) {\n    super();\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (typeof data === \"string\" && inputEncoding === this.encoding && this.string.length + data.length < MAX_SHORT_STRING) {\n        this.string += data;\n        return this;\n      }\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n    if (typeof data === \"string\") {\n      if (data.length < MAX_SHORT_STRING && (\n      // base64 encoding is not valid since it may contain padding chars\n      !inputEncoding || !inputEncoding.startsWith(\"ba\"))) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n    return this.hash.digest(encoding);\n  }\n}\nmodule.exports = BatchedHash;","map":{"version":3,"names":["Hash","require","MAX_SHORT_STRING","BatchedHash","constructor","hash","string","undefined","encoding","update","data","inputEncoding","length","startsWith","digest","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/util/hash/BatchedHash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Hash = require(\"../Hash\");\nconst MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\n\nclass BatchedHash extends Hash {\n\tconstructor(hash) {\n\t\tsuper();\n\t\tthis.string = undefined;\n\t\tthis.encoding = undefined;\n\t\tthis.hash = hash;\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (this.string !== undefined) {\n\t\t\tif (\n\t\t\t\ttypeof data === \"string\" &&\n\t\t\t\tinputEncoding === this.encoding &&\n\t\t\t\tthis.string.length + data.length < MAX_SHORT_STRING\n\t\t\t) {\n\t\t\t\tthis.string += data;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.hash.update(this.string, this.encoding);\n\t\t\tthis.string = undefined;\n\t\t}\n\t\tif (typeof data === \"string\") {\n\t\t\tif (\n\t\t\t\tdata.length < MAX_SHORT_STRING &&\n\t\t\t\t// base64 encoding is not valid since it may contain padding chars\n\t\t\t\t(!inputEncoding || !inputEncoding.startsWith(\"ba\"))\n\t\t\t) {\n\t\t\t\tthis.string = data;\n\t\t\t\tthis.encoding = inputEncoding;\n\t\t\t} else {\n\t\t\t\tthis.hash.update(data, inputEncoding);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.hash.update(data);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tif (this.string !== undefined) {\n\t\t\tthis.hash.update(this.string, this.encoding);\n\t\t}\n\t\treturn this.hash.digest(encoding);\n\t}\n}\n\nmodule.exports = BatchedHash;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,gBAAgB;AAEhE,MAAMC,WAAW,SAASH,IAAI,CAAC;EAC9BI,WAAWA,CAACC,IAAI,EAAE;IACjB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,MAAM,GAAGC,SAAS;IACvB,IAAI,CAACC,QAAQ,GAAGD,SAAS;IACzB,IAAI,CAACF,IAAI,GAAGA,IAAI;EACjB;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCI,MAAMA,CAACC,IAAI,EAAEC,aAAa,EAAE;IAC3B,IAAI,IAAI,CAACL,MAAM,KAAKC,SAAS,EAAE;MAC9B,IACC,OAAOG,IAAI,KAAK,QAAQ,IACxBC,aAAa,KAAK,IAAI,CAACH,QAAQ,IAC/B,IAAI,CAACF,MAAM,CAACM,MAAM,GAAGF,IAAI,CAACE,MAAM,GAAGV,gBAAgB,EAClD;QACD,IAAI,CAACI,MAAM,IAAII,IAAI;QACnB,OAAO,IAAI;MACZ;MACA,IAAI,CAACL,IAAI,CAACI,MAAM,CAAC,IAAI,CAACH,MAAM,EAAE,IAAI,CAACE,QAAQ,CAAC;MAC5C,IAAI,CAACF,MAAM,GAAGC,SAAS;IACxB;IACA,IAAI,OAAOG,IAAI,KAAK,QAAQ,EAAE;MAC7B,IACCA,IAAI,CAACE,MAAM,GAAGV,gBAAgB;MAC9B;MACC,CAACS,aAAa,IAAI,CAACA,aAAa,CAACE,UAAU,CAAC,IAAI,CAAC,CAAC,EAClD;QACD,IAAI,CAACP,MAAM,GAAGI,IAAI;QAClB,IAAI,CAACF,QAAQ,GAAGG,aAAa;MAC9B,CAAC,MAAM;QACN,IAAI,CAACN,IAAI,CAACI,MAAM,CAACC,IAAI,EAAEC,aAAa,CAAC;MACtC;IACD,CAAC,MAAM;MACN,IAAI,CAACN,IAAI,CAACI,MAAM,CAACC,IAAI,CAAC;IACvB;IACA,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACCI,MAAMA,CAACN,QAAQ,EAAE;IAChB,IAAI,IAAI,CAACF,MAAM,KAAKC,SAAS,EAAE;MAC9B,IAAI,CAACF,IAAI,CAACI,MAAM,CAAC,IAAI,CAACH,MAAM,EAAE,IAAI,CAACE,QAAQ,CAAC;IAC7C;IACA,OAAO,IAAI,CAACH,IAAI,CAACS,MAAM,CAACN,QAAQ,CAAC;EAClC;AACD;AAEAO,MAAM,CAACC,OAAO,GAAGb,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}