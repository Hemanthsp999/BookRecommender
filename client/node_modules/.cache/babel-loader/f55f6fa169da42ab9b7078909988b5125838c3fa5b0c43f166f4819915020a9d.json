{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  WEBASSEMBLY_MODULE_TYPE_SYNC\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nclass ReadFileCompileWasmPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ReadFileCompileWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"async-node\";\n      };\n      const generateLoadBinaryCode = path => Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", \"try {\", Template.indent([`readFile(join(__dirname, ${path}), function(err, buffer){`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ReadFileCompileWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === WEBASSEMBLY_MODULE_TYPE_SYNC)) {\n          return;\n        }\n        set.add(RuntimeGlobals.moduleCache);\n        compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: false,\n          mangleImports: this.options.mangleImports,\n          runtimeRequirements: set\n        }));\n      });\n    });\n  }\n}\nmodule.exports = ReadFileCompileWasmPlugin;","map":{"version":3,"names":["WEBASSEMBLY_MODULE_TYPE_SYNC","require","RuntimeGlobals","Template","WasmChunkLoadingRuntimeModule","ReadFileCompileWasmPlugin","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","asString","indent","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/node/ReadFileCompileWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { WEBASSEMBLY_MODULE_TYPE_SYNC } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nclass ReadFileCompileWasmPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ReadFileCompileWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"async-node\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\n\t\t\t\t\t\t\t\"var { join } = require('path');\",\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\"try {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"})\"\n\t\t\t\t\t]);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ReadFileCompileWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === WEBASSEMBLY_MODULE_TYPE_SYNC\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: false,\n\t\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\n\t\t\t\t\t\t\t\truntimeRequirements: set\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ReadFileCompileWasmPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAA6B,CAAC,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAC1E,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMG,6BAA6B,GAAGH,OAAO,CAAC,4CAA4C,CAAC;;AAE3F;;AAEA;;AAEA,MAAMI,yBAAyB,CAAC;EAC/BC,WAAWA,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,2BAA2B,EAC3BC,WAAW,IAAI;MACd,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAa,CAACC,WAAW;MAC/D,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;QAClC,MAAMX,OAAO,GAAGW,KAAK,CAACC,eAAe,CAAC,CAAC;QACvC,MAAMH,WAAW,GAChBT,OAAO,IAAIA,OAAO,CAACS,WAAW,KAAKI,SAAS,GACzCb,OAAO,CAACS,WAAW,GACnBF,iBAAiB;QACrB,OAAOE,WAAW,KAAK,YAAY;MACpC,CAAC;MACD,MAAMK,sBAAsB,GAAGC,IAAI,IAClCnB,QAAQ,CAACoB,QAAQ,CAAC,CACjB,0CAA0C,EAC1CpB,QAAQ,CAACqB,MAAM,CAAC,CACf,mCAAmC,EACnC,iCAAiC,EACjC,EAAE,EACF,OAAO,EACPrB,QAAQ,CAACqB,MAAM,CAAC,CACd,4BAA2BF,IAAK,2BAA0B,EAC3DnB,QAAQ,CAACqB,MAAM,CAAC,CACf,8BAA8B,EAC9B,EAAE,EACF,wBAAwB,EACxB,WAAW,EACXrB,QAAQ,CAACqB,MAAM,CAAC,CAAC,kCAAkC,CAAC,CAAC,EACrD,KAAK,CACL,CAAC,EACF,KAAK,CACL,CAAC,EACF,gCAAgC,CAChC,CAAC,EACF,IAAI,CACJ,CAAC;MAEHX,WAAW,CAACH,KAAK,CAACe,wBAAwB,CACxCC,GAAG,CAACxB,cAAc,CAACyB,mBAAmB,CAAC,CACvCf,GAAG,CAAC,2BAA2B,EAAE,CAACM,KAAK,EAAEU,GAAG,KAAK;QACjD,IAAI,CAACX,iBAAiB,CAACC,KAAK,CAAC,EAAE;QAC/B,MAAMW,UAAU,GAAGhB,WAAW,CAACgB,UAAU;QACzC,IACC,CAACA,UAAU,CAACC,gBAAgB,CAC3BZ,KAAK,EACLa,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKhC,4BACjB,CAAC,EACA;UACD;QACD;QACA4B,GAAG,CAACK,GAAG,CAAC/B,cAAc,CAACgC,WAAW,CAAC;QACnCrB,WAAW,CAACsB,gBAAgB,CAC3BjB,KAAK,EACL,IAAId,6BAA6B,CAAC;UACjCiB,sBAAsB;UACtBe,iBAAiB,EAAE,KAAK;UACxBC,aAAa,EAAE,IAAI,CAAC9B,OAAO,CAAC8B,aAAa;UACzCC,mBAAmB,EAAEV;QACtB,CAAC,CACF,CAAC;MACF,CAAC,CAAC;IACJ,CACD,CAAC;EACF;AACD;AAEAW,MAAM,CAACC,OAAO,GAAGnC,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}