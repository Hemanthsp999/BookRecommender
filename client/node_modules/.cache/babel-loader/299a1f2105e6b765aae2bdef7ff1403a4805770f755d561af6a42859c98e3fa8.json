{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst CONTINUATION_BIT = 0x20;\nconst END_SEGMENT_BIT = 0x40;\nconst NEXT_LINE = END_SEGMENT_BIT | 0x01;\nconst INVALID = END_SEGMENT_BIT | 0x02;\nconst DATA_MASK = 0x1f;\nconst ccToValue = new Uint8Array(\"z\".charCodeAt(0) + 1);\n{\n  ccToValue.fill(INVALID);\n  for (let i = 0; i < ALPHABET.length; i++) {\n    ccToValue[ALPHABET.charCodeAt(i)] = i;\n  }\n  ccToValue[\",\".charCodeAt(0)] = END_SEGMENT_BIT;\n  ccToValue[\";\".charCodeAt(0)] = NEXT_LINE;\n}\nconst ccMax = ccToValue.length - 1;\n\n/**\n * @param {string} mappings the mappings string\n * @param {function(number, number, number, number, number, number): void} onMapping called for each mapping\n * @returns {void}\n */\nconst readMappings = (mappings, onMapping) => {\n  // generatedColumn, [sourceIndex, originalLine, orignalColumn, [nameIndex]]\n  const currentData = new Uint32Array([0, 0, 1, 0, 0]);\n  let currentDataPos = 0;\n  // currentValue will include a sign bit at bit 0\n  let currentValue = 0;\n  let currentValuePos = 0;\n  let generatedLine = 1;\n  let generatedColumn = -1;\n  for (let i = 0; i < mappings.length; i++) {\n    const cc = mappings.charCodeAt(i);\n    if (cc > ccMax) continue;\n    const value = ccToValue[cc];\n    if ((value & END_SEGMENT_BIT) !== 0) {\n      // End current segment\n      if (currentData[0] > generatedColumn) {\n        if (currentDataPos === 1) {\n          onMapping(generatedLine, currentData[0], -1, -1, -1, -1);\n        } else if (currentDataPos === 4) {\n          onMapping(generatedLine, currentData[0], currentData[1], currentData[2], currentData[3], -1);\n        } else if (currentDataPos === 5) {\n          onMapping(generatedLine, currentData[0], currentData[1], currentData[2], currentData[3], currentData[4]);\n        }\n        generatedColumn = currentData[0];\n      }\n      currentDataPos = 0;\n      if (value === NEXT_LINE) {\n        // Start new line\n        generatedLine++;\n        currentData[0] = 0;\n        generatedColumn = -1;\n      }\n    } else if ((value & CONTINUATION_BIT) === 0) {\n      // last sextet\n      currentValue |= value << currentValuePos;\n      const finalValue = currentValue & 1 ? -(currentValue >> 1) : currentValue >> 1;\n      currentData[currentDataPos++] += finalValue;\n      currentValuePos = 0;\n      currentValue = 0;\n    } else {\n      currentValue |= (value & DATA_MASK) << currentValuePos;\n      currentValuePos += 5;\n    }\n  }\n  // End current segment\n  if (currentDataPos === 1) {\n    onMapping(generatedLine, currentData[0], -1, -1, -1, -1);\n  } else if (currentDataPos === 4) {\n    onMapping(generatedLine, currentData[0], currentData[1], currentData[2], currentData[3], -1);\n  } else if (currentDataPos === 5) {\n    onMapping(generatedLine, currentData[0], currentData[1], currentData[2], currentData[3], currentData[4]);\n  }\n};\nmodule.exports = readMappings;","map":{"version":3,"names":["ALPHABET","CONTINUATION_BIT","END_SEGMENT_BIT","NEXT_LINE","INVALID","DATA_MASK","ccToValue","Uint8Array","charCodeAt","fill","i","length","ccMax","readMappings","mappings","onMapping","currentData","Uint32Array","currentDataPos","currentValue","currentValuePos","generatedLine","generatedColumn","cc","value","finalValue","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack-sources/lib/helpers/readMappings.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ALPHABET =\n\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nconst CONTINUATION_BIT = 0x20;\nconst END_SEGMENT_BIT = 0x40;\nconst NEXT_LINE = END_SEGMENT_BIT | 0x01;\nconst INVALID = END_SEGMENT_BIT | 0x02;\nconst DATA_MASK = 0x1f;\n\nconst ccToValue = new Uint8Array(\"z\".charCodeAt(0) + 1);\n{\n\tccToValue.fill(INVALID);\n\tfor (let i = 0; i < ALPHABET.length; i++) {\n\t\tccToValue[ALPHABET.charCodeAt(i)] = i;\n\t}\n\tccToValue[\",\".charCodeAt(0)] = END_SEGMENT_BIT;\n\tccToValue[\";\".charCodeAt(0)] = NEXT_LINE;\n}\nconst ccMax = ccToValue.length - 1;\n\n/**\n * @param {string} mappings the mappings string\n * @param {function(number, number, number, number, number, number): void} onMapping called for each mapping\n * @returns {void}\n */\nconst readMappings = (mappings, onMapping) => {\n\t// generatedColumn, [sourceIndex, originalLine, orignalColumn, [nameIndex]]\n\tconst currentData = new Uint32Array([0, 0, 1, 0, 0]);\n\tlet currentDataPos = 0;\n\t// currentValue will include a sign bit at bit 0\n\tlet currentValue = 0;\n\tlet currentValuePos = 0;\n\tlet generatedLine = 1;\n\tlet generatedColumn = -1;\n\tfor (let i = 0; i < mappings.length; i++) {\n\t\tconst cc = mappings.charCodeAt(i);\n\t\tif (cc > ccMax) continue;\n\t\tconst value = ccToValue[cc];\n\t\tif ((value & END_SEGMENT_BIT) !== 0) {\n\t\t\t// End current segment\n\t\t\tif (currentData[0] > generatedColumn) {\n\t\t\t\tif (currentDataPos === 1) {\n\t\t\t\t\tonMapping(generatedLine, currentData[0], -1, -1, -1, -1);\n\t\t\t\t} else if (currentDataPos === 4) {\n\t\t\t\t\tonMapping(\n\t\t\t\t\t\tgeneratedLine,\n\t\t\t\t\t\tcurrentData[0],\n\t\t\t\t\t\tcurrentData[1],\n\t\t\t\t\t\tcurrentData[2],\n\t\t\t\t\t\tcurrentData[3],\n\t\t\t\t\t\t-1\n\t\t\t\t\t);\n\t\t\t\t} else if (currentDataPos === 5) {\n\t\t\t\t\tonMapping(\n\t\t\t\t\t\tgeneratedLine,\n\t\t\t\t\t\tcurrentData[0],\n\t\t\t\t\t\tcurrentData[1],\n\t\t\t\t\t\tcurrentData[2],\n\t\t\t\t\t\tcurrentData[3],\n\t\t\t\t\t\tcurrentData[4]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tgeneratedColumn = currentData[0];\n\t\t\t}\n\t\t\tcurrentDataPos = 0;\n\t\t\tif (value === NEXT_LINE) {\n\t\t\t\t// Start new line\n\t\t\t\tgeneratedLine++;\n\t\t\t\tcurrentData[0] = 0;\n\t\t\t\tgeneratedColumn = -1;\n\t\t\t}\n\t\t} else if ((value & CONTINUATION_BIT) === 0) {\n\t\t\t// last sextet\n\t\t\tcurrentValue |= value << currentValuePos;\n\t\t\tconst finalValue =\n\t\t\t\tcurrentValue & 1 ? -(currentValue >> 1) : currentValue >> 1;\n\t\t\tcurrentData[currentDataPos++] += finalValue;\n\t\t\tcurrentValuePos = 0;\n\t\t\tcurrentValue = 0;\n\t\t} else {\n\t\t\tcurrentValue |= (value & DATA_MASK) << currentValuePos;\n\t\t\tcurrentValuePos += 5;\n\t\t}\n\t}\n\t// End current segment\n\tif (currentDataPos === 1) {\n\t\tonMapping(generatedLine, currentData[0], -1, -1, -1, -1);\n\t} else if (currentDataPos === 4) {\n\t\tonMapping(\n\t\t\tgeneratedLine,\n\t\t\tcurrentData[0],\n\t\t\tcurrentData[1],\n\t\t\tcurrentData[2],\n\t\t\tcurrentData[3],\n\t\t\t-1\n\t\t);\n\t} else if (currentDataPos === 5) {\n\t\tonMapping(\n\t\t\tgeneratedLine,\n\t\t\tcurrentData[0],\n\t\t\tcurrentData[1],\n\t\t\tcurrentData[2],\n\t\t\tcurrentData[3],\n\t\t\tcurrentData[4]\n\t\t);\n\t}\n};\n\nmodule.exports = readMappings;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}