{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass PrefetchPlugin {\n  /**\n   * @param {string} context context or request if context is not set\n   * @param {string} [request] request\n   */\n  constructor(context, request) {\n    if (request) {\n      this.context = context;\n      this.request = request;\n    } else {\n      this.context = null;\n      this.request = context;\n    }\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"PrefetchPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n    });\n    compiler.hooks.make.tapAsync(\"PrefetchPlugin\", (compilation, callback) => {\n      compilation.addModuleChain(this.context || compiler.context, new PrefetchDependency(this.request), err => {\n        callback(err);\n      });\n    });\n  }\n}\nmodule.exports = PrefetchPlugin;","map":{"version":3,"names":["PrefetchDependency","require","PrefetchPlugin","constructor","context","request","apply","compiler","hooks","compilation","tap","_ref","normalModuleFactory","dependencyFactories","set","make","tapAsync","callback","addModuleChain","err","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/PrefetchPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass PrefetchPlugin {\n\t/**\n\t * @param {string} context context or request if context is not set\n\t * @param {string} [request] request\n\t */\n\tconstructor(context, request) {\n\t\tif (request) {\n\t\t\tthis.context = context;\n\t\t\tthis.request = request;\n\t\t} else {\n\t\t\tthis.context = null;\n\t\t\tthis.request = context;\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"PrefetchPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tPrefetchDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\tcompiler.hooks.make.tapAsync(\"PrefetchPlugin\", (compilation, callback) => {\n\t\t\tcompilation.addModuleChain(\n\t\t\t\tthis.context || compiler.context,\n\t\t\t\tnew PrefetchDependency(this.request),\n\t\t\t\terr => {\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = PrefetchPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,mCAAmC,CAAC;;AAEvE;;AAEA,MAAMC,cAAc,CAAC;EACpB;AACD;AACA;AACA;EACCC,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;IAC7B,IAAIA,OAAO,EAAE;MACZ,IAAI,CAACD,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACvB,CAAC,MAAM;MACN,IAAI,CAACD,OAAO,GAAG,IAAI;MACnB,IAAI,CAACC,OAAO,GAAGD,OAAO;IACvB;EACD;;EAEA;AACD;AACA;AACA;AACA;EACCE,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,gBAAgB,EAChB,CAACD,WAAW,EAAAE,IAAA,KAA8B;MAAA,IAA5B;QAAEC;MAAoB,CAAC,GAAAD,IAAA;MACpCF,WAAW,CAACI,mBAAmB,CAACC,GAAG,CAClCd,kBAAkB,EAClBY,mBACD,CAAC;IACF,CACD,CAAC;IACDL,QAAQ,CAACC,KAAK,CAACO,IAAI,CAACC,QAAQ,CAAC,gBAAgB,EAAE,CAACP,WAAW,EAAEQ,QAAQ,KAAK;MACzER,WAAW,CAACS,cAAc,CACzB,IAAI,CAACd,OAAO,IAAIG,QAAQ,CAACH,OAAO,EAChC,IAAIJ,kBAAkB,CAAC,IAAI,CAACK,OAAO,CAAC,EACpCc,GAAG,IAAI;QACNF,QAAQ,CAACE,GAAG,CAAC;MACd,CACD,CAAC;IACF,CAAC,CAAC;EACH;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGnB,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}