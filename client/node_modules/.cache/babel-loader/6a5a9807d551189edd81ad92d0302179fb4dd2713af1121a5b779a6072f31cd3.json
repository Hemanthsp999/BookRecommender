{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").AssetParserOptions} AssetParserOptions */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nclass AssetParser extends Parser {\n  /**\n   * @param {AssetParserOptions[\"dataUrlCondition\"] | boolean} dataUrlCondition condition for inlining as DataUrl\n   */\n  constructor(dataUrlCondition) {\n    super();\n    this.dataUrlCondition = dataUrlCondition;\n  }\n\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  parse(source, state) {\n    if (typeof source === \"object\" && !Buffer.isBuffer(source)) {\n      throw new Error(\"AssetParser doesn't accept preparsed AST\");\n    }\n    state.module.buildInfo.strict = true;\n    state.module.buildMeta.exportsType = \"default\";\n    state.module.buildMeta.defaultObject = false;\n    if (typeof this.dataUrlCondition === \"function\") {\n      state.module.buildInfo.dataUrl = this.dataUrlCondition(source, {\n        filename: state.module.matchResource || state.module.resource,\n        module: state.module\n      });\n    } else if (typeof this.dataUrlCondition === \"boolean\") {\n      state.module.buildInfo.dataUrl = this.dataUrlCondition;\n    } else if (this.dataUrlCondition && typeof this.dataUrlCondition === \"object\") {\n      state.module.buildInfo.dataUrl = Buffer.byteLength(source) <= this.dataUrlCondition.maxSize;\n    } else {\n      throw new Error(\"Unexpected dataUrlCondition type\");\n    }\n    return state;\n  }\n}\nmodule.exports = AssetParser;","map":{"version":3,"names":["Parser","require","AssetParser","constructor","dataUrlCondition","parse","source","state","Buffer","isBuffer","Error","module","buildInfo","strict","buildMeta","exportsType","defaultObject","dataUrl","filename","matchResource","resource","byteLength","maxSize","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/asset/AssetParser.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").AssetParserOptions} AssetParserOptions */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nclass AssetParser extends Parser {\n\t/**\n\t * @param {AssetParserOptions[\"dataUrlCondition\"] | boolean} dataUrlCondition condition for inlining as DataUrl\n\t */\n\tconstructor(dataUrlCondition) {\n\t\tsuper();\n\t\tthis.dataUrlCondition = dataUrlCondition;\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (typeof source === \"object\" && !Buffer.isBuffer(source)) {\n\t\t\tthrow new Error(\"AssetParser doesn't accept preparsed AST\");\n\t\t}\n\t\tstate.module.buildInfo.strict = true;\n\t\tstate.module.buildMeta.exportsType = \"default\";\n\t\tstate.module.buildMeta.defaultObject = false;\n\n\t\tif (typeof this.dataUrlCondition === \"function\") {\n\t\t\tstate.module.buildInfo.dataUrl = this.dataUrlCondition(source, {\n\t\t\t\tfilename: state.module.matchResource || state.module.resource,\n\t\t\t\tmodule: state.module\n\t\t\t});\n\t\t} else if (typeof this.dataUrlCondition === \"boolean\") {\n\t\t\tstate.module.buildInfo.dataUrl = this.dataUrlCondition;\n\t\t} else if (\n\t\t\tthis.dataUrlCondition &&\n\t\t\ttypeof this.dataUrlCondition === \"object\"\n\t\t) {\n\t\t\tstate.module.buildInfo.dataUrl =\n\t\t\t\tBuffer.byteLength(source) <= this.dataUrlCondition.maxSize;\n\t\t} else {\n\t\t\tthrow new Error(\"Unexpected dataUrlCondition type\");\n\t\t}\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = AssetParser;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAEnC;AACA;AACA;;AAEA,MAAMC,WAAW,SAASF,MAAM,CAAC;EAChC;AACD;AACA;EACCG,WAAWA,CAACC,gBAAgB,EAAE;IAC7B,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;EACzC;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACpB,IAAI,OAAOD,MAAM,KAAK,QAAQ,IAAI,CAACE,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC3D,MAAM,IAAII,KAAK,CAAC,0CAA0C,CAAC;IAC5D;IACAH,KAAK,CAACI,MAAM,CAACC,SAAS,CAACC,MAAM,GAAG,IAAI;IACpCN,KAAK,CAACI,MAAM,CAACG,SAAS,CAACC,WAAW,GAAG,SAAS;IAC9CR,KAAK,CAACI,MAAM,CAACG,SAAS,CAACE,aAAa,GAAG,KAAK;IAE5C,IAAI,OAAO,IAAI,CAACZ,gBAAgB,KAAK,UAAU,EAAE;MAChDG,KAAK,CAACI,MAAM,CAACC,SAAS,CAACK,OAAO,GAAG,IAAI,CAACb,gBAAgB,CAACE,MAAM,EAAE;QAC9DY,QAAQ,EAAEX,KAAK,CAACI,MAAM,CAACQ,aAAa,IAAIZ,KAAK,CAACI,MAAM,CAACS,QAAQ;QAC7DT,MAAM,EAAEJ,KAAK,CAACI;MACf,CAAC,CAAC;IACH,CAAC,MAAM,IAAI,OAAO,IAAI,CAACP,gBAAgB,KAAK,SAAS,EAAE;MACtDG,KAAK,CAACI,MAAM,CAACC,SAAS,CAACK,OAAO,GAAG,IAAI,CAACb,gBAAgB;IACvD,CAAC,MAAM,IACN,IAAI,CAACA,gBAAgB,IACrB,OAAO,IAAI,CAACA,gBAAgB,KAAK,QAAQ,EACxC;MACDG,KAAK,CAACI,MAAM,CAACC,SAAS,CAACK,OAAO,GAC7BT,MAAM,CAACa,UAAU,CAACf,MAAM,CAAC,IAAI,IAAI,CAACF,gBAAgB,CAACkB,OAAO;IAC5D,CAAC,MAAM;MACN,MAAM,IAAIZ,KAAK,CAAC,kCAAkC,CAAC;IACpD;IAEA,OAAOH,KAAK;EACb;AACD;AAEAI,MAAM,CAACY,OAAO,GAAGrB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}