{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").JsonObject} JsonObject */\n/** @typedef {import(\"./Resolver\").JsonValue} JsonValue */\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/**\n * @typedef {Object} DescriptionFileInfo\n * @property {JsonObject=} content\n * @property {string} path\n * @property {string} directory\n */\n\n/**\n * @callback ErrorFirstCallback\n * @param {Error|null=} error\n * @param {DescriptionFileInfo=} result\n */\n\n/**\n * @typedef {Object} Result\n * @property {string} path path to description file\n * @property {string} directory directory of description file\n * @property {JsonObject} content content of description file\n */\n\n/**\n * @param {Resolver} resolver resolver\n * @param {string} directory directory\n * @param {string[]} filenames filenames\n * @param {DescriptionFileInfo|undefined} oldInfo oldInfo\n * @param {ResolveContext} resolveContext resolveContext\n * @param {ErrorFirstCallback} callback callback\n */\nfunction loadDescriptionFile(resolver, directory, filenames, oldInfo, resolveContext, callback) {\n  (function findDescriptionFile() {\n    if (oldInfo && oldInfo.directory === directory) {\n      // We already have info for this directory and can reuse it\n      return callback(null, oldInfo);\n    }\n    forEachBail(filenames,\n    /**\n     * @param {string} filename filename\n     * @param {(err?: null|Error, result?: null|Result) => void} callback callback\n     * @returns {void}\n     */\n    (filename, callback) => {\n      const descriptionFilePath = resolver.join(directory, filename);\n      if (resolver.fileSystem.readJson) {\n        resolver.fileSystem.readJson(descriptionFilePath, (err, content) => {\n          if (err) {\n            if (typeof err.code !== \"undefined\") {\n              if (resolveContext.missingDependencies) {\n                resolveContext.missingDependencies.add(descriptionFilePath);\n              }\n              return callback();\n            }\n            if (resolveContext.fileDependencies) {\n              resolveContext.fileDependencies.add(descriptionFilePath);\n            }\n            return onJson(err);\n          }\n          if (resolveContext.fileDependencies) {\n            resolveContext.fileDependencies.add(descriptionFilePath);\n          }\n          onJson(null, /** @type {JsonObject} */content);\n        });\n      } else {\n        resolver.fileSystem.readFile(descriptionFilePath, (err, content) => {\n          if (err) {\n            if (resolveContext.missingDependencies) {\n              resolveContext.missingDependencies.add(descriptionFilePath);\n            }\n            return callback();\n          }\n          if (resolveContext.fileDependencies) {\n            resolveContext.fileDependencies.add(descriptionFilePath);\n          }\n\n          /** @type {JsonObject | undefined} */\n          let json;\n          if (content) {\n            try {\n              json = JSON.parse(content.toString());\n            } catch ( /** @type {unknown} */e) {\n              return onJson( /** @type {Error} */e);\n            }\n          } else {\n            return onJson(new Error(\"No content in file\"));\n          }\n          onJson(null, json);\n        });\n      }\n\n      /**\n       * @param {null|Error} [err] error\n       * @param {JsonObject} [content] content\n       * @returns {void}\n       */\n      function onJson(err, content) {\n        if (err) {\n          if (resolveContext.log) resolveContext.log(descriptionFilePath + \" (directory description file): \" + err);else err.message = descriptionFilePath + \" (directory description file): \" + err;\n          return callback(err);\n        }\n        callback(null, {\n          content: /** @type {JsonObject} */content,\n          directory,\n          path: descriptionFilePath\n        });\n      }\n    },\n    /**\n     * @param {null|Error} [err] error\n     * @param {null|Result} [result] result\n     * @returns {void}\n     */\n    (err, result) => {\n      if (err) return callback(err);\n      if (result) {\n        return callback(null, result);\n      } else {\n        const dir = cdUp(directory);\n        if (!dir) {\n          return callback();\n        } else {\n          directory = dir;\n          return findDescriptionFile();\n        }\n      }\n    });\n  })();\n}\n\n/**\n * @param {JsonObject} content content\n * @param {string|string[]} field field\n * @returns {JsonValue | undefined} field data\n */\nfunction getField(content, field) {\n  if (!content) return undefined;\n  if (Array.isArray(field)) {\n    /** @type {JsonValue} */\n    let current = content;\n    for (let j = 0; j < field.length; j++) {\n      if (current === null || typeof current !== \"object\") {\n        current = null;\n        break;\n      }\n      current = /** @type {JsonObject} */current[field[j]];\n    }\n    return current;\n  } else {\n    return content[field];\n  }\n}\n\n/**\n * @param {string} directory directory\n * @returns {string|null} parent directory or null\n */\nfunction cdUp(directory) {\n  if (directory === \"/\") return null;\n  const i = directory.lastIndexOf(\"/\"),\n    j = directory.lastIndexOf(\"\\\\\");\n  const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n  if (p < 0) return null;\n  return directory.slice(0, p || 1);\n}\nexports.loadDescriptionFile = loadDescriptionFile;\nexports.getField = getField;\nexports.cdUp = cdUp;","map":{"version":3,"names":["forEachBail","require","loadDescriptionFile","resolver","directory","filenames","oldInfo","resolveContext","callback","findDescriptionFile","filename","descriptionFilePath","join","fileSystem","readJson","err","content","code","missingDependencies","add","fileDependencies","onJson","readFile","json","JSON","parse","toString","e","Error","log","message","path","result","dir","cdUp","getField","field","undefined","Array","isArray","current","j","length","i","lastIndexOf","p","slice","exports"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/DescriptionFileUtils.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").JsonObject} JsonObject */\n/** @typedef {import(\"./Resolver\").JsonValue} JsonValue */\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/**\n * @typedef {Object} DescriptionFileInfo\n * @property {JsonObject=} content\n * @property {string} path\n * @property {string} directory\n */\n\n/**\n * @callback ErrorFirstCallback\n * @param {Error|null=} error\n * @param {DescriptionFileInfo=} result\n */\n\n/**\n * @typedef {Object} Result\n * @property {string} path path to description file\n * @property {string} directory directory of description file\n * @property {JsonObject} content content of description file\n */\n\n/**\n * @param {Resolver} resolver resolver\n * @param {string} directory directory\n * @param {string[]} filenames filenames\n * @param {DescriptionFileInfo|undefined} oldInfo oldInfo\n * @param {ResolveContext} resolveContext resolveContext\n * @param {ErrorFirstCallback} callback callback\n */\nfunction loadDescriptionFile(\n\tresolver,\n\tdirectory,\n\tfilenames,\n\toldInfo,\n\tresolveContext,\n\tcallback\n) {\n\t(function findDescriptionFile() {\n\t\tif (oldInfo && oldInfo.directory === directory) {\n\t\t\t// We already have info for this directory and can reuse it\n\t\t\treturn callback(null, oldInfo);\n\t\t}\n\t\tforEachBail(\n\t\t\tfilenames,\n\t\t\t/**\n\t\t\t * @param {string} filename filename\n\t\t\t * @param {(err?: null|Error, result?: null|Result) => void} callback callback\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\t(filename, callback) => {\n\t\t\t\tconst descriptionFilePath = resolver.join(directory, filename);\n\t\t\t\tif (resolver.fileSystem.readJson) {\n\t\t\t\t\tresolver.fileSystem.readJson(descriptionFilePath, (err, content) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (typeof err.code !== \"undefined\") {\n\t\t\t\t\t\t\t\tif (resolveContext.missingDependencies) {\n\t\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn onJson(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonJson(null, /** @type {JsonObject} */ (content));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresolver.fileSystem.readFile(descriptionFilePath, (err, content) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies) {\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {JsonObject | undefined} */\n\t\t\t\t\t\tlet json;\n\n\t\t\t\t\t\tif (content) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tjson = JSON.parse(content.toString());\n\t\t\t\t\t\t\t} catch (/** @type {unknown} */ e) {\n\t\t\t\t\t\t\t\treturn onJson(/** @type {Error} */ (e));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn onJson(new Error(\"No content in file\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tonJson(null, json);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * @param {null|Error} [err] error\n\t\t\t\t * @param {JsonObject} [content] content\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\tfunction onJson(err, content) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\tdescriptionFilePath + \" (directory description file): \" + err\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\terr.message =\n\t\t\t\t\t\t\t\tdescriptionFilePath + \" (directory description file): \" + err;\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\tcontent: /** @type {JsonObject} */ (content),\n\t\t\t\t\t\tdirectory,\n\t\t\t\t\t\tpath: descriptionFilePath\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * @param {null|Error} [err] error\n\t\t\t * @param {null|Result} [result] result\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\t(err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t} else {\n\t\t\t\t\tconst dir = cdUp(directory);\n\t\t\t\t\tif (!dir) {\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdirectory = dir;\n\t\t\t\t\t\treturn findDescriptionFile();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t})();\n}\n\n/**\n * @param {JsonObject} content content\n * @param {string|string[]} field field\n * @returns {JsonValue | undefined} field data\n */\nfunction getField(content, field) {\n\tif (!content) return undefined;\n\tif (Array.isArray(field)) {\n\t\t/** @type {JsonValue} */\n\t\tlet current = content;\n\t\tfor (let j = 0; j < field.length; j++) {\n\t\t\tif (current === null || typeof current !== \"object\") {\n\t\t\t\tcurrent = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = /** @type {JsonObject} */ (current)[field[j]];\n\t\t}\n\t\treturn current;\n\t} else {\n\t\treturn content[field];\n\t}\n}\n\n/**\n * @param {string} directory directory\n * @returns {string|null} parent directory or null\n */\nfunction cdUp(directory) {\n\tif (directory === \"/\") return null;\n\tconst i = directory.lastIndexOf(\"/\"),\n\t\tj = directory.lastIndexOf(\"\\\\\");\n\tconst p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n\tif (p < 0) return null;\n\treturn directory.slice(0, p || 1);\n}\n\nexports.loadDescriptionFile = loadDescriptionFile;\nexports.getField = getField;\nexports.cdUp = cdUp;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAC3BC,QAAQ,EACRC,SAAS,EACTC,SAAS,EACTC,OAAO,EACPC,cAAc,EACdC,QAAQ,EACP;EACD,CAAC,SAASC,mBAAmBA,CAAA,EAAG;IAC/B,IAAIH,OAAO,IAAIA,OAAO,CAACF,SAAS,KAAKA,SAAS,EAAE;MAC/C;MACA,OAAOI,QAAQ,CAAC,IAAI,EAAEF,OAAO,CAAC;IAC/B;IACAN,WAAW,CACVK,SAAS;IACT;AACH;AACA;AACA;AACA;IACG,CAACK,QAAQ,EAAEF,QAAQ,KAAK;MACvB,MAAMG,mBAAmB,GAAGR,QAAQ,CAACS,IAAI,CAACR,SAAS,EAAEM,QAAQ,CAAC;MAC9D,IAAIP,QAAQ,CAACU,UAAU,CAACC,QAAQ,EAAE;QACjCX,QAAQ,CAACU,UAAU,CAACC,QAAQ,CAACH,mBAAmB,EAAE,CAACI,GAAG,EAAEC,OAAO,KAAK;UACnE,IAAID,GAAG,EAAE;YACR,IAAI,OAAOA,GAAG,CAACE,IAAI,KAAK,WAAW,EAAE;cACpC,IAAIV,cAAc,CAACW,mBAAmB,EAAE;gBACvCX,cAAc,CAACW,mBAAmB,CAACC,GAAG,CAACR,mBAAmB,CAAC;cAC5D;cACA,OAAOH,QAAQ,CAAC,CAAC;YAClB;YACA,IAAID,cAAc,CAACa,gBAAgB,EAAE;cACpCb,cAAc,CAACa,gBAAgB,CAACD,GAAG,CAACR,mBAAmB,CAAC;YACzD;YACA,OAAOU,MAAM,CAACN,GAAG,CAAC;UACnB;UACA,IAAIR,cAAc,CAACa,gBAAgB,EAAE;YACpCb,cAAc,CAACa,gBAAgB,CAACD,GAAG,CAACR,mBAAmB,CAAC;UACzD;UACAU,MAAM,CAAC,IAAI,EAAE,yBAA2BL,OAAQ,CAAC;QAClD,CAAC,CAAC;MACH,CAAC,MAAM;QACNb,QAAQ,CAACU,UAAU,CAACS,QAAQ,CAACX,mBAAmB,EAAE,CAACI,GAAG,EAAEC,OAAO,KAAK;UACnE,IAAID,GAAG,EAAE;YACR,IAAIR,cAAc,CAACW,mBAAmB,EAAE;cACvCX,cAAc,CAACW,mBAAmB,CAACC,GAAG,CAACR,mBAAmB,CAAC;YAC5D;YACA,OAAOH,QAAQ,CAAC,CAAC;UAClB;UACA,IAAID,cAAc,CAACa,gBAAgB,EAAE;YACpCb,cAAc,CAACa,gBAAgB,CAACD,GAAG,CAACR,mBAAmB,CAAC;UACzD;;UAEA;UACA,IAAIY,IAAI;UAER,IAAIP,OAAO,EAAE;YACZ,IAAI;cACHO,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACT,OAAO,CAACU,QAAQ,CAAC,CAAC,CAAC;YACtC,CAAC,CAAC,QAAO,sBAAuBC,CAAC,EAAE;cAClC,OAAON,MAAM,EAAC,oBAAsBM,CAAE,CAAC;YACxC;UACD,CAAC,MAAM;YACN,OAAON,MAAM,CAAC,IAAIO,KAAK,CAAC,oBAAoB,CAAC,CAAC;UAC/C;UAEAP,MAAM,CAAC,IAAI,EAAEE,IAAI,CAAC;QACnB,CAAC,CAAC;MACH;;MAEA;AACJ;AACA;AACA;AACA;MACI,SAASF,MAAMA,CAACN,GAAG,EAAEC,OAAO,EAAE;QAC7B,IAAID,GAAG,EAAE;UACR,IAAIR,cAAc,CAACsB,GAAG,EACrBtB,cAAc,CAACsB,GAAG,CACjBlB,mBAAmB,GAAG,iCAAiC,GAAGI,GAC3D,CAAC,CAAC,KAEFA,GAAG,CAACe,OAAO,GACVnB,mBAAmB,GAAG,iCAAiC,GAAGI,GAAG;UAC/D,OAAOP,QAAQ,CAACO,GAAG,CAAC;QACrB;QACAP,QAAQ,CAAC,IAAI,EAAE;UACdQ,OAAO,EAAE,yBAA2BA,OAAQ;UAC5CZ,SAAS;UACT2B,IAAI,EAAEpB;QACP,CAAC,CAAC;MACH;IACD,CAAC;IACD;AACH;AACA;AACA;AACA;IACG,CAACI,GAAG,EAAEiB,MAAM,KAAK;MAChB,IAAIjB,GAAG,EAAE,OAAOP,QAAQ,CAACO,GAAG,CAAC;MAC7B,IAAIiB,MAAM,EAAE;QACX,OAAOxB,QAAQ,CAAC,IAAI,EAAEwB,MAAM,CAAC;MAC9B,CAAC,MAAM;QACN,MAAMC,GAAG,GAAGC,IAAI,CAAC9B,SAAS,CAAC;QAC3B,IAAI,CAAC6B,GAAG,EAAE;UACT,OAAOzB,QAAQ,CAAC,CAAC;QAClB,CAAC,MAAM;UACNJ,SAAS,GAAG6B,GAAG;UACf,OAAOxB,mBAAmB,CAAC,CAAC;QAC7B;MACD;IACD,CACD,CAAC;EACF,CAAC,EAAE,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS0B,QAAQA,CAACnB,OAAO,EAAEoB,KAAK,EAAE;EACjC,IAAI,CAACpB,OAAO,EAAE,OAAOqB,SAAS;EAC9B,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;IACzB;IACA,IAAII,OAAO,GAAGxB,OAAO;IACrB,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAID,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;QACpDA,OAAO,GAAG,IAAI;QACd;MACD;MACAA,OAAO,GAAG,yBAA2BA,OAAO,CAAEJ,KAAK,CAACK,CAAC,CAAC,CAAC;IACxD;IACA,OAAOD,OAAO;EACf,CAAC,MAAM;IACN,OAAOxB,OAAO,CAACoB,KAAK,CAAC;EACtB;AACD;;AAEA;AACA;AACA;AACA;AACA,SAASF,IAAIA,CAAC9B,SAAS,EAAE;EACxB,IAAIA,SAAS,KAAK,GAAG,EAAE,OAAO,IAAI;EAClC,MAAMuC,CAAC,GAAGvC,SAAS,CAACwC,WAAW,CAAC,GAAG,CAAC;IACnCH,CAAC,GAAGrC,SAAS,CAACwC,WAAW,CAAC,IAAI,CAAC;EAChC,MAAMC,CAAC,GAAGF,CAAC,GAAG,CAAC,GAAGF,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGE,CAAC,GAAGA,CAAC,GAAGF,CAAC,GAAGA,CAAC,GAAGE,CAAC;EAC/C,IAAIE,CAAC,GAAG,CAAC,EAAE,OAAO,IAAI;EACtB,OAAOzC,SAAS,CAAC0C,KAAK,CAAC,CAAC,EAAED,CAAC,IAAI,CAAC,CAAC;AAClC;AAEAE,OAAO,CAAC7C,mBAAmB,GAAGA,mBAAmB;AACjD6C,OAAO,CAACZ,QAAQ,GAAGA,QAAQ;AAC3BY,OAAO,CAACb,IAAI,GAAGA,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}