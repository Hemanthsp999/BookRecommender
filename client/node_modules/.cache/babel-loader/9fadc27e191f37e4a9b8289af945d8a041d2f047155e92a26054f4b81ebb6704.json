{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\n/** @template T @typedef {function(): T} FunctionReturning */\n\n/**\n * @template T\n * @param {FunctionReturning<T>} fn memorized function\n * @returns {FunctionReturning<T>} new function\n */\nconst memoize = fn => {\n  let cache = false;\n  /** @type {T} */\n  let result = undefined;\n  return () => {\n    if (cache) {\n      return result;\n    } else {\n      result = fn();\n      cache = true;\n      // Allow to clean up memory for fn\n      // and all dependent resources\n      fn = undefined;\n      return result;\n    }\n  };\n};\nmodule.exports = memoize;","map":{"version":3,"names":["memoize","fn","cache","result","undefined","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/util/memoize.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\n/** @template T @typedef {function(): T} FunctionReturning */\n\n/**\n * @template T\n * @param {FunctionReturning<T>} fn memorized function\n * @returns {FunctionReturning<T>} new function\n */\nconst memoize = fn => {\n\tlet cache = false;\n\t/** @type {T} */\n\tlet result = undefined;\n\treturn () => {\n\t\tif (cache) {\n\t\t\treturn result;\n\t\t} else {\n\t\t\tresult = fn();\n\t\t\tcache = true;\n\t\t\t// Allow to clean up memory for fn\n\t\t\t// and all dependent resources\n\t\t\tfn = undefined;\n\t\t\treturn result;\n\t\t}\n\t};\n};\n\nmodule.exports = memoize;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAO,GAAGC,EAAE,IAAI;EACrB,IAAIC,KAAK,GAAG,KAAK;EACjB;EACA,IAAIC,MAAM,GAAGC,SAAS;EACtB,OAAO,MAAM;IACZ,IAAIF,KAAK,EAAE;MACV,OAAOC,MAAM;IACd,CAAC,MAAM;MACNA,MAAM,GAAGF,EAAE,CAAC,CAAC;MACbC,KAAK,GAAG,IAAI;MACZ;MACA;MACAD,EAAE,GAAGG,SAAS;MACd,OAAOD,MAAM;IACd;EACD,CAAC;AACF,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGN,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}