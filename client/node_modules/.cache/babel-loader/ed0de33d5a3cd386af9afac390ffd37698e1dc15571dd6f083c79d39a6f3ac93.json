{"ast":null,"code":"const splitIntoLines = str => {\n  const results = [];\n  const len = str.length;\n  let i = 0;\n  for (; i < len;) {\n    const cc = str.charCodeAt(i);\n    // 10 is \"\\n\".charCodeAt(0)\n    if (cc === 10) {\n      results.push(\"\\n\");\n      i++;\n    } else {\n      let j = i + 1;\n      // 10 is \"\\n\".charCodeAt(0)\n      while (j < len && str.charCodeAt(j) !== 10) j++;\n      results.push(str.slice(i, j + 1));\n      i = j + 1;\n    }\n  }\n  return results;\n};\nmodule.exports = splitIntoLines;","map":{"version":3,"names":["splitIntoLines","str","results","len","length","i","cc","charCodeAt","push","j","slice","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack-sources/lib/helpers/splitIntoLines.js"],"sourcesContent":["const splitIntoLines = str => {\n\tconst results = [];\n\tconst len = str.length;\n\tlet i = 0;\n\tfor (; i < len; ) {\n\t\tconst cc = str.charCodeAt(i);\n\t\t// 10 is \"\\n\".charCodeAt(0)\n\t\tif (cc === 10) {\n\t\t\tresults.push(\"\\n\");\n\t\t\ti++;\n\t\t} else {\n\t\t\tlet j = i + 1;\n\t\t\t// 10 is \"\\n\".charCodeAt(0)\n\t\t\twhile (j < len && str.charCodeAt(j) !== 10) j++;\n\t\t\tresults.push(str.slice(i, j + 1));\n\t\t\ti = j + 1;\n\t\t}\n\t}\n\treturn results;\n};\nmodule.exports = splitIntoLines;\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,GAAG,IAAI;EAC7B,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,GAAG,GAAGF,GAAG,CAACG,MAAM;EACtB,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGF,GAAG,GAAI;IACjB,MAAMG,EAAE,GAAGL,GAAG,CAACM,UAAU,CAACF,CAAC,CAAC;IAC5B;IACA,IAAIC,EAAE,KAAK,EAAE,EAAE;MACdJ,OAAO,CAACM,IAAI,CAAC,IAAI,CAAC;MAClBH,CAAC,EAAE;IACJ,CAAC,MAAM;MACN,IAAII,CAAC,GAAGJ,CAAC,GAAG,CAAC;MACb;MACA,OAAOI,CAAC,GAAGN,GAAG,IAAIF,GAAG,CAACM,UAAU,CAACE,CAAC,CAAC,KAAK,EAAE,EAAEA,CAAC,EAAE;MAC/CP,OAAO,CAACM,IAAI,CAACP,GAAG,CAACS,KAAK,CAACL,CAAC,EAAEI,CAAC,GAAG,CAAC,CAAC,CAAC;MACjCJ,CAAC,GAAGI,CAAC,GAAG,CAAC;IACV;EACD;EACA,OAAOP,OAAO;AACf,CAAC;AACDS,MAAM,CAACC,OAAO,GAAGZ,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}