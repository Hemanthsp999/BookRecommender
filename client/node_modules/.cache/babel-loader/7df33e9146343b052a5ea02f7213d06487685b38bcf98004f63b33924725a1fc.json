{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass CommonJsChunkLoadingPlugin {\n  constructor(options) {\n    options = options || {};\n    this._asyncChunkLoading = options.asyncChunkLoading;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const ChunkLoadingRuntimeModule = this._asyncChunkLoading ? require(\"./ReadFileChunkLoadingRuntimeModule\") : require(\"./RequireChunkLoadingRuntimeModule\");\n    const chunkLoadingValue = this._asyncChunkLoading ? \"async-node\" : \"require\";\n    new StartupChunkDependenciesPlugin({\n      chunkLoading: chunkLoadingValue,\n      asyncChunkLoading: this._asyncChunkLoading\n    }).apply(compiler);\n    compiler.hooks.thisCompilation.tap(\"CommonJsChunkLoadingPlugin\", compilation => {\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === chunkLoadingValue;\n      };\n      const onceForChunkSet = new WeakSet();\n      const handler = (chunk, set) => {\n        if (onceForChunkSet.has(chunk)) return;\n        onceForChunkSet.add(chunk);\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        compilation.addRuntimeModule(chunk, new ChunkLoadingRuntimeModule(set));\n      };\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.baseURI).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.externalInstallChunk).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.onChunksLoaded).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.getChunkScriptFilename);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n        set.add(RuntimeGlobals.moduleCache);\n        set.add(RuntimeGlobals.hmrModuleData);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.getUpdateManifestFilename);\n      });\n    });\n  }\n}\nmodule.exports = CommonJsChunkLoadingPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","StartupChunkDependenciesPlugin","CommonJsChunkLoadingPlugin","constructor","options","_asyncChunkLoading","asyncChunkLoading","apply","compiler","ChunkLoadingRuntimeModule","chunkLoadingValue","chunkLoading","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","isEnabledForChunk","chunk","getEntryOptions","undefined","onceForChunkSet","WeakSet","handler","set","has","add","moduleFactoriesAddOnly","hasOwnProperty","addRuntimeModule","runtimeRequirementInTree","for","ensureChunkHandlers","hmrDownloadUpdateHandlers","hmrDownloadManifest","baseURI","externalInstallChunk","onChunksLoaded","getChunkScriptFilename","getChunkUpdateScriptFilename","moduleCache","hmrModuleData","getUpdateManifestFilename","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/node/CommonJsChunkLoadingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass CommonJsChunkLoadingPlugin {\n\tconstructor(options) {\n\t\toptions = options || {};\n\t\tthis._asyncChunkLoading = options.asyncChunkLoading;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst ChunkLoadingRuntimeModule = this._asyncChunkLoading\n\t\t\t? require(\"./ReadFileChunkLoadingRuntimeModule\")\n\t\t\t: require(\"./RequireChunkLoadingRuntimeModule\");\n\t\tconst chunkLoadingValue = this._asyncChunkLoading\n\t\t\t? \"async-node\"\n\t\t\t: \"require\";\n\t\tnew StartupChunkDependenciesPlugin({\n\t\t\tchunkLoading: chunkLoadingValue,\n\t\t\tasyncChunkLoading: this._asyncChunkLoading\n\t\t}).apply(compiler);\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"CommonJsChunkLoadingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === chunkLoadingValue;\n\t\t\t\t};\n\t\t\t\tconst onceForChunkSet = new WeakSet();\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\n\t\t\t\t\tonceForChunkSet.add(chunk);\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tnew ChunkLoadingRuntimeModule(set)\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.baseURI)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.externalInstallChunk)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.onChunksLoaded)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkScriptFilename);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tset.add(RuntimeGlobals.hmrModuleData);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.getUpdateManifestFilename);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = CommonJsChunkLoadingPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}