{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nmodule.exports = class DirectoryExistsPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"DirectoryExistsPlugin\", (request, resolveContext, callback) => {\n      const fs = resolver.fileSystem;\n      const directory = request.path;\n      if (!directory) return callback();\n      fs.stat(directory, (err, stat) => {\n        if (err || !stat) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n          if (resolveContext.log) resolveContext.log(directory + \" doesn't exist\");\n          return callback();\n        }\n        if (!stat.isDirectory()) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n          if (resolveContext.log) resolveContext.log(directory + \" is not a directory\");\n          return callback();\n        }\n        if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(directory);\n        resolver.doResolve(target, request, `existing directory ${directory}`, resolveContext, callback);\n      });\n    });\n  }\n};","map":{"version":3,"names":["module","exports","DirectoryExistsPlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","directory","path","stat","err","missingDependencies","add","log","isDirectory","fileDependencies","doResolve"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class DirectoryExistsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"DirectoryExistsPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst directory = request.path;\n\t\t\t\t\tif (!directory) return callback();\n\t\t\t\t\tfs.stat(directory, (err, stat) => {\n\t\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" doesn't exist\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!stat.isDirectory()) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" is not a directory\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(directory);\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t`existing directory ${directory}`,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG,MAAMC,qBAAqB,CAAC;EAC5C;AACD;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAC3B,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/CE,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACL,MAAM,CAAC,CACpBM,QAAQ,CACR,uBAAuB,EACvB,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACtC,MAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAAU;MAC9B,MAAMC,SAAS,GAAGL,OAAO,CAACM,IAAI;MAC9B,IAAI,CAACD,SAAS,EAAE,OAAOH,QAAQ,CAAC,CAAC;MACjCC,EAAE,CAACI,IAAI,CAACF,SAAS,EAAE,CAACG,GAAG,EAAED,IAAI,KAAK;QACjC,IAAIC,GAAG,IAAI,CAACD,IAAI,EAAE;UACjB,IAAIN,cAAc,CAACQ,mBAAmB,EACrCR,cAAc,CAACQ,mBAAmB,CAACC,GAAG,CAACL,SAAS,CAAC;UAClD,IAAIJ,cAAc,CAACU,GAAG,EACrBV,cAAc,CAACU,GAAG,CAACN,SAAS,GAAG,gBAAgB,CAAC;UACjD,OAAOH,QAAQ,CAAC,CAAC;QAClB;QACA,IAAI,CAACK,IAAI,CAACK,WAAW,CAAC,CAAC,EAAE;UACxB,IAAIX,cAAc,CAACQ,mBAAmB,EACrCR,cAAc,CAACQ,mBAAmB,CAACC,GAAG,CAACL,SAAS,CAAC;UAClD,IAAIJ,cAAc,CAACU,GAAG,EACrBV,cAAc,CAACU,GAAG,CAACN,SAAS,GAAG,qBAAqB,CAAC;UACtD,OAAOH,QAAQ,CAAC,CAAC;QAClB;QACA,IAAID,cAAc,CAACY,gBAAgB,EAClCZ,cAAc,CAACY,gBAAgB,CAACH,GAAG,CAACL,SAAS,CAAC;QAC/CT,QAAQ,CAACkB,SAAS,CACjBpB,MAAM,EACNM,OAAO,EACN,sBAAqBK,SAAU,EAAC,EACjCJ,cAAc,EACdC,QACD,CAAC;MACF,CAAC,CAAC;IACH,CACD,CAAC;EACH;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}