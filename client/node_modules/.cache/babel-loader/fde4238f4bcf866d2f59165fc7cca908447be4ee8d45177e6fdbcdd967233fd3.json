{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = decode;\nvar _helperApiError = require(\"@webassemblyjs/helper-api-error\");\nvar ieee754 = _interopRequireWildcard(require(\"@webassemblyjs/ieee754\"));\nvar utf8 = _interopRequireWildcard(require(\"@webassemblyjs/utf8\"));\nvar t = _interopRequireWildcard(require(\"@webassemblyjs/ast\"));\nvar _leb = require(\"@webassemblyjs/leb128\");\nvar _helperWasmBytecode = _interopRequireDefault(require(\"@webassemblyjs/helper-wasm-bytecode\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction toHex(n) {\n  return \"0x\" + Number(n).toString(16);\n}\nfunction byteArrayEq(l, r) {\n  if (l.length !== r.length) {\n    return false;\n  }\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] !== r[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction decode(ab, opts) {\n  var buf = new Uint8Array(ab);\n  var getUniqueName = t.getUniqueNameGenerator();\n  var offset = 0;\n  function getPosition() {\n    return {\n      line: -1,\n      column: offset\n    };\n  }\n  function dump(b, msg) {\n    if (opts.dump === false) return;\n    var pad = \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n    var str = \"\";\n    if (b.length < 5) {\n      str = b.map(toHex).join(\" \");\n    } else {\n      str = \"...\";\n    }\n    console.log(toHex(offset) + \":\\t\", str, pad, \";\", msg);\n  }\n  function dumpSep(msg) {\n    if (opts.dump === false) return;\n    console.log(\";\", msg);\n  }\n  /**\n   * TODO(sven): we can atually use a same structure\n   * we are adding incrementally new features\n   */\n\n  var state = {\n    elementsInFuncSection: [],\n    elementsInExportSection: [],\n    elementsInCodeSection: [],\n    /**\n     * Decode memory from:\n     * - Memory section\n     */\n    memoriesInModule: [],\n    /**\n     * Decoded types from:\n     * - Type section\n     */\n    typesInModule: [],\n    /**\n     * Decoded functions from:\n     * - Function section\n     * - Import section\n     */\n    functionsInModule: [],\n    /**\n     * Decoded tables from:\n     * - Table section\n     */\n    tablesInModule: [],\n    /**\n     * Decoded globals from:\n     * - Global section\n     */\n    globalsInModule: []\n  };\n  function isEOF() {\n    return offset >= buf.length;\n  }\n  function eatBytes(n) {\n    offset = offset + n;\n  }\n  function readBytesAtOffset(_offset, numberOfBytes) {\n    var arr = [];\n    for (var i = 0; i < numberOfBytes; i++) {\n      arr.push(buf[_offset + i]);\n    }\n    return arr;\n  }\n  function readBytes(numberOfBytes) {\n    return readBytesAtOffset(offset, numberOfBytes);\n  }\n  function readF64() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F64);\n    var value = ieee754.decodeF64(bytes);\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n      mantissa += bytes[bytes.length - 2] % 16 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F64\n    };\n  }\n  function readF32() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F32);\n    var value = ieee754.decodeF32(bytes);\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n      mantissa += bytes[bytes.length - 2] % 128 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F32\n    };\n  }\n  function readUTF8String() {\n    var lenu32 = readU32(); // Don't eat any bytes. Instead, peek ahead of the current offset using\n    // readBytesAtOffset below. This keeps readUTF8String neutral with respect\n    // to the current offset, just like the other readX functions.\n\n    var strlen = lenu32.value;\n    dump([strlen], \"string length\");\n    var bytes = readBytesAtOffset(offset + lenu32.nextIndex, strlen);\n    var value = utf8.decode(bytes);\n    return {\n      value: value,\n      nextIndex: strlen + lenu32.nextIndex\n    };\n  }\n  /**\n   * Decode an unsigned 32bits integer\n   *\n   * The length will be handled by the leb librairy, we pass the max number of\n   * byte.\n   */\n\n  function readU32() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt32)(buffer);\n  }\n  function readVaruint32() {\n    // where 32 bits = max 4 bytes\n    var bytes = readBytes(4);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt32)(buffer);\n  }\n  function readVaruint7() {\n    // where 7 bits = max 1 bytes\n    var bytes = readBytes(1);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt32)(buffer);\n  }\n  /**\n   * Decode a signed 32bits interger\n   */\n\n  function read32() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeInt32)(buffer);\n  }\n  /**\n   * Decode a signed 64bits integer\n   */\n\n  function read64() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeInt64)(buffer);\n  }\n  function readU64() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt64)(buffer);\n  }\n  function readByte() {\n    return readBytes(1)[0];\n  }\n  function parseModuleHeader() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n    var header = readBytes(4);\n    if (byteArrayEq(_helperWasmBytecode[\"default\"].magicModuleHeader, header) === false) {\n      throw new _helperApiError.CompileError(\"magic header not detected\");\n    }\n    dump(header, \"wasm magic header\");\n    eatBytes(4);\n  }\n  function parseVersion() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n    var version = readBytes(4);\n    if (byteArrayEq(_helperWasmBytecode[\"default\"].moduleVersion, version) === false) {\n      throw new _helperApiError.CompileError(\"unknown binary version\");\n    }\n    dump(version, \"wasm version\");\n    eatBytes(4);\n  }\n  function parseVec(cast) {\n    var u32 = readU32();\n    var length = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([length], \"number\");\n    if (length === 0) {\n      return [];\n    }\n    var elements = [];\n    for (var i = 0; i < length; i++) {\n      var _byte = readByte();\n      eatBytes(1);\n      var value = cast(_byte);\n      dump([_byte], value);\n      if (typeof value === \"undefined\") {\n        throw new _helperApiError.CompileError(\"Internal failure: parseVec could not cast the value\");\n      }\n      elements.push(value);\n    }\n    return elements;\n  } // Type section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-typesec\n\n  function parseTypeSection(numberOfTypes) {\n    var typeInstructionNodes = [];\n    dump([numberOfTypes], \"num types\");\n    for (var i = 0; i < numberOfTypes; i++) {\n      var _startLoc = getPosition();\n      dumpSep(\"type \" + i);\n      var type = readByte();\n      eatBytes(1);\n      if (type == _helperWasmBytecode[\"default\"].types.func) {\n        dump([type], \"func\");\n        var paramValtypes = parseVec(function (b) {\n          return _helperWasmBytecode[\"default\"].valtypes[b];\n        });\n        var params = paramValtypes.map(function (v) {\n          return t.funcParam( /*valtype*/\n          v);\n        });\n        var result = parseVec(function (b) {\n          return _helperWasmBytecode[\"default\"].valtypes[b];\n        });\n        typeInstructionNodes.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.typeInstruction(undefined, t.signature(params, result)), endLoc, _startLoc);\n        }());\n        state.typesInModule.push({\n          params: params,\n          result: result\n        });\n      } else {\n        throw new Error(\"Unsupported type: \" + toHex(type));\n      }\n    }\n    return typeInstructionNodes;\n  } // Import section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-importsec\n\n  function parseImportSection(numberOfImports) {\n    var imports = [];\n    for (var i = 0; i < numberOfImports; i++) {\n      dumpSep(\"import header \" + i);\n      var _startLoc2 = getPosition();\n      /**\n       * Module name\n       */\n\n      var moduleName = readUTF8String();\n      eatBytes(moduleName.nextIndex);\n      dump([], \"module name (\".concat(moduleName.value, \")\"));\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"name (\".concat(name.value, \")\"));\n      /**\n       * Import descr\n       */\n\n      var descrTypeByte = readByte();\n      eatBytes(1);\n      var descrType = _helperWasmBytecode[\"default\"].importTypes[descrTypeByte];\n      dump([descrTypeByte], \"import kind\");\n      if (typeof descrType === \"undefined\") {\n        throw new _helperApiError.CompileError(\"Unknown import description type: \" + toHex(descrTypeByte));\n      }\n      var importDescr = void 0;\n      if (descrType === \"func\") {\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n        if (typeof signature === \"undefined\") {\n          throw new _helperApiError.CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n        }\n        var id = getUniqueName(\"func\");\n        importDescr = t.funcImportDescr(id, t.signature(signature.params, signature.result));\n        state.functionsInModule.push({\n          id: t.identifier(name.value),\n          signature: signature,\n          isExternal: true\n        });\n      } else if (descrType === \"global\") {\n        importDescr = parseGlobalType();\n        var globalNode = t.global(importDescr, []);\n        state.globalsInModule.push(globalNode);\n      } else if (descrType === \"table\") {\n        importDescr = parseTableType(i);\n      } else if (descrType === \"memory\") {\n        var memoryNode = parseMemoryType(0);\n        state.memoriesInModule.push(memoryNode);\n        importDescr = memoryNode;\n      } else {\n        throw new _helperApiError.CompileError(\"Unsupported import of type: \" + descrType);\n      }\n      imports.push(function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.moduleImport(moduleName.value, name.value, importDescr), endLoc, _startLoc2);\n      }());\n    }\n    return imports;\n  } // Function section\n  // https://webassembly.github.io/spec/binary/modules.html#function-section\n\n  function parseFuncSection(numberOfFunctions) {\n    dump([numberOfFunctions], \"num funcs\");\n    for (var i = 0; i < numberOfFunctions; i++) {\n      var indexU32 = readU32();\n      var typeindex = indexU32.value;\n      eatBytes(indexU32.nextIndex);\n      dump([typeindex], \"type index\");\n      var signature = state.typesInModule[typeindex];\n      if (typeof signature === \"undefined\") {\n        throw new _helperApiError.CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n      } // preserve anonymous, a name might be resolved later\n\n      var id = t.withRaw(t.identifier(getUniqueName(\"func\")), \"\");\n      state.functionsInModule.push({\n        id: id,\n        signature: signature,\n        isExternal: false\n      });\n    }\n  } // Export section\n  // https://webassembly.github.io/spec/binary/modules.html#export-section\n\n  function parseExportSection(numberOfExport) {\n    dump([numberOfExport], \"num exports\"); // Parse vector of exports\n\n    for (var i = 0; i < numberOfExport; i++) {\n      var _startLoc3 = getPosition();\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"export name (\".concat(name.value, \")\"));\n      /**\n       * exportdescr\n       */\n\n      var typeIndex = readByte();\n      eatBytes(1);\n      dump([typeIndex], \"export kind\");\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      dump([index], \"export index\");\n      var id = void 0,\n        signature = void 0;\n      if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Func\") {\n        var func = state.functionsInModule[index];\n        if (typeof func === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown function (\".concat(index, \")\"));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = func.signature;\n      } else if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Table\") {\n        var table = state.tablesInModule[index];\n        if (typeof table === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown table \".concat(index));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Memory\") {\n        var memNode = state.memoriesInModule[index];\n        if (typeof memNode === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown memory \".concat(index));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Global\") {\n        var global = state.globalsInModule[index];\n        if (typeof global === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown global \".concat(index));\n        }\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else {\n        console.warn(\"Unsupported export type: \" + toHex(typeIndex));\n        return;\n      }\n      var endLoc = getPosition();\n      state.elementsInExportSection.push({\n        name: name.value,\n        type: _helperWasmBytecode[\"default\"].exportTypes[typeIndex],\n        signature: signature,\n        id: id,\n        index: index,\n        endLoc: endLoc,\n        startLoc: _startLoc3\n      });\n    }\n  } // Code section\n  // https://webassembly.github.io/spec/binary/modules.html#code-section\n\n  function parseCodeSection(numberOfFuncs) {\n    dump([numberOfFuncs], \"number functions\"); // Parse vector of function\n\n    for (var i = 0; i < numberOfFuncs; i++) {\n      var _startLoc4 = getPosition();\n      dumpSep(\"function body \" + i); // the u32 size of the function code in bytes\n      // Ignore it for now\n\n      var bodySizeU32 = readU32();\n      eatBytes(bodySizeU32.nextIndex);\n      dump([bodySizeU32.value], \"function body size\");\n      var code = [];\n      /**\n       * Parse locals\n       */\n\n      var funcLocalNumU32 = readU32();\n      var funcLocalNum = funcLocalNumU32.value;\n      eatBytes(funcLocalNumU32.nextIndex);\n      dump([funcLocalNum], \"num locals\");\n      var locals = [];\n      for (var _i = 0; _i < funcLocalNum; _i++) {\n        var _startLoc5 = getPosition();\n        var localCountU32 = readU32();\n        var localCount = localCountU32.value;\n        eatBytes(localCountU32.nextIndex);\n        dump([localCount], \"num local\");\n        var valtypeByte = readByte();\n        eatBytes(1);\n        var type = _helperWasmBytecode[\"default\"].valtypes[valtypeByte];\n        var args = [];\n        for (var _i2 = 0; _i2 < localCount; _i2++) {\n          args.push(t.valtypeLiteral(type));\n        }\n        var localNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(\"local\", args), endLoc, _startLoc5);\n        }();\n        locals.push(localNode);\n        dump([valtypeByte], type);\n        if (typeof type === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected valtype: \" + toHex(valtypeByte));\n        }\n      }\n      code.push.apply(code, locals); // Decode instructions until the end\n\n      parseInstructionBlock(code);\n      var endLoc = getPosition();\n      state.elementsInCodeSection.push({\n        code: code,\n        locals: locals,\n        endLoc: endLoc,\n        startLoc: _startLoc4,\n        bodySize: bodySizeU32.value\n      });\n    }\n  }\n  function parseInstructionBlock(code) {\n    while (true) {\n      var _startLoc6 = getPosition();\n      var instructionAlreadyCreated = false;\n      var instructionByte = readByte();\n      eatBytes(1);\n      if (instructionByte === 0xfe) {\n        instructionByte = 0xfe00 + readByte();\n        eatBytes(1);\n      }\n      var instruction = _helperWasmBytecode[\"default\"].symbolsByByte[instructionByte];\n      if (typeof instruction === \"undefined\") {\n        throw new _helperApiError.CompileError(\"Unexpected instruction: \" + toHex(instructionByte));\n      }\n      if (typeof instruction.object === \"string\") {\n        dump([instructionByte], \"\".concat(instruction.object, \".\").concat(instruction.name));\n      } else {\n        dump([instructionByte], instruction.name);\n      }\n      /**\n       * End of the function\n       */\n\n      if (instruction.name === \"end\") {\n        var node = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(instruction.name), endLoc, _startLoc6);\n        }();\n        code.push(node);\n        break;\n      }\n      var args = [];\n      var namedArgs = void 0;\n      if (instruction.name === \"loop\") {\n        var _startLoc7 = getPosition();\n        var blocktypeByte = readByte();\n        eatBytes(1);\n        var blocktype = _helperWasmBytecode[\"default\"].blockTypes[blocktypeByte];\n        dump([blocktypeByte], \"blocktype\");\n        if (typeof blocktype === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected blocktype: \" + toHex(blocktypeByte));\n        }\n        var instr = [];\n        parseInstructionBlock(instr); // preserve anonymous\n\n        var label = t.withRaw(t.identifier(getUniqueName(\"loop\")), \"\");\n        var loopNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.loopInstruction(label, blocktype, instr), endLoc, _startLoc7);\n        }();\n        code.push(loopNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"if\") {\n        var _startLoc8 = getPosition();\n        var _blocktypeByte = readByte();\n        eatBytes(1);\n        var _blocktype = _helperWasmBytecode[\"default\"].blockTypes[_blocktypeByte];\n        dump([_blocktypeByte], \"blocktype\");\n        if (typeof _blocktype === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte));\n        }\n        var testIndex = t.withRaw(t.identifier(getUniqueName(\"if\")), \"\");\n        var ifBody = [];\n        parseInstructionBlock(ifBody); // Defaults to no alternate\n\n        var elseIndex = 0;\n        for (elseIndex = 0; elseIndex < ifBody.length; ++elseIndex) {\n          var _instr = ifBody[elseIndex];\n          if (_instr.type === \"Instr\" && _instr.id === \"else\") {\n            break;\n          }\n        }\n        var consequentInstr = ifBody.slice(0, elseIndex);\n        var alternate = ifBody.slice(elseIndex + 1); // wast sugar\n\n        var testInstrs = [];\n        var ifNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.ifInstruction(testIndex, testInstrs, _blocktype, consequentInstr, alternate), endLoc, _startLoc8);\n        }();\n        code.push(ifNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"block\") {\n        var _startLoc9 = getPosition();\n        var _blocktypeByte2 = readByte();\n        eatBytes(1);\n        var _blocktype2 = _helperWasmBytecode[\"default\"].blockTypes[_blocktypeByte2];\n        dump([_blocktypeByte2], \"blocktype\");\n        if (typeof _blocktype2 === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte2));\n        }\n        var _instr2 = [];\n        parseInstructionBlock(_instr2); // preserve anonymous\n\n        var _label = t.withRaw(t.identifier(getUniqueName(\"block\")), \"\");\n        var blockNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.blockInstruction(_label, _instr2, _blocktype2), endLoc, _startLoc9);\n        }();\n        code.push(blockNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call\") {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        var callNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.callInstruction(t.indexLiteral(index)), endLoc, _startLoc6);\n        }();\n        code.push(callNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call_indirect\") {\n        var _startLoc10 = getPosition();\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n        if (typeof signature === \"undefined\") {\n          throw new _helperApiError.CompileError(\"call_indirect signature not found (\".concat(typeindex, \")\"));\n        }\n        var _callNode = t.callIndirectInstruction(t.signature(signature.params, signature.result), []);\n        var flagU32 = readU32();\n        var flag = flagU32.value; // 0x00 - reserved byte\n\n        eatBytes(flagU32.nextIndex);\n        if (flag !== 0) {\n          throw new _helperApiError.CompileError(\"zero flag expected\");\n        }\n        code.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(_callNode, endLoc, _startLoc10);\n        }());\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"br_table\") {\n        var indicesu32 = readU32();\n        var indices = indicesu32.value;\n        eatBytes(indicesu32.nextIndex);\n        dump([indices], \"num indices\");\n        for (var i = 0; i <= indices; i++) {\n          var _indexu = readU32();\n          var _index = _indexu.value;\n          eatBytes(_indexu.nextIndex);\n          dump([_index], \"index\");\n          args.push(t.numberLiteralFromRaw(_indexu.value.toString(), \"u32\"));\n        }\n      } else if (instructionByte >= 0x28 && instructionByte <= 0x40) {\n        /**\n         * Memory instructions\n         */\n        if (instruction.name === \"grow_memory\" || instruction.name === \"current_memory\") {\n          var _indexU = readU32();\n          var _index2 = _indexU.value;\n          eatBytes(_indexU.nextIndex);\n          if (_index2 !== 0) {\n            throw new Error(\"zero flag expected\");\n          }\n          dump([_index2], \"index\");\n        } else {\n          var aligun32 = readU32();\n          var align = aligun32.value;\n          eatBytes(aligun32.nextIndex);\n          dump([align], \"align\");\n          var offsetu32 = readU32();\n          var _offset2 = offsetu32.value;\n          eatBytes(offsetu32.nextIndex);\n          dump([_offset2], \"offset\");\n          if (namedArgs === undefined) namedArgs = {};\n          namedArgs.offset = t.numberLiteralFromRaw(_offset2);\n        }\n      } else if (instructionByte >= 0x41 && instructionByte <= 0x44) {\n        /**\n         * Numeric instructions\n         */\n        if (instruction.object === \"i32\") {\n          var value32 = read32();\n          var value = value32.value;\n          eatBytes(value32.nextIndex);\n          dump([value], \"i32 value\");\n          args.push(t.numberLiteralFromRaw(value));\n        }\n        if (instruction.object === \"u32\") {\n          var valueu32 = readU32();\n          var _value = valueu32.value;\n          eatBytes(valueu32.nextIndex);\n          dump([_value], \"u32 value\");\n          args.push(t.numberLiteralFromRaw(_value));\n        }\n        if (instruction.object === \"i64\") {\n          var value64 = read64();\n          var _value2 = value64.value;\n          eatBytes(value64.nextIndex);\n          dump([Number(_value2.toString())], \"i64 value\");\n          var high = _value2.high,\n            low = _value2.low;\n          var _node = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: high,\n              low: low\n            }\n          };\n          args.push(_node);\n        }\n        if (instruction.object === \"u64\") {\n          var valueu64 = readU64();\n          var _value3 = valueu64.value;\n          eatBytes(valueu64.nextIndex);\n          dump([Number(_value3.toString())], \"u64 value\");\n          var _high = _value3.high,\n            _low = _value3.low;\n          var _node2 = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: _high,\n              low: _low\n            }\n          };\n          args.push(_node2);\n        }\n        if (instruction.object === \"f32\") {\n          var valuef32 = readF32();\n          var _value4 = valuef32.value;\n          eatBytes(valuef32.nextIndex);\n          dump([_value4], \"f32 value\");\n          args.push(\n          // $FlowIgnore\n          t.floatLiteral(_value4, valuef32.nan, valuef32.inf, String(_value4)));\n        }\n        if (instruction.object === \"f64\") {\n          var valuef64 = readF64();\n          var _value5 = valuef64.value;\n          eatBytes(valuef64.nextIndex);\n          dump([_value5], \"f64 value\");\n          args.push(\n          // $FlowIgnore\n          t.floatLiteral(_value5, valuef64.nan, valuef64.inf, String(_value5)));\n        }\n      } else if (instructionByte >= 0xfe00 && instructionByte <= 0xfeff) {\n        /**\n         * Atomic memory instructions\n         */\n        var align32 = readU32();\n        var _align = align32.value;\n        eatBytes(align32.nextIndex);\n        dump([_align], \"align\");\n        var _offsetu = readU32();\n        var _offset3 = _offsetu.value;\n        eatBytes(_offsetu.nextIndex);\n        dump([_offset3], \"offset\");\n      } else {\n        for (var _i3 = 0; _i3 < instruction.numberOfArgs; _i3++) {\n          var u32 = readU32();\n          eatBytes(u32.nextIndex);\n          dump([u32.value], \"argument \" + _i3);\n          args.push(t.numberLiteralFromRaw(u32.value));\n        }\n      }\n      if (instructionAlreadyCreated === false) {\n        if (typeof instruction.object === \"string\") {\n          var _node3 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.objectInstruction(instruction.name, instruction.object, args, namedArgs), endLoc, _startLoc6);\n          }();\n          code.push(_node3);\n        } else {\n          var _node4 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.instruction(instruction.name, args, namedArgs), endLoc, _startLoc6);\n          }();\n          code.push(_node4);\n        }\n      }\n    }\n  } // https://webassembly.github.io/spec/core/binary/types.html#limits\n\n  function parseLimits() {\n    var limitType = readByte();\n    eatBytes(1);\n    var shared = limitType === 0x03;\n    dump([limitType], \"limit type\" + (shared ? \" (shared)\" : \"\"));\n    var min, max;\n    if (limitType === 0x01 || limitType === 0x03 // shared limits\n    ) {\n      var u32min = readU32();\n      min = parseInt(u32min.value);\n      eatBytes(u32min.nextIndex);\n      dump([min], \"min\");\n      var u32max = readU32();\n      max = parseInt(u32max.value);\n      eatBytes(u32max.nextIndex);\n      dump([max], \"max\");\n    }\n    if (limitType === 0x00) {\n      var _u32min = readU32();\n      min = parseInt(_u32min.value);\n      eatBytes(_u32min.nextIndex);\n      dump([min], \"min\");\n    }\n    return t.limit(min, max, shared);\n  } // https://webassembly.github.io/spec/core/binary/types.html#binary-tabletype\n\n  function parseTableType(index) {\n    var name = t.withRaw(t.identifier(getUniqueName(\"table\")), String(index));\n    var elementTypeByte = readByte();\n    eatBytes(1);\n    dump([elementTypeByte], \"element type\");\n    var elementType = _helperWasmBytecode[\"default\"].tableTypes[elementTypeByte];\n    if (typeof elementType === \"undefined\") {\n      throw new _helperApiError.CompileError(\"Unknown element type in table: \" + toHex(elementType));\n    }\n    var limits = parseLimits();\n    return t.table(elementType, limits, name);\n  } // https://webassembly.github.io/spec/binary/types.html#global-types\n\n  function parseGlobalType() {\n    var valtypeByte = readByte();\n    eatBytes(1);\n    var type = _helperWasmBytecode[\"default\"].valtypes[valtypeByte];\n    dump([valtypeByte], type);\n    if (typeof type === \"undefined\") {\n      throw new _helperApiError.CompileError(\"Unknown valtype: \" + toHex(valtypeByte));\n    }\n    var globalTypeByte = readByte();\n    eatBytes(1);\n    var globalType = _helperWasmBytecode[\"default\"].globalTypes[globalTypeByte];\n    dump([globalTypeByte], \"global type (\".concat(globalType, \")\"));\n    if (typeof globalType === \"undefined\") {\n      throw new _helperApiError.CompileError(\"Invalid mutability: \" + toHex(globalTypeByte));\n    }\n    return t.globalType(type, globalType);\n  } // function parseNameModule() {\n  //   const lenu32 = readVaruint32();\n  //   eatBytes(lenu32.nextIndex);\n  //   console.log(\"len\", lenu32);\n  //   const strlen = lenu32.value;\n  //   dump([strlen], \"string length\");\n  //   const bytes = readBytes(strlen);\n  //   eatBytes(strlen);\n  //   const value = utf8.decode(bytes);\n  //   return [t.moduleNameMetadata(value)];\n  // }\n  // this section contains an array of function names and indices\n\n  function parseNameSectionFunctions() {\n    var functionNames = [];\n    var numberOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numberOfFunctionsu32.value;\n    eatBytes(numberOfFunctionsu32.nextIndex);\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      functionNames.push(t.functionNameMetadata(name.value, index));\n    }\n    return functionNames;\n  }\n  function parseNameSectionLocals() {\n    var localNames = [];\n    var numbeOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numbeOfFunctionsu32.value;\n    eatBytes(numbeOfFunctionsu32.nextIndex);\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var functionIndexu32 = readU32();\n      var functionIndex = functionIndexu32.value;\n      eatBytes(functionIndexu32.nextIndex);\n      var numLocalsu32 = readU32();\n      var numLocals = numLocalsu32.value;\n      eatBytes(numLocalsu32.nextIndex);\n      for (var _i4 = 0; _i4 < numLocals; _i4++) {\n        var localIndexu32 = readU32();\n        var localIndex = localIndexu32.value;\n        eatBytes(localIndexu32.nextIndex);\n        var name = readUTF8String();\n        eatBytes(name.nextIndex);\n        localNames.push(t.localNameMetadata(name.value, localIndex, functionIndex));\n      }\n    }\n    return localNames;\n  } // this is a custom section used for name resolution\n  // https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n\n  function parseNameSection(remainingBytes) {\n    var nameMetadata = [];\n    var initialOffset = offset;\n    while (offset - initialOffset < remainingBytes) {\n      // name_type\n      var sectionTypeByte = readVaruint7();\n      eatBytes(sectionTypeByte.nextIndex); // name_payload_len\n\n      var subSectionSizeInBytesu32 = readVaruint32();\n      eatBytes(subSectionSizeInBytesu32.nextIndex);\n      switch (sectionTypeByte.value) {\n        // case 0: {\n        // TODO(sven): re-enable that\n        // Current status: it seems that when we decode the module's name\n        // no name_payload_len is used.\n        //\n        // See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n        //\n        // nameMetadata.push(...parseNameModule());\n        // break;\n        // }\n        case 1:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionFunctions()));\n            break;\n          }\n        case 2:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionLocals()));\n            break;\n          }\n        default:\n          {\n            // skip unknown subsection\n            eatBytes(subSectionSizeInBytesu32.value);\n          }\n      }\n    }\n    return nameMetadata;\n  } // this is a custom section used for information about the producers\n  // https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md\n\n  function parseProducersSection() {\n    var metadata = t.producersSectionMetadata([]); // field_count\n\n    var sectionTypeByte = readVaruint32();\n    eatBytes(sectionTypeByte.nextIndex);\n    dump([sectionTypeByte.value], \"num of producers\");\n    var fields = {\n      language: [],\n      \"processed-by\": [],\n      sdk: []\n    }; // fields\n\n    for (var fieldI = 0; fieldI < sectionTypeByte.value; fieldI++) {\n      // field_name\n      var fieldName = readUTF8String();\n      eatBytes(fieldName.nextIndex); // field_value_count\n\n      var valueCount = readVaruint32();\n      eatBytes(valueCount.nextIndex); // field_values\n\n      for (var producerI = 0; producerI < valueCount.value; producerI++) {\n        var producerName = readUTF8String();\n        eatBytes(producerName.nextIndex);\n        var producerVersion = readUTF8String();\n        eatBytes(producerVersion.nextIndex);\n        fields[fieldName.value].push(t.producerMetadataVersionedName(producerName.value, producerVersion.value));\n      }\n      metadata.producers.push(fields[fieldName.value]);\n    }\n    return metadata;\n  }\n  function parseGlobalSection(numberOfGlobals) {\n    var globals = [];\n    dump([numberOfGlobals], \"num globals\");\n    for (var i = 0; i < numberOfGlobals; i++) {\n      var _startLoc11 = getPosition();\n      var globalType = parseGlobalType();\n      /**\n       * Global expressions\n       */\n\n      var init = [];\n      parseInstructionBlock(init);\n      var node = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.global(globalType, init), endLoc, _startLoc11);\n      }();\n      globals.push(node);\n      state.globalsInModule.push(node);\n    }\n    return globals;\n  }\n  function parseElemSection(numberOfElements) {\n    var elems = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var _startLoc12 = getPosition();\n      var tableindexu32 = readU32();\n      var tableindex = tableindexu32.value;\n      eatBytes(tableindexu32.nextIndex);\n      dump([tableindex], \"table index\");\n      /**\n       * Parse instructions\n       */\n\n      var instr = [];\n      parseInstructionBlock(instr);\n      /**\n       * Parse ( vector function index ) *\n       */\n\n      var indicesu32 = readU32();\n      var indices = indicesu32.value;\n      eatBytes(indicesu32.nextIndex);\n      dump([indices], \"num indices\");\n      var indexValues = [];\n      for (var _i5 = 0; _i5 < indices; _i5++) {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        indexValues.push(t.indexLiteral(index));\n      }\n      var elemNode = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.elem(t.indexLiteral(tableindex), instr, indexValues), endLoc, _startLoc12);\n      }();\n      elems.push(elemNode);\n    }\n    return elems;\n  } // https://webassembly.github.io/spec/core/binary/types.html#memory-types\n\n  function parseMemoryType(i) {\n    var limits = parseLimits();\n    return t.memory(limits, t.indexLiteral(i));\n  } // https://webassembly.github.io/spec/binary/modules.html#table-section\n\n  function parseTableSection(numberOfElements) {\n    var tables = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var tablesNode = parseTableType(i);\n      state.tablesInModule.push(tablesNode);\n      tables.push(tablesNode);\n    }\n    return tables;\n  } // https://webassembly.github.io/spec/binary/modules.html#memory-section\n\n  function parseMemorySection(numberOfElements) {\n    var memories = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryNode = parseMemoryType(i);\n      state.memoriesInModule.push(memoryNode);\n      memories.push(memoryNode);\n    }\n    return memories;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-startsec\n\n  function parseStartSection() {\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var startFuncIndex = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([startFuncIndex], \"index\");\n    return function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.start(t.indexLiteral(startFuncIndex)), endLoc, startLoc);\n    }();\n  } // https://webassembly.github.io/spec/binary/modules.html#data-section\n\n  function parseDataSection(numberOfElements) {\n    var dataEntries = [];\n    dump([numberOfElements], \"num elements\");\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryIndexu32 = readU32();\n      var memoryIndex = memoryIndexu32.value;\n      eatBytes(memoryIndexu32.nextIndex);\n      dump([memoryIndex], \"memory index\");\n      var instrs = [];\n      parseInstructionBlock(instrs);\n      var hasExtraInstrs = instrs.filter(function (i) {\n        return i.id !== \"end\";\n      }).length !== 1;\n      if (hasExtraInstrs) {\n        throw new _helperApiError.CompileError(\"data section offset must be a single instruction\");\n      }\n      var bytes = parseVec(function (b) {\n        return b;\n      });\n      dump([], \"init\");\n      dataEntries.push(t.data(t.memIndexLiteral(memoryIndex), instrs[0], t.byteArray(bytes)));\n    }\n    return dataEntries;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-section\n\n  function parseSection(sectionIndex) {\n    var sectionId = readByte();\n    eatBytes(1);\n    if (sectionId >= sectionIndex || sectionIndex === _helperWasmBytecode[\"default\"].sections.custom) {\n      sectionIndex = sectionId + 1;\n    } else {\n      if (sectionId !== _helperWasmBytecode[\"default\"].sections.custom) throw new _helperApiError.CompileError(\"Unexpected section: \" + toHex(sectionId));\n    }\n    var nextSectionIndex = sectionIndex;\n    var startOffset = offset;\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var sectionSizeInBytes = u32.value;\n    eatBytes(u32.nextIndex);\n    var sectionSizeInBytesNode = function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.numberLiteralFromRaw(sectionSizeInBytes), endLoc, startLoc);\n    }();\n    switch (sectionId) {\n      case _helperWasmBytecode[\"default\"].sections.type:\n        {\n          dumpSep(\"section Type\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc13 = getPosition();\n          var _u = readU32();\n          var numberOfTypes = _u.value;\n          eatBytes(_u.nextIndex);\n          var metadata = t.sectionMetadata(\"type\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTypes), endLoc, _startLoc13);\n          }());\n          var nodes = parseTypeSection(numberOfTypes);\n          return {\n            nodes: nodes,\n            metadata: metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.table:\n        {\n          dumpSep(\"section Table\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc14 = getPosition();\n          var _u2 = readU32();\n          var numberOfTable = _u2.value;\n          eatBytes(_u2.nextIndex);\n          dump([numberOfTable], \"num tables\");\n          var _metadata = t.sectionMetadata(\"table\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTable), endLoc, _startLoc14);\n          }());\n          var _nodes = parseTableSection(numberOfTable);\n          return {\n            nodes: _nodes,\n            metadata: _metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections[\"import\"]:\n        {\n          dumpSep(\"section Import\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc15 = getPosition();\n          var numberOfImportsu32 = readU32();\n          var numberOfImports = numberOfImportsu32.value;\n          eatBytes(numberOfImportsu32.nextIndex);\n          dump([numberOfImports], \"number of imports\");\n          var _metadata2 = t.sectionMetadata(\"import\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfImports), endLoc, _startLoc15);\n          }());\n          var _nodes2 = parseImportSection(numberOfImports);\n          return {\n            nodes: _nodes2,\n            metadata: _metadata2,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.func:\n        {\n          dumpSep(\"section Function\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc16 = getPosition();\n          var numberOfFunctionsu32 = readU32();\n          var numberOfFunctions = numberOfFunctionsu32.value;\n          eatBytes(numberOfFunctionsu32.nextIndex);\n          var _metadata3 = t.sectionMetadata(\"func\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFunctions), endLoc, _startLoc16);\n          }());\n          parseFuncSection(numberOfFunctions);\n          var _nodes3 = [];\n          return {\n            nodes: _nodes3,\n            metadata: _metadata3,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections[\"export\"]:\n        {\n          dumpSep(\"section Export\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc17 = getPosition();\n          var _u3 = readU32();\n          var numberOfExport = _u3.value;\n          eatBytes(_u3.nextIndex);\n          var _metadata4 = t.sectionMetadata(\"export\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfExport), endLoc, _startLoc17);\n          }());\n          parseExportSection(numberOfExport);\n          var _nodes4 = [];\n          return {\n            nodes: _nodes4,\n            metadata: _metadata4,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.code:\n        {\n          dumpSep(\"section Code\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc18 = getPosition();\n          var _u4 = readU32();\n          var numberOfFuncs = _u4.value;\n          eatBytes(_u4.nextIndex);\n          var _metadata5 = t.sectionMetadata(\"code\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFuncs), endLoc, _startLoc18);\n          }());\n          if (opts.ignoreCodeSection === true) {\n            var remainingBytes = sectionSizeInBytes - _u4.nextIndex;\n            eatBytes(remainingBytes); // eat the entire section\n          } else {\n            parseCodeSection(numberOfFuncs);\n          }\n          var _nodes5 = [];\n          return {\n            nodes: _nodes5,\n            metadata: _metadata5,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.start:\n        {\n          dumpSep(\"section Start\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata6 = t.sectionMetadata(\"start\", startOffset, sectionSizeInBytesNode);\n          var _nodes6 = [parseStartSection()];\n          return {\n            nodes: _nodes6,\n            metadata: _metadata6,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.element:\n        {\n          dumpSep(\"section Element\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc19 = getPosition();\n          var numberOfElementsu32 = readU32();\n          var numberOfElements = numberOfElementsu32.value;\n          eatBytes(numberOfElementsu32.nextIndex);\n          var _metadata7 = t.sectionMetadata(\"element\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfElements), endLoc, _startLoc19);\n          }());\n          var _nodes7 = parseElemSection(numberOfElements);\n          return {\n            nodes: _nodes7,\n            metadata: _metadata7,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.global:\n        {\n          dumpSep(\"section Global\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc20 = getPosition();\n          var numberOfGlobalsu32 = readU32();\n          var numberOfGlobals = numberOfGlobalsu32.value;\n          eatBytes(numberOfGlobalsu32.nextIndex);\n          var _metadata8 = t.sectionMetadata(\"global\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfGlobals), endLoc, _startLoc20);\n          }());\n          var _nodes8 = parseGlobalSection(numberOfGlobals);\n          return {\n            nodes: _nodes8,\n            metadata: _metadata8,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.memory:\n        {\n          dumpSep(\"section Memory\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _startLoc21 = getPosition();\n          var _numberOfElementsu = readU32();\n          var _numberOfElements = _numberOfElementsu.value;\n          eatBytes(_numberOfElementsu.nextIndex);\n          var _metadata9 = t.sectionMetadata(\"memory\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements), endLoc, _startLoc21);\n          }());\n          var _nodes9 = parseMemorySection(_numberOfElements);\n          return {\n            nodes: _nodes9,\n            metadata: _metadata9,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n      case _helperWasmBytecode[\"default\"].sections.data:\n        {\n          dumpSep(\"section Data\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata10 = t.sectionMetadata(\"data\", startOffset, sectionSizeInBytesNode);\n          var _startLoc22 = getPosition();\n          var _numberOfElementsu2 = readU32();\n          var _numberOfElements2 = _numberOfElementsu2.value;\n          eatBytes(_numberOfElementsu2.nextIndex);\n          _metadata10.vectorOfSize = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements2), endLoc, _startLoc22);\n          }();\n          if (opts.ignoreDataSection === true) {\n            var _remainingBytes = sectionSizeInBytes - _numberOfElementsu2.nextIndex;\n            eatBytes(_remainingBytes); // eat the entire section\n\n            dumpSep(\"ignore data (\" + sectionSizeInBytes + \" bytes)\");\n            return {\n              nodes: [],\n              metadata: _metadata10,\n              nextSectionIndex: nextSectionIndex\n            };\n          } else {\n            var _nodes10 = parseDataSection(_numberOfElements2);\n            return {\n              nodes: _nodes10,\n              metadata: _metadata10,\n              nextSectionIndex: nextSectionIndex\n            };\n          }\n        }\n      case _helperWasmBytecode[\"default\"].sections.custom:\n        {\n          dumpSep(\"section Custom\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata11 = [t.sectionMetadata(\"custom\", startOffset, sectionSizeInBytesNode)];\n          var sectionName = readUTF8String();\n          eatBytes(sectionName.nextIndex);\n          dump([], \"section name (\".concat(sectionName.value, \")\"));\n          var _remainingBytes2 = sectionSizeInBytes - sectionName.nextIndex;\n          if (sectionName.value === \"name\") {\n            var initialOffset = offset;\n            try {\n              _metadata11.push.apply(_metadata11, _toConsumableArray(parseNameSection(_remainingBytes2)));\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"name\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (initialOffset + _remainingBytes2));\n            }\n          } else if (sectionName.value === \"producers\") {\n            var _initialOffset = offset;\n            try {\n              _metadata11.push(parseProducersSection());\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"producers\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (_initialOffset + _remainingBytes2));\n            }\n          } else {\n            // We don't parse the custom section\n            eatBytes(_remainingBytes2);\n            dumpSep(\"ignore custom \" + JSON.stringify(sectionName.value) + \" section (\" + _remainingBytes2 + \" bytes)\");\n          }\n          return {\n            nodes: [],\n            metadata: _metadata11,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n    }\n    if (opts.errorOnUnknownSection) {\n      throw new _helperApiError.CompileError(\"Unexpected section: \" + toHex(sectionId));\n    } else {\n      dumpSep(\"section \" + toHex(sectionId));\n      dump([sectionId], \"section code\");\n      dump([sectionSizeInBytes], \"section size\");\n      eatBytes(sectionSizeInBytes);\n      dumpSep(\"ignoring (\" + sectionSizeInBytes + \" bytes)\");\n      return {\n        nodes: [],\n        metadata: [],\n        nextSectionIndex: 0\n      };\n    }\n  }\n  parseModuleHeader();\n  parseVersion();\n  var moduleFields = [];\n  var sectionIndex = 0;\n  var moduleMetadata = {\n    sections: [],\n    functionNames: [],\n    localNames: [],\n    producers: []\n  };\n  /**\n   * All the generate declaration are going to be stored in our state\n   */\n\n  while (offset < buf.length) {\n    var _parseSection = parseSection(sectionIndex),\n      nodes = _parseSection.nodes,\n      metadata = _parseSection.metadata,\n      nextSectionIndex = _parseSection.nextSectionIndex;\n    moduleFields.push.apply(moduleFields, _toConsumableArray(nodes));\n    var metadataArray = Array.isArray(metadata) ? metadata : [metadata];\n    metadataArray.forEach(function (metadataItem) {\n      // $FlowIgnore\n      if (metadataItem.type === \"FunctionNameMetadata\") {\n        moduleMetadata.functionNames.push(metadataItem); // $FlowIgnore\n      } else if (metadataItem.type === \"LocalNameMetadata\") {\n        moduleMetadata.localNames.push(metadataItem); // $FlowIgnore\n      } else if (metadataItem.type === \"ProducersSectionMetadata\") {\n        moduleMetadata.producers.push(metadataItem);\n      } else {\n        moduleMetadata.sections.push(metadataItem);\n      }\n    }); // Ignore custom section\n\n    if (nextSectionIndex) {\n      sectionIndex = nextSectionIndex;\n    }\n  }\n  /**\n   * Transform the state into AST nodes\n   */\n\n  var funcIndex = 0;\n  state.functionsInModule.forEach(function (func) {\n    var params = func.signature.params;\n    var result = func.signature.result;\n    var body = []; // External functions doesn't provide any code, can skip it here\n\n    if (func.isExternal === true) {\n      return;\n    }\n    var decodedElementInCodeSection = state.elementsInCodeSection[funcIndex];\n    if (opts.ignoreCodeSection === false) {\n      if (typeof decodedElementInCodeSection === \"undefined\") {\n        throw new _helperApiError.CompileError(\"func \" + toHex(funcIndex) + \" code not found\");\n      }\n      body = decodedElementInCodeSection.code;\n    }\n    funcIndex++;\n    var funcNode = t.func(func.id, t.signature(params, result), body);\n    if (func.isExternal === true) {\n      funcNode.isExternal = func.isExternal;\n    } // Add function position in the binary if possible\n\n    if (opts.ignoreCodeSection === false) {\n      var _startLoc23 = decodedElementInCodeSection.startLoc,\n        endLoc = decodedElementInCodeSection.endLoc,\n        bodySize = decodedElementInCodeSection.bodySize;\n      funcNode = t.withLoc(funcNode, endLoc, _startLoc23);\n      funcNode.metadata = {\n        bodySize: bodySize\n      };\n    }\n    moduleFields.push(funcNode);\n  });\n  state.elementsInExportSection.forEach(function (moduleExport) {\n    /**\n     * If the export has no id, we won't be able to call it from the outside\n     * so we can omit it\n     */\n    if (moduleExport.id != null) {\n      moduleFields.push(t.withLoc(t.moduleExport(moduleExport.name, t.moduleExportDescr(moduleExport.type, moduleExport.id)), moduleExport.endLoc, moduleExport.startLoc));\n    }\n  });\n  dumpSep(\"end of program\");\n  var module = t.module(null, moduleFields, t.moduleMetadata(moduleMetadata.sections, moduleMetadata.functionNames, moduleMetadata.localNames, moduleMetadata.producers));\n  return t.program([module]);\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","Object","defineProperty","exports","value","decode","_helperApiError","require","ieee754","_interopRequireWildcard","utf8","t","_leb","_helperWasmBytecode","_interopRequireDefault","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","toHex","Number","byteArrayEq","l","r","ab","opts","buf","Uint8Array","getUniqueName","getUniqueNameGenerator","offset","getPosition","line","column","dump","b","msg","pad","str","map","join","console","log","dumpSep","state","elementsInFuncSection","elementsInExportSection","elementsInCodeSection","memoriesInModule","typesInModule","functionsInModule","tablesInModule","globalsInModule","isEOF","eatBytes","readBytesAtOffset","_offset","numberOfBytes","push","readBytes","readF64","bytes","NUMBER_OF_BYTE_F64","decodeF64","Math","sign","Infinity","inf","nextIndex","isNaN","mantissa","pow","nan","readF32","NUMBER_OF_BYTE_F32","decodeF32","readUTF8String","lenu32","readU32","strlen","MAX_NUMBER_OF_BYTE_U32","buffer","Buffer","decodeUInt32","readVaruint32","readVaruint7","read32","decodeInt32","read64","MAX_NUMBER_OF_BYTE_U64","decodeInt64","readU64","decodeUInt64","readByte","parseModuleHeader","Error","header","magicModuleHeader","CompileError","parseVersion","version","moduleVersion","parseVec","cast","u32","elements","_byte","parseTypeSection","numberOfTypes","typeInstructionNodes","_startLoc","type","types","func","paramValtypes","valtypes","params","v","funcParam","result","endLoc","withLoc","typeInstruction","undefined","signature","parseImportSection","numberOfImports","imports","_startLoc2","moduleName","concat","descrTypeByte","descrType","importTypes","importDescr","indexU32","typeindex","id","funcImportDescr","identifier","isExternal","parseGlobalType","globalNode","global","parseTableType","memoryNode","parseMemoryType","moduleImport","parseFuncSection","numberOfFunctions","withRaw","parseExportSection","numberOfExport","_startLoc3","typeIndex","indexu32","index","exportTypes","numberLiteralFromRaw","String","table","memNode","warn","startLoc","parseCodeSection","numberOfFuncs","_startLoc4","bodySizeU32","code","funcLocalNumU32","funcLocalNum","locals","_i","_startLoc5","localCountU32","localCount","valtypeByte","args","_i2","valtypeLiteral","localNode","instruction","apply","parseInstructionBlock","bodySize","_startLoc6","instructionAlreadyCreated","instructionByte","symbolsByByte","object","node","namedArgs","_startLoc7","blocktypeByte","blocktype","blockTypes","instr","label","loopNode","loopInstruction","_startLoc8","_blocktypeByte","_blocktype","testIndex","ifBody","elseIndex","_instr","consequentInstr","alternate","testInstrs","ifNode","ifInstruction","_startLoc9","_blocktypeByte2","_blocktype2","_instr2","_label","blockNode","blockInstruction","callNode","callInstruction","indexLiteral","_startLoc10","_callNode","callIndirectInstruction","flagU32","flag","indicesu32","indices","_indexu","_index","_indexU","_index2","aligun32","align","offsetu32","_offset2","value32","valueu32","_value","value64","_value2","high","low","_node","valueu64","_value3","_high","_low","_node2","valuef32","_value4","floatLiteral","valuef64","_value5","align32","_align","_offsetu","_offset3","_i3","numberOfArgs","_node3","objectInstruction","_node4","parseLimits","limitType","shared","min","max","u32min","parseInt","u32max","_u32min","limit","elementTypeByte","elementType","tableTypes","limits","globalTypeByte","globalType","globalTypes","parseNameSectionFunctions","functionNames","numberOfFunctionsu32","numbeOfFunctions","functionNameMetadata","parseNameSectionLocals","localNames","numbeOfFunctionsu32","functionIndexu32","functionIndex","numLocalsu32","numLocals","_i4","localIndexu32","localIndex","localNameMetadata","parseNameSection","remainingBytes","nameMetadata","initialOffset","sectionTypeByte","subSectionSizeInBytesu32","parseProducersSection","metadata","producersSectionMetadata","fields","language","sdk","fieldI","fieldName","valueCount","producerI","producerName","producerVersion","producerMetadataVersionedName","producers","parseGlobalSection","numberOfGlobals","globals","_startLoc11","init","parseElemSection","numberOfElements","elems","_startLoc12","tableindexu32","tableindex","indexValues","_i5","elemNode","elem","memory","parseTableSection","tables","tablesNode","parseMemorySection","memories","parseStartSection","startFuncIndex","start","parseDataSection","dataEntries","memoryIndexu32","memoryIndex","instrs","hasExtraInstrs","filter","data","memIndexLiteral","byteArray","parseSection","sectionIndex","sectionId","sections","custom","nextSectionIndex","startOffset","sectionSizeInBytes","sectionSizeInBytesNode","_startLoc13","_u","sectionMetadata","nodes","_startLoc14","_u2","numberOfTable","_metadata","_nodes","_startLoc15","numberOfImportsu32","_metadata2","_nodes2","_startLoc16","_metadata3","_nodes3","_startLoc17","_u3","_metadata4","_nodes4","_startLoc18","_u4","_metadata5","ignoreCodeSection","_nodes5","_metadata6","_nodes6","element","_startLoc19","numberOfElementsu32","_metadata7","_nodes7","_startLoc20","numberOfGlobalsu32","_metadata8","_nodes8","_startLoc21","_numberOfElementsu","_numberOfElements","_metadata9","_nodes9","_metadata10","_startLoc22","_numberOfElementsu2","_numberOfElements2","vectorOfSize","ignoreDataSection","_remainingBytes","_nodes10","_metadata11","sectionName","_remainingBytes2","e","message","_initialOffset","JSON","stringify","errorOnUnknownSection","moduleFields","moduleMetadata","_parseSection","metadataArray","forEach","metadataItem","funcIndex","body","decodedElementInCodeSection","funcNode","_startLoc23","moduleExport","moduleExportDescr","module","program"],"sources":["/home/hemanth/react-project/client/node_modules/@webassemblyjs/wasm-parser/lib/decoder.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = decode;\n\nvar _helperApiError = require(\"@webassemblyjs/helper-api-error\");\n\nvar ieee754 = _interopRequireWildcard(require(\"@webassemblyjs/ieee754\"));\n\nvar utf8 = _interopRequireWildcard(require(\"@webassemblyjs/utf8\"));\n\nvar t = _interopRequireWildcard(require(\"@webassemblyjs/ast\"));\n\nvar _leb = require(\"@webassemblyjs/leb128\");\n\nvar _helperWasmBytecode = _interopRequireDefault(require(\"@webassemblyjs/helper-wasm-bytecode\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction toHex(n) {\n  return \"0x\" + Number(n).toString(16);\n}\n\nfunction byteArrayEq(l, r) {\n  if (l.length !== r.length) {\n    return false;\n  }\n\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] !== r[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction decode(ab, opts) {\n  var buf = new Uint8Array(ab);\n  var getUniqueName = t.getUniqueNameGenerator();\n  var offset = 0;\n\n  function getPosition() {\n    return {\n      line: -1,\n      column: offset\n    };\n  }\n\n  function dump(b, msg) {\n    if (opts.dump === false) return;\n    var pad = \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n    var str = \"\";\n\n    if (b.length < 5) {\n      str = b.map(toHex).join(\" \");\n    } else {\n      str = \"...\";\n    }\n\n    console.log(toHex(offset) + \":\\t\", str, pad, \";\", msg);\n  }\n\n  function dumpSep(msg) {\n    if (opts.dump === false) return;\n    console.log(\";\", msg);\n  }\n  /**\n   * TODO(sven): we can atually use a same structure\n   * we are adding incrementally new features\n   */\n\n\n  var state = {\n    elementsInFuncSection: [],\n    elementsInExportSection: [],\n    elementsInCodeSection: [],\n\n    /**\n     * Decode memory from:\n     * - Memory section\n     */\n    memoriesInModule: [],\n\n    /**\n     * Decoded types from:\n     * - Type section\n     */\n    typesInModule: [],\n\n    /**\n     * Decoded functions from:\n     * - Function section\n     * - Import section\n     */\n    functionsInModule: [],\n\n    /**\n     * Decoded tables from:\n     * - Table section\n     */\n    tablesInModule: [],\n\n    /**\n     * Decoded globals from:\n     * - Global section\n     */\n    globalsInModule: []\n  };\n\n  function isEOF() {\n    return offset >= buf.length;\n  }\n\n  function eatBytes(n) {\n    offset = offset + n;\n  }\n\n  function readBytesAtOffset(_offset, numberOfBytes) {\n    var arr = [];\n\n    for (var i = 0; i < numberOfBytes; i++) {\n      arr.push(buf[_offset + i]);\n    }\n\n    return arr;\n  }\n\n  function readBytes(numberOfBytes) {\n    return readBytesAtOffset(offset, numberOfBytes);\n  }\n\n  function readF64() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F64);\n    var value = ieee754.decodeF64(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 16 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F64\n    };\n  }\n\n  function readF32() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F32);\n    var value = ieee754.decodeF32(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 128 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F32\n    };\n  }\n\n  function readUTF8String() {\n    var lenu32 = readU32(); // Don't eat any bytes. Instead, peek ahead of the current offset using\n    // readBytesAtOffset below. This keeps readUTF8String neutral with respect\n    // to the current offset, just like the other readX functions.\n\n    var strlen = lenu32.value;\n    dump([strlen], \"string length\");\n    var bytes = readBytesAtOffset(offset + lenu32.nextIndex, strlen);\n    var value = utf8.decode(bytes);\n    return {\n      value: value,\n      nextIndex: strlen + lenu32.nextIndex\n    };\n  }\n  /**\n   * Decode an unsigned 32bits integer\n   *\n   * The length will be handled by the leb librairy, we pass the max number of\n   * byte.\n   */\n\n\n  function readU32() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt32)(buffer);\n  }\n\n  function readVaruint32() {\n    // where 32 bits = max 4 bytes\n    var bytes = readBytes(4);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt32)(buffer);\n  }\n\n  function readVaruint7() {\n    // where 7 bits = max 1 bytes\n    var bytes = readBytes(1);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt32)(buffer);\n  }\n  /**\n   * Decode a signed 32bits interger\n   */\n\n\n  function read32() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeInt32)(buffer);\n  }\n  /**\n   * Decode a signed 64bits integer\n   */\n\n\n  function read64() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeInt64)(buffer);\n  }\n\n  function readU64() {\n    var bytes = readBytes(_leb.MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return (0, _leb.decodeUInt64)(buffer);\n  }\n\n  function readByte() {\n    return readBytes(1)[0];\n  }\n\n  function parseModuleHeader() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var header = readBytes(4);\n\n    if (byteArrayEq(_helperWasmBytecode[\"default\"].magicModuleHeader, header) === false) {\n      throw new _helperApiError.CompileError(\"magic header not detected\");\n    }\n\n    dump(header, \"wasm magic header\");\n    eatBytes(4);\n  }\n\n  function parseVersion() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var version = readBytes(4);\n\n    if (byteArrayEq(_helperWasmBytecode[\"default\"].moduleVersion, version) === false) {\n      throw new _helperApiError.CompileError(\"unknown binary version\");\n    }\n\n    dump(version, \"wasm version\");\n    eatBytes(4);\n  }\n\n  function parseVec(cast) {\n    var u32 = readU32();\n    var length = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([length], \"number\");\n\n    if (length === 0) {\n      return [];\n    }\n\n    var elements = [];\n\n    for (var i = 0; i < length; i++) {\n      var _byte = readByte();\n\n      eatBytes(1);\n      var value = cast(_byte);\n      dump([_byte], value);\n\n      if (typeof value === \"undefined\") {\n        throw new _helperApiError.CompileError(\"Internal failure: parseVec could not cast the value\");\n      }\n\n      elements.push(value);\n    }\n\n    return elements;\n  } // Type section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-typesec\n\n\n  function parseTypeSection(numberOfTypes) {\n    var typeInstructionNodes = [];\n    dump([numberOfTypes], \"num types\");\n\n    for (var i = 0; i < numberOfTypes; i++) {\n      var _startLoc = getPosition();\n\n      dumpSep(\"type \" + i);\n      var type = readByte();\n      eatBytes(1);\n\n      if (type == _helperWasmBytecode[\"default\"].types.func) {\n        dump([type], \"func\");\n        var paramValtypes = parseVec(function (b) {\n          return _helperWasmBytecode[\"default\"].valtypes[b];\n        });\n        var params = paramValtypes.map(function (v) {\n          return t.funcParam(\n          /*valtype*/\n          v);\n        });\n        var result = parseVec(function (b) {\n          return _helperWasmBytecode[\"default\"].valtypes[b];\n        });\n        typeInstructionNodes.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.typeInstruction(undefined, t.signature(params, result)), endLoc, _startLoc);\n        }());\n        state.typesInModule.push({\n          params: params,\n          result: result\n        });\n      } else {\n        throw new Error(\"Unsupported type: \" + toHex(type));\n      }\n    }\n\n    return typeInstructionNodes;\n  } // Import section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-importsec\n\n\n  function parseImportSection(numberOfImports) {\n    var imports = [];\n\n    for (var i = 0; i < numberOfImports; i++) {\n      dumpSep(\"import header \" + i);\n\n      var _startLoc2 = getPosition();\n      /**\n       * Module name\n       */\n\n\n      var moduleName = readUTF8String();\n      eatBytes(moduleName.nextIndex);\n      dump([], \"module name (\".concat(moduleName.value, \")\"));\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"name (\".concat(name.value, \")\"));\n      /**\n       * Import descr\n       */\n\n      var descrTypeByte = readByte();\n      eatBytes(1);\n      var descrType = _helperWasmBytecode[\"default\"].importTypes[descrTypeByte];\n      dump([descrTypeByte], \"import kind\");\n\n      if (typeof descrType === \"undefined\") {\n        throw new _helperApiError.CompileError(\"Unknown import description type: \" + toHex(descrTypeByte));\n      }\n\n      var importDescr = void 0;\n\n      if (descrType === \"func\") {\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new _helperApiError.CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var id = getUniqueName(\"func\");\n        importDescr = t.funcImportDescr(id, t.signature(signature.params, signature.result));\n        state.functionsInModule.push({\n          id: t.identifier(name.value),\n          signature: signature,\n          isExternal: true\n        });\n      } else if (descrType === \"global\") {\n        importDescr = parseGlobalType();\n        var globalNode = t.global(importDescr, []);\n        state.globalsInModule.push(globalNode);\n      } else if (descrType === \"table\") {\n        importDescr = parseTableType(i);\n      } else if (descrType === \"memory\") {\n        var memoryNode = parseMemoryType(0);\n        state.memoriesInModule.push(memoryNode);\n        importDescr = memoryNode;\n      } else {\n        throw new _helperApiError.CompileError(\"Unsupported import of type: \" + descrType);\n      }\n\n      imports.push(function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.moduleImport(moduleName.value, name.value, importDescr), endLoc, _startLoc2);\n      }());\n    }\n\n    return imports;\n  } // Function section\n  // https://webassembly.github.io/spec/binary/modules.html#function-section\n\n\n  function parseFuncSection(numberOfFunctions) {\n    dump([numberOfFunctions], \"num funcs\");\n\n    for (var i = 0; i < numberOfFunctions; i++) {\n      var indexU32 = readU32();\n      var typeindex = indexU32.value;\n      eatBytes(indexU32.nextIndex);\n      dump([typeindex], \"type index\");\n      var signature = state.typesInModule[typeindex];\n\n      if (typeof signature === \"undefined\") {\n        throw new _helperApiError.CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n      } // preserve anonymous, a name might be resolved later\n\n\n      var id = t.withRaw(t.identifier(getUniqueName(\"func\")), \"\");\n      state.functionsInModule.push({\n        id: id,\n        signature: signature,\n        isExternal: false\n      });\n    }\n  } // Export section\n  // https://webassembly.github.io/spec/binary/modules.html#export-section\n\n\n  function parseExportSection(numberOfExport) {\n    dump([numberOfExport], \"num exports\"); // Parse vector of exports\n\n    for (var i = 0; i < numberOfExport; i++) {\n      var _startLoc3 = getPosition();\n      /**\n       * Name\n       */\n\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"export name (\".concat(name.value, \")\"));\n      /**\n       * exportdescr\n       */\n\n      var typeIndex = readByte();\n      eatBytes(1);\n      dump([typeIndex], \"export kind\");\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      dump([index], \"export index\");\n      var id = void 0,\n          signature = void 0;\n\n      if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Func\") {\n        var func = state.functionsInModule[index];\n\n        if (typeof func === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown function (\".concat(index, \")\"));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = func.signature;\n      } else if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Table\") {\n        var table = state.tablesInModule[index];\n\n        if (typeof table === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown table \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Memory\") {\n        var memNode = state.memoriesInModule[index];\n\n        if (typeof memNode === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown memory \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (_helperWasmBytecode[\"default\"].exportTypes[typeIndex] === \"Global\") {\n        var global = state.globalsInModule[index];\n\n        if (typeof global === \"undefined\") {\n          throw new _helperApiError.CompileError(\"unknown global \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else {\n        console.warn(\"Unsupported export type: \" + toHex(typeIndex));\n        return;\n      }\n\n      var endLoc = getPosition();\n      state.elementsInExportSection.push({\n        name: name.value,\n        type: _helperWasmBytecode[\"default\"].exportTypes[typeIndex],\n        signature: signature,\n        id: id,\n        index: index,\n        endLoc: endLoc,\n        startLoc: _startLoc3\n      });\n    }\n  } // Code section\n  // https://webassembly.github.io/spec/binary/modules.html#code-section\n\n\n  function parseCodeSection(numberOfFuncs) {\n    dump([numberOfFuncs], \"number functions\"); // Parse vector of function\n\n    for (var i = 0; i < numberOfFuncs; i++) {\n      var _startLoc4 = getPosition();\n\n      dumpSep(\"function body \" + i); // the u32 size of the function code in bytes\n      // Ignore it for now\n\n      var bodySizeU32 = readU32();\n      eatBytes(bodySizeU32.nextIndex);\n      dump([bodySizeU32.value], \"function body size\");\n      var code = [];\n      /**\n       * Parse locals\n       */\n\n      var funcLocalNumU32 = readU32();\n      var funcLocalNum = funcLocalNumU32.value;\n      eatBytes(funcLocalNumU32.nextIndex);\n      dump([funcLocalNum], \"num locals\");\n      var locals = [];\n\n      for (var _i = 0; _i < funcLocalNum; _i++) {\n        var _startLoc5 = getPosition();\n\n        var localCountU32 = readU32();\n        var localCount = localCountU32.value;\n        eatBytes(localCountU32.nextIndex);\n        dump([localCount], \"num local\");\n        var valtypeByte = readByte();\n        eatBytes(1);\n        var type = _helperWasmBytecode[\"default\"].valtypes[valtypeByte];\n        var args = [];\n\n        for (var _i2 = 0; _i2 < localCount; _i2++) {\n          args.push(t.valtypeLiteral(type));\n        }\n\n        var localNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(\"local\", args), endLoc, _startLoc5);\n        }();\n\n        locals.push(localNode);\n        dump([valtypeByte], type);\n\n        if (typeof type === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected valtype: \" + toHex(valtypeByte));\n        }\n      }\n\n      code.push.apply(code, locals); // Decode instructions until the end\n\n      parseInstructionBlock(code);\n      var endLoc = getPosition();\n      state.elementsInCodeSection.push({\n        code: code,\n        locals: locals,\n        endLoc: endLoc,\n        startLoc: _startLoc4,\n        bodySize: bodySizeU32.value\n      });\n    }\n  }\n\n  function parseInstructionBlock(code) {\n    while (true) {\n      var _startLoc6 = getPosition();\n\n      var instructionAlreadyCreated = false;\n      var instructionByte = readByte();\n      eatBytes(1);\n\n      if (instructionByte === 0xfe) {\n        instructionByte = 0xfe00 + readByte();\n        eatBytes(1);\n      }\n\n      var instruction = _helperWasmBytecode[\"default\"].symbolsByByte[instructionByte];\n\n      if (typeof instruction === \"undefined\") {\n        throw new _helperApiError.CompileError(\"Unexpected instruction: \" + toHex(instructionByte));\n      }\n\n      if (typeof instruction.object === \"string\") {\n        dump([instructionByte], \"\".concat(instruction.object, \".\").concat(instruction.name));\n      } else {\n        dump([instructionByte], instruction.name);\n      }\n      /**\n       * End of the function\n       */\n\n\n      if (instruction.name === \"end\") {\n        var node = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(instruction.name), endLoc, _startLoc6);\n        }();\n\n        code.push(node);\n        break;\n      }\n\n      var args = [];\n      var namedArgs = void 0;\n\n      if (instruction.name === \"loop\") {\n        var _startLoc7 = getPosition();\n\n        var blocktypeByte = readByte();\n        eatBytes(1);\n        var blocktype = _helperWasmBytecode[\"default\"].blockTypes[blocktypeByte];\n        dump([blocktypeByte], \"blocktype\");\n\n        if (typeof blocktype === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected blocktype: \" + toHex(blocktypeByte));\n        }\n\n        var instr = [];\n        parseInstructionBlock(instr); // preserve anonymous\n\n        var label = t.withRaw(t.identifier(getUniqueName(\"loop\")), \"\");\n\n        var loopNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.loopInstruction(label, blocktype, instr), endLoc, _startLoc7);\n        }();\n\n        code.push(loopNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"if\") {\n        var _startLoc8 = getPosition();\n\n        var _blocktypeByte = readByte();\n\n        eatBytes(1);\n        var _blocktype = _helperWasmBytecode[\"default\"].blockTypes[_blocktypeByte];\n        dump([_blocktypeByte], \"blocktype\");\n\n        if (typeof _blocktype === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte));\n        }\n\n        var testIndex = t.withRaw(t.identifier(getUniqueName(\"if\")), \"\");\n        var ifBody = [];\n        parseInstructionBlock(ifBody); // Defaults to no alternate\n\n        var elseIndex = 0;\n\n        for (elseIndex = 0; elseIndex < ifBody.length; ++elseIndex) {\n          var _instr = ifBody[elseIndex];\n\n          if (_instr.type === \"Instr\" && _instr.id === \"else\") {\n            break;\n          }\n        }\n\n        var consequentInstr = ifBody.slice(0, elseIndex);\n        var alternate = ifBody.slice(elseIndex + 1); // wast sugar\n\n        var testInstrs = [];\n\n        var ifNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.ifInstruction(testIndex, testInstrs, _blocktype, consequentInstr, alternate), endLoc, _startLoc8);\n        }();\n\n        code.push(ifNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"block\") {\n        var _startLoc9 = getPosition();\n\n        var _blocktypeByte2 = readByte();\n\n        eatBytes(1);\n        var _blocktype2 = _helperWasmBytecode[\"default\"].blockTypes[_blocktypeByte2];\n        dump([_blocktypeByte2], \"blocktype\");\n\n        if (typeof _blocktype2 === \"undefined\") {\n          throw new _helperApiError.CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte2));\n        }\n\n        var _instr2 = [];\n        parseInstructionBlock(_instr2); // preserve anonymous\n\n        var _label = t.withRaw(t.identifier(getUniqueName(\"block\")), \"\");\n\n        var blockNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.blockInstruction(_label, _instr2, _blocktype2), endLoc, _startLoc9);\n        }();\n\n        code.push(blockNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call\") {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n\n        var callNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.callInstruction(t.indexLiteral(index)), endLoc, _startLoc6);\n        }();\n\n        code.push(callNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call_indirect\") {\n        var _startLoc10 = getPosition();\n\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new _helperApiError.CompileError(\"call_indirect signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var _callNode = t.callIndirectInstruction(t.signature(signature.params, signature.result), []);\n\n        var flagU32 = readU32();\n        var flag = flagU32.value; // 0x00 - reserved byte\n\n        eatBytes(flagU32.nextIndex);\n\n        if (flag !== 0) {\n          throw new _helperApiError.CompileError(\"zero flag expected\");\n        }\n\n        code.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(_callNode, endLoc, _startLoc10);\n        }());\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"br_table\") {\n        var indicesu32 = readU32();\n        var indices = indicesu32.value;\n        eatBytes(indicesu32.nextIndex);\n        dump([indices], \"num indices\");\n\n        for (var i = 0; i <= indices; i++) {\n          var _indexu = readU32();\n\n          var _index = _indexu.value;\n          eatBytes(_indexu.nextIndex);\n          dump([_index], \"index\");\n          args.push(t.numberLiteralFromRaw(_indexu.value.toString(), \"u32\"));\n        }\n      } else if (instructionByte >= 0x28 && instructionByte <= 0x40) {\n        /**\n         * Memory instructions\n         */\n        if (instruction.name === \"grow_memory\" || instruction.name === \"current_memory\") {\n          var _indexU = readU32();\n\n          var _index2 = _indexU.value;\n          eatBytes(_indexU.nextIndex);\n\n          if (_index2 !== 0) {\n            throw new Error(\"zero flag expected\");\n          }\n\n          dump([_index2], \"index\");\n        } else {\n          var aligun32 = readU32();\n          var align = aligun32.value;\n          eatBytes(aligun32.nextIndex);\n          dump([align], \"align\");\n          var offsetu32 = readU32();\n          var _offset2 = offsetu32.value;\n          eatBytes(offsetu32.nextIndex);\n          dump([_offset2], \"offset\");\n          if (namedArgs === undefined) namedArgs = {};\n          namedArgs.offset = t.numberLiteralFromRaw(_offset2);\n        }\n      } else if (instructionByte >= 0x41 && instructionByte <= 0x44) {\n        /**\n         * Numeric instructions\n         */\n        if (instruction.object === \"i32\") {\n          var value32 = read32();\n          var value = value32.value;\n          eatBytes(value32.nextIndex);\n          dump([value], \"i32 value\");\n          args.push(t.numberLiteralFromRaw(value));\n        }\n\n        if (instruction.object === \"u32\") {\n          var valueu32 = readU32();\n          var _value = valueu32.value;\n          eatBytes(valueu32.nextIndex);\n          dump([_value], \"u32 value\");\n          args.push(t.numberLiteralFromRaw(_value));\n        }\n\n        if (instruction.object === \"i64\") {\n          var value64 = read64();\n          var _value2 = value64.value;\n          eatBytes(value64.nextIndex);\n          dump([Number(_value2.toString())], \"i64 value\");\n          var high = _value2.high,\n              low = _value2.low;\n          var _node = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: high,\n              low: low\n            }\n          };\n          args.push(_node);\n        }\n\n        if (instruction.object === \"u64\") {\n          var valueu64 = readU64();\n          var _value3 = valueu64.value;\n          eatBytes(valueu64.nextIndex);\n          dump([Number(_value3.toString())], \"u64 value\");\n          var _high = _value3.high,\n              _low = _value3.low;\n          var _node2 = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: _high,\n              low: _low\n            }\n          };\n          args.push(_node2);\n        }\n\n        if (instruction.object === \"f32\") {\n          var valuef32 = readF32();\n          var _value4 = valuef32.value;\n          eatBytes(valuef32.nextIndex);\n          dump([_value4], \"f32 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value4, valuef32.nan, valuef32.inf, String(_value4)));\n        }\n\n        if (instruction.object === \"f64\") {\n          var valuef64 = readF64();\n          var _value5 = valuef64.value;\n          eatBytes(valuef64.nextIndex);\n          dump([_value5], \"f64 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value5, valuef64.nan, valuef64.inf, String(_value5)));\n        }\n      } else if (instructionByte >= 0xfe00 && instructionByte <= 0xfeff) {\n        /**\n         * Atomic memory instructions\n         */\n        var align32 = readU32();\n        var _align = align32.value;\n        eatBytes(align32.nextIndex);\n        dump([_align], \"align\");\n\n        var _offsetu = readU32();\n\n        var _offset3 = _offsetu.value;\n        eatBytes(_offsetu.nextIndex);\n        dump([_offset3], \"offset\");\n      } else {\n        for (var _i3 = 0; _i3 < instruction.numberOfArgs; _i3++) {\n          var u32 = readU32();\n          eatBytes(u32.nextIndex);\n          dump([u32.value], \"argument \" + _i3);\n          args.push(t.numberLiteralFromRaw(u32.value));\n        }\n      }\n\n      if (instructionAlreadyCreated === false) {\n        if (typeof instruction.object === \"string\") {\n          var _node3 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.objectInstruction(instruction.name, instruction.object, args, namedArgs), endLoc, _startLoc6);\n          }();\n\n          code.push(_node3);\n        } else {\n          var _node4 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.instruction(instruction.name, args, namedArgs), endLoc, _startLoc6);\n          }();\n\n          code.push(_node4);\n        }\n      }\n    }\n  } // https://webassembly.github.io/spec/core/binary/types.html#limits\n\n\n  function parseLimits() {\n    var limitType = readByte();\n    eatBytes(1);\n    var shared = limitType === 0x03;\n    dump([limitType], \"limit type\" + (shared ? \" (shared)\" : \"\"));\n    var min, max;\n\n    if (limitType === 0x01 || limitType === 0x03 // shared limits\n    ) {\n      var u32min = readU32();\n      min = parseInt(u32min.value);\n      eatBytes(u32min.nextIndex);\n      dump([min], \"min\");\n      var u32max = readU32();\n      max = parseInt(u32max.value);\n      eatBytes(u32max.nextIndex);\n      dump([max], \"max\");\n    }\n\n    if (limitType === 0x00) {\n      var _u32min = readU32();\n\n      min = parseInt(_u32min.value);\n      eatBytes(_u32min.nextIndex);\n      dump([min], \"min\");\n    }\n\n    return t.limit(min, max, shared);\n  } // https://webassembly.github.io/spec/core/binary/types.html#binary-tabletype\n\n\n  function parseTableType(index) {\n    var name = t.withRaw(t.identifier(getUniqueName(\"table\")), String(index));\n    var elementTypeByte = readByte();\n    eatBytes(1);\n    dump([elementTypeByte], \"element type\");\n    var elementType = _helperWasmBytecode[\"default\"].tableTypes[elementTypeByte];\n\n    if (typeof elementType === \"undefined\") {\n      throw new _helperApiError.CompileError(\"Unknown element type in table: \" + toHex(elementType));\n    }\n\n    var limits = parseLimits();\n    return t.table(elementType, limits, name);\n  } // https://webassembly.github.io/spec/binary/types.html#global-types\n\n\n  function parseGlobalType() {\n    var valtypeByte = readByte();\n    eatBytes(1);\n    var type = _helperWasmBytecode[\"default\"].valtypes[valtypeByte];\n    dump([valtypeByte], type);\n\n    if (typeof type === \"undefined\") {\n      throw new _helperApiError.CompileError(\"Unknown valtype: \" + toHex(valtypeByte));\n    }\n\n    var globalTypeByte = readByte();\n    eatBytes(1);\n    var globalType = _helperWasmBytecode[\"default\"].globalTypes[globalTypeByte];\n    dump([globalTypeByte], \"global type (\".concat(globalType, \")\"));\n\n    if (typeof globalType === \"undefined\") {\n      throw new _helperApiError.CompileError(\"Invalid mutability: \" + toHex(globalTypeByte));\n    }\n\n    return t.globalType(type, globalType);\n  } // function parseNameModule() {\n  //   const lenu32 = readVaruint32();\n  //   eatBytes(lenu32.nextIndex);\n  //   console.log(\"len\", lenu32);\n  //   const strlen = lenu32.value;\n  //   dump([strlen], \"string length\");\n  //   const bytes = readBytes(strlen);\n  //   eatBytes(strlen);\n  //   const value = utf8.decode(bytes);\n  //   return [t.moduleNameMetadata(value)];\n  // }\n  // this section contains an array of function names and indices\n\n\n  function parseNameSectionFunctions() {\n    var functionNames = [];\n    var numberOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numberOfFunctionsu32.value;\n    eatBytes(numberOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      functionNames.push(t.functionNameMetadata(name.value, index));\n    }\n\n    return functionNames;\n  }\n\n  function parseNameSectionLocals() {\n    var localNames = [];\n    var numbeOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numbeOfFunctionsu32.value;\n    eatBytes(numbeOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var functionIndexu32 = readU32();\n      var functionIndex = functionIndexu32.value;\n      eatBytes(functionIndexu32.nextIndex);\n      var numLocalsu32 = readU32();\n      var numLocals = numLocalsu32.value;\n      eatBytes(numLocalsu32.nextIndex);\n\n      for (var _i4 = 0; _i4 < numLocals; _i4++) {\n        var localIndexu32 = readU32();\n        var localIndex = localIndexu32.value;\n        eatBytes(localIndexu32.nextIndex);\n        var name = readUTF8String();\n        eatBytes(name.nextIndex);\n        localNames.push(t.localNameMetadata(name.value, localIndex, functionIndex));\n      }\n    }\n\n    return localNames;\n  } // this is a custom section used for name resolution\n  // https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n\n\n  function parseNameSection(remainingBytes) {\n    var nameMetadata = [];\n    var initialOffset = offset;\n\n    while (offset - initialOffset < remainingBytes) {\n      // name_type\n      var sectionTypeByte = readVaruint7();\n      eatBytes(sectionTypeByte.nextIndex); // name_payload_len\n\n      var subSectionSizeInBytesu32 = readVaruint32();\n      eatBytes(subSectionSizeInBytesu32.nextIndex);\n\n      switch (sectionTypeByte.value) {\n        // case 0: {\n        // TODO(sven): re-enable that\n        // Current status: it seems that when we decode the module's name\n        // no name_payload_len is used.\n        //\n        // See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n        //\n        // nameMetadata.push(...parseNameModule());\n        // break;\n        // }\n        case 1:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionFunctions()));\n            break;\n          }\n\n        case 2:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionLocals()));\n            break;\n          }\n\n        default:\n          {\n            // skip unknown subsection\n            eatBytes(subSectionSizeInBytesu32.value);\n          }\n      }\n    }\n\n    return nameMetadata;\n  } // this is a custom section used for information about the producers\n  // https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md\n\n\n  function parseProducersSection() {\n    var metadata = t.producersSectionMetadata([]); // field_count\n\n    var sectionTypeByte = readVaruint32();\n    eatBytes(sectionTypeByte.nextIndex);\n    dump([sectionTypeByte.value], \"num of producers\");\n    var fields = {\n      language: [],\n      \"processed-by\": [],\n      sdk: []\n    }; // fields\n\n    for (var fieldI = 0; fieldI < sectionTypeByte.value; fieldI++) {\n      // field_name\n      var fieldName = readUTF8String();\n      eatBytes(fieldName.nextIndex); // field_value_count\n\n      var valueCount = readVaruint32();\n      eatBytes(valueCount.nextIndex); // field_values\n\n      for (var producerI = 0; producerI < valueCount.value; producerI++) {\n        var producerName = readUTF8String();\n        eatBytes(producerName.nextIndex);\n        var producerVersion = readUTF8String();\n        eatBytes(producerVersion.nextIndex);\n        fields[fieldName.value].push(t.producerMetadataVersionedName(producerName.value, producerVersion.value));\n      }\n\n      metadata.producers.push(fields[fieldName.value]);\n    }\n\n    return metadata;\n  }\n\n  function parseGlobalSection(numberOfGlobals) {\n    var globals = [];\n    dump([numberOfGlobals], \"num globals\");\n\n    for (var i = 0; i < numberOfGlobals; i++) {\n      var _startLoc11 = getPosition();\n\n      var globalType = parseGlobalType();\n      /**\n       * Global expressions\n       */\n\n      var init = [];\n      parseInstructionBlock(init);\n\n      var node = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.global(globalType, init), endLoc, _startLoc11);\n      }();\n\n      globals.push(node);\n      state.globalsInModule.push(node);\n    }\n\n    return globals;\n  }\n\n  function parseElemSection(numberOfElements) {\n    var elems = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var _startLoc12 = getPosition();\n\n      var tableindexu32 = readU32();\n      var tableindex = tableindexu32.value;\n      eatBytes(tableindexu32.nextIndex);\n      dump([tableindex], \"table index\");\n      /**\n       * Parse instructions\n       */\n\n      var instr = [];\n      parseInstructionBlock(instr);\n      /**\n       * Parse ( vector function index ) *\n       */\n\n      var indicesu32 = readU32();\n      var indices = indicesu32.value;\n      eatBytes(indicesu32.nextIndex);\n      dump([indices], \"num indices\");\n      var indexValues = [];\n\n      for (var _i5 = 0; _i5 < indices; _i5++) {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        indexValues.push(t.indexLiteral(index));\n      }\n\n      var elemNode = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.elem(t.indexLiteral(tableindex), instr, indexValues), endLoc, _startLoc12);\n      }();\n\n      elems.push(elemNode);\n    }\n\n    return elems;\n  } // https://webassembly.github.io/spec/core/binary/types.html#memory-types\n\n\n  function parseMemoryType(i) {\n    var limits = parseLimits();\n    return t.memory(limits, t.indexLiteral(i));\n  } // https://webassembly.github.io/spec/binary/modules.html#table-section\n\n\n  function parseTableSection(numberOfElements) {\n    var tables = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var tablesNode = parseTableType(i);\n      state.tablesInModule.push(tablesNode);\n      tables.push(tablesNode);\n    }\n\n    return tables;\n  } // https://webassembly.github.io/spec/binary/modules.html#memory-section\n\n\n  function parseMemorySection(numberOfElements) {\n    var memories = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryNode = parseMemoryType(i);\n      state.memoriesInModule.push(memoryNode);\n      memories.push(memoryNode);\n    }\n\n    return memories;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-startsec\n\n\n  function parseStartSection() {\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var startFuncIndex = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([startFuncIndex], \"index\");\n    return function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.start(t.indexLiteral(startFuncIndex)), endLoc, startLoc);\n    }();\n  } // https://webassembly.github.io/spec/binary/modules.html#data-section\n\n\n  function parseDataSection(numberOfElements) {\n    var dataEntries = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryIndexu32 = readU32();\n      var memoryIndex = memoryIndexu32.value;\n      eatBytes(memoryIndexu32.nextIndex);\n      dump([memoryIndex], \"memory index\");\n      var instrs = [];\n      parseInstructionBlock(instrs);\n      var hasExtraInstrs = instrs.filter(function (i) {\n        return i.id !== \"end\";\n      }).length !== 1;\n\n      if (hasExtraInstrs) {\n        throw new _helperApiError.CompileError(\"data section offset must be a single instruction\");\n      }\n\n      var bytes = parseVec(function (b) {\n        return b;\n      });\n      dump([], \"init\");\n      dataEntries.push(t.data(t.memIndexLiteral(memoryIndex), instrs[0], t.byteArray(bytes)));\n    }\n\n    return dataEntries;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-section\n\n\n  function parseSection(sectionIndex) {\n    var sectionId = readByte();\n    eatBytes(1);\n\n    if (sectionId >= sectionIndex || sectionIndex === _helperWasmBytecode[\"default\"].sections.custom) {\n      sectionIndex = sectionId + 1;\n    } else {\n      if (sectionId !== _helperWasmBytecode[\"default\"].sections.custom) throw new _helperApiError.CompileError(\"Unexpected section: \" + toHex(sectionId));\n    }\n\n    var nextSectionIndex = sectionIndex;\n    var startOffset = offset;\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var sectionSizeInBytes = u32.value;\n    eatBytes(u32.nextIndex);\n\n    var sectionSizeInBytesNode = function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.numberLiteralFromRaw(sectionSizeInBytes), endLoc, startLoc);\n    }();\n\n    switch (sectionId) {\n      case _helperWasmBytecode[\"default\"].sections.type:\n        {\n          dumpSep(\"section Type\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc13 = getPosition();\n\n          var _u = readU32();\n\n          var numberOfTypes = _u.value;\n          eatBytes(_u.nextIndex);\n          var metadata = t.sectionMetadata(\"type\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTypes), endLoc, _startLoc13);\n          }());\n          var nodes = parseTypeSection(numberOfTypes);\n          return {\n            nodes: nodes,\n            metadata: metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.table:\n        {\n          dumpSep(\"section Table\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc14 = getPosition();\n\n          var _u2 = readU32();\n\n          var numberOfTable = _u2.value;\n          eatBytes(_u2.nextIndex);\n          dump([numberOfTable], \"num tables\");\n\n          var _metadata = t.sectionMetadata(\"table\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTable), endLoc, _startLoc14);\n          }());\n\n          var _nodes = parseTableSection(numberOfTable);\n\n          return {\n            nodes: _nodes,\n            metadata: _metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections[\"import\"]:\n        {\n          dumpSep(\"section Import\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc15 = getPosition();\n\n          var numberOfImportsu32 = readU32();\n          var numberOfImports = numberOfImportsu32.value;\n          eatBytes(numberOfImportsu32.nextIndex);\n          dump([numberOfImports], \"number of imports\");\n\n          var _metadata2 = t.sectionMetadata(\"import\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfImports), endLoc, _startLoc15);\n          }());\n\n          var _nodes2 = parseImportSection(numberOfImports);\n\n          return {\n            nodes: _nodes2,\n            metadata: _metadata2,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.func:\n        {\n          dumpSep(\"section Function\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc16 = getPosition();\n\n          var numberOfFunctionsu32 = readU32();\n          var numberOfFunctions = numberOfFunctionsu32.value;\n          eatBytes(numberOfFunctionsu32.nextIndex);\n\n          var _metadata3 = t.sectionMetadata(\"func\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFunctions), endLoc, _startLoc16);\n          }());\n\n          parseFuncSection(numberOfFunctions);\n          var _nodes3 = [];\n          return {\n            nodes: _nodes3,\n            metadata: _metadata3,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections[\"export\"]:\n        {\n          dumpSep(\"section Export\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc17 = getPosition();\n\n          var _u3 = readU32();\n\n          var numberOfExport = _u3.value;\n          eatBytes(_u3.nextIndex);\n\n          var _metadata4 = t.sectionMetadata(\"export\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfExport), endLoc, _startLoc17);\n          }());\n\n          parseExportSection(numberOfExport);\n          var _nodes4 = [];\n          return {\n            nodes: _nodes4,\n            metadata: _metadata4,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.code:\n        {\n          dumpSep(\"section Code\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc18 = getPosition();\n\n          var _u4 = readU32();\n\n          var numberOfFuncs = _u4.value;\n          eatBytes(_u4.nextIndex);\n\n          var _metadata5 = t.sectionMetadata(\"code\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFuncs), endLoc, _startLoc18);\n          }());\n\n          if (opts.ignoreCodeSection === true) {\n            var remainingBytes = sectionSizeInBytes - _u4.nextIndex;\n            eatBytes(remainingBytes); // eat the entire section\n          } else {\n            parseCodeSection(numberOfFuncs);\n          }\n\n          var _nodes5 = [];\n          return {\n            nodes: _nodes5,\n            metadata: _metadata5,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.start:\n        {\n          dumpSep(\"section Start\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata6 = t.sectionMetadata(\"start\", startOffset, sectionSizeInBytesNode);\n\n          var _nodes6 = [parseStartSection()];\n          return {\n            nodes: _nodes6,\n            metadata: _metadata6,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.element:\n        {\n          dumpSep(\"section Element\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc19 = getPosition();\n\n          var numberOfElementsu32 = readU32();\n          var numberOfElements = numberOfElementsu32.value;\n          eatBytes(numberOfElementsu32.nextIndex);\n\n          var _metadata7 = t.sectionMetadata(\"element\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfElements), endLoc, _startLoc19);\n          }());\n\n          var _nodes7 = parseElemSection(numberOfElements);\n\n          return {\n            nodes: _nodes7,\n            metadata: _metadata7,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.global:\n        {\n          dumpSep(\"section Global\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc20 = getPosition();\n\n          var numberOfGlobalsu32 = readU32();\n          var numberOfGlobals = numberOfGlobalsu32.value;\n          eatBytes(numberOfGlobalsu32.nextIndex);\n\n          var _metadata8 = t.sectionMetadata(\"global\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfGlobals), endLoc, _startLoc20);\n          }());\n\n          var _nodes8 = parseGlobalSection(numberOfGlobals);\n\n          return {\n            nodes: _nodes8,\n            metadata: _metadata8,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.memory:\n        {\n          dumpSep(\"section Memory\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc21 = getPosition();\n\n          var _numberOfElementsu = readU32();\n\n          var _numberOfElements = _numberOfElementsu.value;\n          eatBytes(_numberOfElementsu.nextIndex);\n\n          var _metadata9 = t.sectionMetadata(\"memory\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements), endLoc, _startLoc21);\n          }());\n\n          var _nodes9 = parseMemorySection(_numberOfElements);\n\n          return {\n            nodes: _nodes9,\n            metadata: _metadata9,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.data:\n        {\n          dumpSep(\"section Data\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata10 = t.sectionMetadata(\"data\", startOffset, sectionSizeInBytesNode);\n\n          var _startLoc22 = getPosition();\n\n          var _numberOfElementsu2 = readU32();\n\n          var _numberOfElements2 = _numberOfElementsu2.value;\n          eatBytes(_numberOfElementsu2.nextIndex);\n\n          _metadata10.vectorOfSize = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements2), endLoc, _startLoc22);\n          }();\n\n          if (opts.ignoreDataSection === true) {\n            var _remainingBytes = sectionSizeInBytes - _numberOfElementsu2.nextIndex;\n\n            eatBytes(_remainingBytes); // eat the entire section\n\n            dumpSep(\"ignore data (\" + sectionSizeInBytes + \" bytes)\");\n            return {\n              nodes: [],\n              metadata: _metadata10,\n              nextSectionIndex: nextSectionIndex\n            };\n          } else {\n            var _nodes10 = parseDataSection(_numberOfElements2);\n\n            return {\n              nodes: _nodes10,\n              metadata: _metadata10,\n              nextSectionIndex: nextSectionIndex\n            };\n          }\n        }\n\n      case _helperWasmBytecode[\"default\"].sections.custom:\n        {\n          dumpSep(\"section Custom\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata11 = [t.sectionMetadata(\"custom\", startOffset, sectionSizeInBytesNode)];\n          var sectionName = readUTF8String();\n          eatBytes(sectionName.nextIndex);\n          dump([], \"section name (\".concat(sectionName.value, \")\"));\n\n          var _remainingBytes2 = sectionSizeInBytes - sectionName.nextIndex;\n\n          if (sectionName.value === \"name\") {\n            var initialOffset = offset;\n\n            try {\n              _metadata11.push.apply(_metadata11, _toConsumableArray(parseNameSection(_remainingBytes2)));\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"name\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (initialOffset + _remainingBytes2));\n            }\n          } else if (sectionName.value === \"producers\") {\n            var _initialOffset = offset;\n\n            try {\n              _metadata11.push(parseProducersSection());\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"producers\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (_initialOffset + _remainingBytes2));\n            }\n          } else {\n            // We don't parse the custom section\n            eatBytes(_remainingBytes2);\n            dumpSep(\"ignore custom \" + JSON.stringify(sectionName.value) + \" section (\" + _remainingBytes2 + \" bytes)\");\n          }\n\n          return {\n            nodes: [],\n            metadata: _metadata11,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n    }\n\n    if (opts.errorOnUnknownSection) {\n      throw new _helperApiError.CompileError(\"Unexpected section: \" + toHex(sectionId));\n    } else {\n      dumpSep(\"section \" + toHex(sectionId));\n      dump([sectionId], \"section code\");\n      dump([sectionSizeInBytes], \"section size\");\n      eatBytes(sectionSizeInBytes);\n      dumpSep(\"ignoring (\" + sectionSizeInBytes + \" bytes)\");\n      return {\n        nodes: [],\n        metadata: [],\n        nextSectionIndex: 0\n      };\n    }\n  }\n\n  parseModuleHeader();\n  parseVersion();\n  var moduleFields = [];\n  var sectionIndex = 0;\n  var moduleMetadata = {\n    sections: [],\n    functionNames: [],\n    localNames: [],\n    producers: []\n  };\n  /**\n   * All the generate declaration are going to be stored in our state\n   */\n\n  while (offset < buf.length) {\n    var _parseSection = parseSection(sectionIndex),\n        nodes = _parseSection.nodes,\n        metadata = _parseSection.metadata,\n        nextSectionIndex = _parseSection.nextSectionIndex;\n\n    moduleFields.push.apply(moduleFields, _toConsumableArray(nodes));\n    var metadataArray = Array.isArray(metadata) ? metadata : [metadata];\n    metadataArray.forEach(function (metadataItem) {\n      // $FlowIgnore\n      if (metadataItem.type === \"FunctionNameMetadata\") {\n        moduleMetadata.functionNames.push(metadataItem); // $FlowIgnore\n      } else if (metadataItem.type === \"LocalNameMetadata\") {\n        moduleMetadata.localNames.push(metadataItem); // $FlowIgnore\n      } else if (metadataItem.type === \"ProducersSectionMetadata\") {\n        moduleMetadata.producers.push(metadataItem);\n      } else {\n        moduleMetadata.sections.push(metadataItem);\n      }\n    }); // Ignore custom section\n\n    if (nextSectionIndex) {\n      sectionIndex = nextSectionIndex;\n    }\n  }\n  /**\n   * Transform the state into AST nodes\n   */\n\n\n  var funcIndex = 0;\n  state.functionsInModule.forEach(function (func) {\n    var params = func.signature.params;\n    var result = func.signature.result;\n    var body = []; // External functions doesn't provide any code, can skip it here\n\n    if (func.isExternal === true) {\n      return;\n    }\n\n    var decodedElementInCodeSection = state.elementsInCodeSection[funcIndex];\n\n    if (opts.ignoreCodeSection === false) {\n      if (typeof decodedElementInCodeSection === \"undefined\") {\n        throw new _helperApiError.CompileError(\"func \" + toHex(funcIndex) + \" code not found\");\n      }\n\n      body = decodedElementInCodeSection.code;\n    }\n\n    funcIndex++;\n    var funcNode = t.func(func.id, t.signature(params, result), body);\n\n    if (func.isExternal === true) {\n      funcNode.isExternal = func.isExternal;\n    } // Add function position in the binary if possible\n\n\n    if (opts.ignoreCodeSection === false) {\n      var _startLoc23 = decodedElementInCodeSection.startLoc,\n          endLoc = decodedElementInCodeSection.endLoc,\n          bodySize = decodedElementInCodeSection.bodySize;\n      funcNode = t.withLoc(funcNode, endLoc, _startLoc23);\n      funcNode.metadata = {\n        bodySize: bodySize\n      };\n    }\n\n    moduleFields.push(funcNode);\n  });\n  state.elementsInExportSection.forEach(function (moduleExport) {\n    /**\n     * If the export has no id, we won't be able to call it from the outside\n     * so we can omit it\n     */\n    if (moduleExport.id != null) {\n      moduleFields.push(t.withLoc(t.moduleExport(moduleExport.name, t.moduleExportDescr(moduleExport.type, moduleExport.id)), moduleExport.endLoc, moduleExport.startLoc));\n    }\n  });\n  dumpSep(\"end of program\");\n  var module = t.module(null, moduleFields, t.moduleMetadata(moduleMetadata.sections, moduleMetadata.functionNames, moduleMetadata.localNames, moduleMetadata.producers));\n  return t.program([module]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}