{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./fs\").InputFileSystem} InputFileSystem */\n/** @typedef {(error: Error|null, result?: Buffer) => void} ErrorFirstCallback */\nconst backSlashCharCode = \"\\\\\".charCodeAt(0);\nconst slashCharCode = \"/\".charCodeAt(0);\nconst aLowerCaseCharCode = \"a\".charCodeAt(0);\nconst zLowerCaseCharCode = \"z\".charCodeAt(0);\nconst aUpperCaseCharCode = \"A\".charCodeAt(0);\nconst zUpperCaseCharCode = \"Z\".charCodeAt(0);\nconst _0CharCode = \"0\".charCodeAt(0);\nconst _9CharCode = \"9\".charCodeAt(0);\nconst plusCharCode = \"+\".charCodeAt(0);\nconst hyphenCharCode = \"-\".charCodeAt(0);\nconst colonCharCode = \":\".charCodeAt(0);\nconst hashCharCode = \"#\".charCodeAt(0);\nconst queryCharCode = \"?\".charCodeAt(0);\n/**\n * Get scheme if specifier is an absolute URL specifier\n * e.g. Absolute specifiers like 'file:///user/webpack/index.js'\n * https://tools.ietf.org/html/rfc3986#section-3.1\n * @param {string} specifier specifier\n * @returns {string|undefined} scheme if absolute URL specifier provided\n */\nfunction getScheme(specifier) {\n  const start = specifier.charCodeAt(0);\n\n  // First char maybe only a letter\n  if ((start < aLowerCaseCharCode || start > zLowerCaseCharCode) && (start < aUpperCaseCharCode || start > zUpperCaseCharCode)) {\n    return undefined;\n  }\n  let i = 1;\n  let ch = specifier.charCodeAt(i);\n  while (ch >= aLowerCaseCharCode && ch <= zLowerCaseCharCode || ch >= aUpperCaseCharCode && ch <= zUpperCaseCharCode || ch >= _0CharCode && ch <= _9CharCode || ch === plusCharCode || ch === hyphenCharCode) {\n    if (++i === specifier.length) return undefined;\n    ch = specifier.charCodeAt(i);\n  }\n\n  // Scheme must end with colon\n  if (ch !== colonCharCode) return undefined;\n\n  // Check for Windows absolute path\n  // https://url.spec.whatwg.org/#url-miscellaneous\n  if (i === 1) {\n    const nextChar = i + 1 < specifier.length ? specifier.charCodeAt(i + 1) : 0;\n    if (nextChar === 0 || nextChar === backSlashCharCode || nextChar === slashCharCode || nextChar === hashCharCode || nextChar === queryCharCode) {\n      return undefined;\n    }\n  }\n  return specifier.slice(0, i).toLowerCase();\n}\n\n/**\n * @param {string} specifier specifier\n * @returns {string|null} protocol if absolute URL specifier provided\n */\nfunction getProtocol(specifier) {\n  const scheme = getScheme(specifier);\n  return scheme === undefined ? undefined : scheme + \":\";\n}\nexports.getScheme = getScheme;\nexports.getProtocol = getProtocol;","map":{"version":3,"names":["backSlashCharCode","charCodeAt","slashCharCode","aLowerCaseCharCode","zLowerCaseCharCode","aUpperCaseCharCode","zUpperCaseCharCode","_0CharCode","_9CharCode","plusCharCode","hyphenCharCode","colonCharCode","hashCharCode","queryCharCode","getScheme","specifier","start","undefined","i","ch","length","nextChar","slice","toLowerCase","getProtocol","scheme","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/util/URLAbsoluteSpecifier.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./fs\").InputFileSystem} InputFileSystem */\n/** @typedef {(error: Error|null, result?: Buffer) => void} ErrorFirstCallback */\n\nconst backSlashCharCode = \"\\\\\".charCodeAt(0);\nconst slashCharCode = \"/\".charCodeAt(0);\nconst aLowerCaseCharCode = \"a\".charCodeAt(0);\nconst zLowerCaseCharCode = \"z\".charCodeAt(0);\nconst aUpperCaseCharCode = \"A\".charCodeAt(0);\nconst zUpperCaseCharCode = \"Z\".charCodeAt(0);\nconst _0CharCode = \"0\".charCodeAt(0);\nconst _9CharCode = \"9\".charCodeAt(0);\nconst plusCharCode = \"+\".charCodeAt(0);\nconst hyphenCharCode = \"-\".charCodeAt(0);\nconst colonCharCode = \":\".charCodeAt(0);\nconst hashCharCode = \"#\".charCodeAt(0);\nconst queryCharCode = \"?\".charCodeAt(0);\n/**\n * Get scheme if specifier is an absolute URL specifier\n * e.g. Absolute specifiers like 'file:///user/webpack/index.js'\n * https://tools.ietf.org/html/rfc3986#section-3.1\n * @param {string} specifier specifier\n * @returns {string|undefined} scheme if absolute URL specifier provided\n */\nfunction getScheme(specifier) {\n\tconst start = specifier.charCodeAt(0);\n\n\t// First char maybe only a letter\n\tif (\n\t\t(start < aLowerCaseCharCode || start > zLowerCaseCharCode) &&\n\t\t(start < aUpperCaseCharCode || start > zUpperCaseCharCode)\n\t) {\n\t\treturn undefined;\n\t}\n\n\tlet i = 1;\n\tlet ch = specifier.charCodeAt(i);\n\n\twhile (\n\t\t(ch >= aLowerCaseCharCode && ch <= zLowerCaseCharCode) ||\n\t\t(ch >= aUpperCaseCharCode && ch <= zUpperCaseCharCode) ||\n\t\t(ch >= _0CharCode && ch <= _9CharCode) ||\n\t\tch === plusCharCode ||\n\t\tch === hyphenCharCode\n\t) {\n\t\tif (++i === specifier.length) return undefined;\n\t\tch = specifier.charCodeAt(i);\n\t}\n\n\t// Scheme must end with colon\n\tif (ch !== colonCharCode) return undefined;\n\n\t// Check for Windows absolute path\n\t// https://url.spec.whatwg.org/#url-miscellaneous\n\tif (i === 1) {\n\t\tconst nextChar = i + 1 < specifier.length ? specifier.charCodeAt(i + 1) : 0;\n\t\tif (\n\t\t\tnextChar === 0 ||\n\t\t\tnextChar === backSlashCharCode ||\n\t\t\tnextChar === slashCharCode ||\n\t\t\tnextChar === hashCharCode ||\n\t\t\tnextChar === queryCharCode\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\treturn specifier.slice(0, i).toLowerCase();\n}\n\n/**\n * @param {string} specifier specifier\n * @returns {string|null} protocol if absolute URL specifier provided\n */\nfunction getProtocol(specifier) {\n\tconst scheme = getScheme(specifier);\n\treturn scheme === undefined ? undefined : scheme + \":\";\n}\n\nexports.getScheme = getScheme;\nexports.getProtocol = getProtocol;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}