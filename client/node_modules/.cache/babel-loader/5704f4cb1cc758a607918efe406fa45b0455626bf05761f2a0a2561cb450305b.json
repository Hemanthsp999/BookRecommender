{"ast":null,"code":"\"use strict\";\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\nfunction getPaths(context) {\n  const {\n    stats,\n    options\n  } = context;\n  /** @type {Stats[]} */\n\n  const childStats = /** @type {MultiStats} */\n  stats.stats ? /** @type {MultiStats} */\n  stats.stats : [/** @type {Stats} */\n  stats];\n  const publicPaths = [];\n  for (const {\n    compilation\n  } of childStats) {\n    // The `output.path` is always present and always absolute\n    const outputPath = compilation.getPath(compilation.outputOptions.path || \"\");\n    const publicPath = options.publicPath ? compilation.getPath(options.publicPath) : compilation.outputOptions.publicPath ? compilation.getPath(compilation.outputOptions.publicPath) : \"\";\n    publicPaths.push({\n      outputPath,\n      publicPath\n    });\n  }\n  return publicPaths;\n}\nmodule.exports = getPaths;","map":{"version":3,"names":["getPaths","context","stats","options","childStats","publicPaths","compilation","outputPath","getPath","outputOptions","path","publicPath","push","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack-dev-middleware/dist/utils/getPaths.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Stats} Stats */\n\n/** @typedef {import(\"webpack\").MultiStats} MultiStats */\n\n/** @typedef {import(\"../index.js\").IncomingMessage} IncomingMessage */\n\n/** @typedef {import(\"../index.js\").ServerResponse} ServerResponse */\n\n/**\n * @template {IncomingMessage} Request\n * @template {ServerResponse} Response\n * @param {import(\"../index.js\").Context<Request, Response>} context\n */\nfunction getPaths(context) {\n  const {\n    stats,\n    options\n  } = context;\n  /** @type {Stats[]} */\n\n  const childStats =\n  /** @type {MultiStats} */\n  stats.stats ?\n  /** @type {MultiStats} */\n  stats.stats : [\n  /** @type {Stats} */\n  stats];\n  const publicPaths = [];\n\n  for (const {\n    compilation\n  } of childStats) {\n    // The `output.path` is always present and always absolute\n    const outputPath = compilation.getPath(compilation.outputOptions.path || \"\");\n    const publicPath = options.publicPath ? compilation.getPath(options.publicPath) : compilation.outputOptions.publicPath ? compilation.getPath(compilation.outputOptions.publicPath) : \"\";\n    publicPaths.push({\n      outputPath,\n      publicPath\n    });\n  }\n\n  return publicPaths;\n}\n\nmodule.exports = getPaths;"],"mappings":"AAAA,YAAY;;AAEZ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQA,CAACC,OAAO,EAAE;EACzB,MAAM;IACJC,KAAK;IACLC;EACF,CAAC,GAAGF,OAAO;EACX;;EAEA,MAAMG,UAAU,GAChB;EACAF,KAAK,CAACA,KAAK,GACX;EACAA,KAAK,CAACA,KAAK,GAAG,CACd;EACAA,KAAK,CAAC;EACN,MAAMG,WAAW,GAAG,EAAE;EAEtB,KAAK,MAAM;IACTC;EACF,CAAC,IAAIF,UAAU,EAAE;IACf;IACA,MAAMG,UAAU,GAAGD,WAAW,CAACE,OAAO,CAACF,WAAW,CAACG,aAAa,CAACC,IAAI,IAAI,EAAE,CAAC;IAC5E,MAAMC,UAAU,GAAGR,OAAO,CAACQ,UAAU,GAAGL,WAAW,CAACE,OAAO,CAACL,OAAO,CAACQ,UAAU,CAAC,GAAGL,WAAW,CAACG,aAAa,CAACE,UAAU,GAAGL,WAAW,CAACE,OAAO,CAACF,WAAW,CAACG,aAAa,CAACE,UAAU,CAAC,GAAG,EAAE;IACvLN,WAAW,CAACO,IAAI,CAAC;MACfL,UAAU;MACVI;IACF,CAAC,CAAC;EACJ;EAEA,OAAON,WAAW;AACpB;AAEAQ,MAAM,CAACC,OAAO,GAAGd,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}