{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst {\n  validate\n} = require(\"schema-utils\");\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\nconst schema = require(\"./options.json\");\nconst {\n  minify\n} = require(\"./minify\");\n\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n/** @typedef {import(\"webpack\").Asset} Asset */\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n/** @typedef {import(\"@jridgewell/trace-mapping\").TraceMap} TraceMap */\n\n/** @typedef {RegExp | string} Rule */\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template T\n * @param fn {(function(): any) | undefined}\n * @returns {function(): T}\n */\nconst memoize = fn => {\n  let cache = false;\n  /** @type {T} */\n  let result;\n  return () => {\n    if (cache) {\n      return result;\n    }\n    result = /** @type {function(): any} */fn();\n    cache = true;\n    // Allow to clean up memory for fn\n    // and all dependent resources\n    // eslint-disable-next-line no-undefined, no-param-reassign\n    fn = undefined;\n    return result;\n  };\n};\nconst getTraceMapping = memoize(() =>\n// eslint-disable-next-line global-require\nrequire(\"@jridgewell/trace-mapping\"));\nconst getSerializeJavascript = memoize(() =>\n// eslint-disable-next-line global-require\nrequire(\"serialize-javascript\"));\n\n/**\n * @template [T=TerserOptions]\n */\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate( /** @type {Schema} */schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    });\n\n    // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n    const {\n      minify = /** @type {MinimizerImplementation<T>} */terserMinify,\n      terserOptions = /** @type {MinimizerOptions<T>} */{},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.line) {\n      const original = sourceMap && getTraceMapping().originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } = /** @type {Asset} */compilation.getAsset(name);\n      if (\n      // Skip double minimize assets from child compilation\n      info.minimized ||\n      // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind(\n      // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } = /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n      if (!output) {\n        numberOfAssets += 1;\n      }\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n    let initializedWorker;\n    /** @type {undefined | number} */\n    let numberOfWorkers;\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores);\n      // eslint-disable-next-line consistent-return\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        // eslint-disable-next-line global-require\n        const {\n          Worker\n        } = require(\"jest-worker\");\n        initializedWorker = /** @type {MinimizerWorker<T>} */\n\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        });\n\n        // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n        const workerStdout = initializedWorker.getStdout();\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n        const workerStderr = initializedWorker.getStderr();\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n        return initializedWorker;\n      };\n    }\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push( /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap = /** @type {SourceMapInput} */map;\n            }\n          }\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n\n          /**\n           * @type {InternalOptions<T>}\n           */\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: {\n                ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n          try {\n            output = await (getWorker ? getWorker().transform(getSerializeJavascript()(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push( /** @type {WebpackError} */\n\n            TerserPlugin.buildError(error, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput} */inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push( /** @type {WebpackError} */\n\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput} */inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n          let shebang;\n          if ( /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input, /** @type {SourceMapInput} */inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename = /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner;\n\n            // Add a banner to the original file\n            if ( /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner = /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push( /** @type {WebpackError} */warning);\n          }\n        }\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push( /** @type {WebpackError} */error);\n          }\n        }\n\n        /** @type {Record<string, any>} */\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output;\n\n        // Write extracted comments to commentsFilename\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n    const limit = getWorker && numberOfAssets > 0 ? /** @type {number} */numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, _ref) => {\n      let [from, value] = _ref;\n      const previous = /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([... /** @type {string}*/prevSource.source().split(\"\\n\\n\"), ... /** @type {string}*/extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n      const existingAsset = compilation.getAsset(commentsFilename);\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    }, /** @type {Promise<unknown>} */Promise.resolve());\n  }\n\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    }\n\n    // ES 11th\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n    return 5;\n  }\n\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = getSerializeJavascript()({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, _ref2) => {\n          let {\n            green,\n            formatFlag\n          } = _ref2;\n          return minimized ? /** @type {Function} */green( /** @type {Function} */formatFlag(\"minimized\")) : \"\";\n        });\n      });\n    });\n  }\n}\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"names":["path","require","os","validate","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","memoize","fn","cache","result","undefined","getTraceMapping","getSerializeJavascript","TerserPlugin","constructor","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","isSourceMap","input","Boolean","version","sources","Array","isArray","mappings","buildWarning","warning","file","builtWarning","Error","toString","hideStack","buildError","error","sourceMap","requestShortener","builtError","line","original","originalPositionFor","column","col","source","message","shorten","stack","split","slice","join","getAvailableNumberOfCores","cpus","length","Math","min","Number","optimize","compiler","compilation","assets","optimizeOptions","getCache","numberOfAssets","assetsForMinify","Promise","all","Object","keys","filter","info","getAsset","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","map","eTag","getLazyHashedEtag","cacheItem","getItemCache","output","getPromise","inputSource","getWorker","initializedWorker","numberOfWorkers","availableNumberOfCores","Worker","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","inputSourceMap","sourceFromInputSource","sourceAndMap","warnings","Buffer","isBuffer","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","TraceMap","code","item","shebang","banner","startsWith","firstNewlinePosition","indexOf","substring","commentsFilename","filename","query","querySplit","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","extractedCommentsSource","storePromise","newInfo","related","license","set","updateAsset","limit","end","from","reduce","previousPromise","_ref","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","existingAsset","emitAsset","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","apply","pluginName","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","statsPrinter","stats","print","for","_ref2","green","formatFlag","exports"],"sources":["/home/hemanth/react-project/client/node_modules/terser-webpack-plugin/dist/index.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst {\n  validate\n} = require(\"schema-utils\");\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\nconst schema = require(\"./options.json\");\nconst {\n  minify\n} = require(\"./minify\");\n\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n/** @typedef {import(\"webpack\").Asset} Asset */\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n/** @typedef {import(\"@jridgewell/trace-mapping\").TraceMap} TraceMap */\n\n/** @typedef {RegExp | string} Rule */\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template T\n * @param fn {(function(): any) | undefined}\n * @returns {function(): T}\n */\nconst memoize = fn => {\n  let cache = false;\n  /** @type {T} */\n  let result;\n  return () => {\n    if (cache) {\n      return result;\n    }\n    result = /** @type {function(): any} */fn();\n    cache = true;\n    // Allow to clean up memory for fn\n    // and all dependent resources\n    // eslint-disable-next-line no-undefined, no-param-reassign\n    fn = undefined;\n    return result;\n  };\n};\nconst getTraceMapping = memoize(() =>\n// eslint-disable-next-line global-require\nrequire(\"@jridgewell/trace-mapping\"));\nconst getSerializeJavascript = memoize(() =>\n// eslint-disable-next-line global-require\nrequire(\"serialize-javascript\"));\n\n/**\n * @template [T=TerserOptions]\n */\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate( /** @type {Schema} */schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    });\n\n    // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n    const {\n      minify = /** @type {MinimizerImplementation<T>} */terserMinify,\n      terserOptions = /** @type {MinimizerOptions<T>} */{},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.line) {\n      const original = sourceMap && getTraceMapping().originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } = /** @type {Asset} */compilation.getAsset(name);\n      if (\n      // Skip double minimize assets from child compilation\n      info.minimized ||\n      // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind(\n      // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } = /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n      if (!output) {\n        numberOfAssets += 1;\n      }\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n    let initializedWorker;\n    /** @type {undefined | number} */\n    let numberOfWorkers;\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores);\n      // eslint-disable-next-line consistent-return\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        // eslint-disable-next-line global-require\n        const {\n          Worker\n        } = require(\"jest-worker\");\n        initializedWorker = /** @type {MinimizerWorker<T>} */\n\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        });\n\n        // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n        const workerStdout = initializedWorker.getStdout();\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n        const workerStderr = initializedWorker.getStderr();\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n        return initializedWorker;\n      };\n    }\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push( /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap = /** @type {SourceMapInput} */map;\n            }\n          }\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n\n          /**\n           * @type {InternalOptions<T>}\n           */\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: {\n                ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n          try {\n            output = await (getWorker ? getWorker().transform(getSerializeJavascript()(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push( /** @type {WebpackError} */\n\n            TerserPlugin.buildError(error, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput} */inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push( /** @type {WebpackError} */\n\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput} */inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n          let shebang;\n          if ( /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input, /** @type {SourceMapInput} */inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename = /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner;\n\n            // Add a banner to the original file\n            if ( /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner = /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push( /** @type {WebpackError} */warning);\n          }\n        }\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push( /** @type {WebpackError} */error);\n          }\n        }\n\n        /** @type {Record<string, any>} */\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output;\n\n        // Write extracted comments to commentsFilename\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n    const limit = getWorker && numberOfAssets > 0 ? /** @type {number} */numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, [from, value]) => {\n      const previous = /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([... /** @type {string}*/prevSource.source().split(\"\\n\\n\"), ... /** @type {string}*/extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n      const existingAsset = compilation.getAsset(commentsFilename);\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    }, /** @type {Promise<unknown>} */Promise.resolve());\n  }\n\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    }\n\n    // ES 11th\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n    return 5;\n  }\n\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = getSerializeJavascript()({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ? /** @type {Function} */green( /** @type {Function} */formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n}\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}