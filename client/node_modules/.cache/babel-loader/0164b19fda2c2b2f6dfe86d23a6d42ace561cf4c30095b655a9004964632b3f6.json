{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst {\n  ASSET_MODULE_TYPE_RESOURCE,\n  ASSET_MODULE_TYPE_INLINE,\n  ASSET_MODULE_TYPE,\n  ASSET_MODULE_TYPE_SOURCE\n} = require(\"../ModuleTypeConstants\");\nconst {\n  cleverMerge\n} = require(\"../util/cleverMerge\");\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getSchema = name => {\n  const {\n    definitions\n  } = require(\"../../schemas/WebpackOptions.json\");\n  return {\n    definitions,\n    oneOf: [{\n      $ref: `#/definitions/${name}`\n    }]\n  };\n};\nconst generatorValidationOptions = {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"generator\"\n};\nconst validateGeneratorOptions = {\n  asset: createSchemaValidation(require(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"), () => getSchema(\"AssetGeneratorOptions\"), generatorValidationOptions),\n  \"asset/resource\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"), () => getSchema(\"AssetResourceGeneratorOptions\"), generatorValidationOptions),\n  \"asset/inline\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"), () => getSchema(\"AssetInlineGeneratorOptions\"), generatorValidationOptions)\n};\nconst validateParserOptions = createSchemaValidation(require(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"), () => getSchema(\"AssetParserOptions\"), {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nconst getAssetGenerator = memoize(() => require(\"./AssetGenerator\"));\nconst getAssetParser = memoize(() => require(\"./AssetParser\"));\nconst getAssetSourceParser = memoize(() => require(\"./AssetSourceParser\"));\nconst getAssetSourceGenerator = memoize(() => require(\"./AssetSourceGenerator\"));\nconst type = ASSET_MODULE_TYPE;\nconst plugin = \"AssetModulesPlugin\";\nclass AssetModulesPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(plugin, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      normalModuleFactory.hooks.createParser.for(ASSET_MODULE_TYPE).tap(plugin, parserOptions => {\n        validateParserOptions(parserOptions);\n        parserOptions = cleverMerge(compiler.options.module.parser.asset, parserOptions);\n        let dataUrlCondition = parserOptions.dataUrlCondition;\n        if (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\n          dataUrlCondition = {\n            maxSize: 8096,\n            ...dataUrlCondition\n          };\n        }\n        const AssetParser = getAssetParser();\n        return new AssetParser(dataUrlCondition);\n      });\n      normalModuleFactory.hooks.createParser.for(ASSET_MODULE_TYPE_INLINE).tap(plugin, parserOptions => {\n        const AssetParser = getAssetParser();\n        return new AssetParser(true);\n      });\n      normalModuleFactory.hooks.createParser.for(ASSET_MODULE_TYPE_RESOURCE).tap(plugin, parserOptions => {\n        const AssetParser = getAssetParser();\n        return new AssetParser(false);\n      });\n      normalModuleFactory.hooks.createParser.for(ASSET_MODULE_TYPE_SOURCE).tap(plugin, parserOptions => {\n        const AssetSourceParser = getAssetSourceParser();\n        return new AssetSourceParser();\n      });\n      for (const type of [ASSET_MODULE_TYPE, ASSET_MODULE_TYPE_INLINE, ASSET_MODULE_TYPE_RESOURCE]) {\n        normalModuleFactory.hooks.createGenerator.for(type).tap(plugin, generatorOptions => {\n          validateGeneratorOptions[type](generatorOptions);\n          let dataUrl = undefined;\n          if (type !== ASSET_MODULE_TYPE_RESOURCE) {\n            dataUrl = generatorOptions.dataUrl;\n            if (!dataUrl || typeof dataUrl === \"object\") {\n              dataUrl = {\n                encoding: undefined,\n                mimetype: undefined,\n                ...dataUrl\n              };\n            }\n          }\n          let filename = undefined;\n          let publicPath = undefined;\n          let outputPath = undefined;\n          if (type !== ASSET_MODULE_TYPE_INLINE) {\n            filename = generatorOptions.filename;\n            publicPath = generatorOptions.publicPath;\n            outputPath = generatorOptions.outputPath;\n          }\n          const AssetGenerator = getAssetGenerator();\n          return new AssetGenerator(dataUrl, filename, publicPath, outputPath, generatorOptions.emit !== false);\n        });\n      }\n      normalModuleFactory.hooks.createGenerator.for(ASSET_MODULE_TYPE_SOURCE).tap(plugin, () => {\n        const AssetSourceGenerator = getAssetSourceGenerator();\n        return new AssetSourceGenerator();\n      });\n      compilation.hooks.renderManifest.tap(plugin, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          chunk,\n          codeGenerationResults\n        } = options;\n        const modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, ASSET_MODULE_TYPE, compareModulesByIdentifier);\n        if (modules) {\n          for (const module of modules) {\n            try {\n              const codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n              result.push({\n                render: () => codeGenResult.sources.get(type),\n                filename: module.buildInfo.filename || codeGenResult.data.get(\"filename\"),\n                info: module.buildInfo.assetInfo || codeGenResult.data.get(\"assetInfo\"),\n                auxiliary: true,\n                identifier: `assetModule${chunkGraph.getModuleId(module)}`,\n                hash: module.buildInfo.fullContentHash || codeGenResult.data.get(\"fullContentHash\")\n              });\n            } catch (e) {\n              e.message += `\\nduring rendering of asset ${module.identifier()}`;\n              throw e;\n            }\n          }\n        }\n        return result;\n      });\n      compilation.hooks.prepareModuleExecution.tap(\"AssetModulesPlugin\", (options, context) => {\n        const {\n          codeGenerationResult\n        } = options;\n        const source = codeGenerationResult.sources.get(ASSET_MODULE_TYPE);\n        if (source === undefined) return;\n        context.assets.set(codeGenerationResult.data.get(\"filename\"), {\n          source,\n          info: codeGenerationResult.data.get(\"assetInfo\")\n        });\n      });\n    });\n  }\n}\nmodule.exports = AssetModulesPlugin;","map":{"version":3,"names":["ASSET_MODULE_TYPE_RESOURCE","ASSET_MODULE_TYPE_INLINE","ASSET_MODULE_TYPE","ASSET_MODULE_TYPE_SOURCE","require","cleverMerge","compareModulesByIdentifier","createSchemaValidation","memoize","getSchema","name","definitions","oneOf","$ref","generatorValidationOptions","baseDataPath","validateGeneratorOptions","asset","validateParserOptions","getAssetGenerator","getAssetParser","getAssetSourceParser","getAssetSourceGenerator","type","plugin","AssetModulesPlugin","apply","compiler","hooks","compilation","tap","_ref","normalModuleFactory","createParser","for","parserOptions","options","module","parser","dataUrlCondition","maxSize","AssetParser","AssetSourceParser","createGenerator","generatorOptions","dataUrl","undefined","encoding","mimetype","filename","publicPath","outputPath","AssetGenerator","emit","AssetSourceGenerator","renderManifest","result","chunkGraph","chunk","codeGenerationResults","modules","getOrderedChunkModulesIterableBySourceType","codeGenResult","get","runtime","push","render","sources","buildInfo","data","info","assetInfo","auxiliary","identifier","getModuleId","hash","fullContentHash","e","message","prepareModuleExecution","context","codeGenerationResult","source","assets","set","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/asset/AssetModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst {\n\tASSET_MODULE_TYPE_RESOURCE,\n\tASSET_MODULE_TYPE_INLINE,\n\tASSET_MODULE_TYPE,\n\tASSET_MODULE_TYPE_SOURCE\n} = require(\"../ModuleTypeConstants\");\nconst { cleverMerge } = require(\"../util/cleverMerge\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getSchema = name => {\n\tconst { definitions } = require(\"../../schemas/WebpackOptions.json\");\n\treturn {\n\t\tdefinitions,\n\t\toneOf: [{ $ref: `#/definitions/${name}` }]\n\t};\n};\n\nconst generatorValidationOptions = {\n\tname: \"Asset Modules Plugin\",\n\tbaseDataPath: \"generator\"\n};\nconst validateGeneratorOptions = {\n\tasset: createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t),\n\t\"asset/resource\": createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetResourceGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t),\n\t\"asset/inline\": createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetInlineGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t)\n};\n\nconst validateParserOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"),\n\t() => getSchema(\"AssetParserOptions\"),\n\t{\n\t\tname: \"Asset Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\n\nconst getAssetGenerator = memoize(() => require(\"./AssetGenerator\"));\nconst getAssetParser = memoize(() => require(\"./AssetParser\"));\nconst getAssetSourceParser = memoize(() => require(\"./AssetSourceParser\"));\nconst getAssetSourceGenerator = memoize(() =>\n\trequire(\"./AssetSourceGenerator\")\n);\n\nconst type = ASSET_MODULE_TYPE;\nconst plugin = \"AssetModulesPlugin\";\n\nclass AssetModulesPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tplugin,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(ASSET_MODULE_TYPE)\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\t\t\t\t\t\tparserOptions = cleverMerge(\n\t\t\t\t\t\t\tcompiler.options.module.parser.asset,\n\t\t\t\t\t\t\tparserOptions\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet dataUrlCondition = parserOptions.dataUrlCondition;\n\t\t\t\t\t\tif (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\n\t\t\t\t\t\t\tdataUrlCondition = {\n\t\t\t\t\t\t\t\tmaxSize: 8096,\n\t\t\t\t\t\t\t\t...dataUrlCondition\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(dataUrlCondition);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(ASSET_MODULE_TYPE_INLINE)\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(true);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(ASSET_MODULE_TYPE_RESOURCE)\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(false);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(ASSET_MODULE_TYPE_SOURCE)\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetSourceParser = getAssetSourceParser();\n\n\t\t\t\t\t\treturn new AssetSourceParser();\n\t\t\t\t\t});\n\n\t\t\t\tfor (const type of [\n\t\t\t\t\tASSET_MODULE_TYPE,\n\t\t\t\t\tASSET_MODULE_TYPE_INLINE,\n\t\t\t\t\tASSET_MODULE_TYPE_RESOURCE\n\t\t\t\t]) {\n\t\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\t\tvalidateGeneratorOptions[type](generatorOptions);\n\n\t\t\t\t\t\t\tlet dataUrl = undefined;\n\t\t\t\t\t\t\tif (type !== ASSET_MODULE_TYPE_RESOURCE) {\n\t\t\t\t\t\t\t\tdataUrl = generatorOptions.dataUrl;\n\t\t\t\t\t\t\t\tif (!dataUrl || typeof dataUrl === \"object\") {\n\t\t\t\t\t\t\t\t\tdataUrl = {\n\t\t\t\t\t\t\t\t\t\tencoding: undefined,\n\t\t\t\t\t\t\t\t\t\tmimetype: undefined,\n\t\t\t\t\t\t\t\t\t\t...dataUrl\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet filename = undefined;\n\t\t\t\t\t\t\tlet publicPath = undefined;\n\t\t\t\t\t\t\tlet outputPath = undefined;\n\t\t\t\t\t\t\tif (type !== ASSET_MODULE_TYPE_INLINE) {\n\t\t\t\t\t\t\t\tfilename = generatorOptions.filename;\n\t\t\t\t\t\t\t\tpublicPath = generatorOptions.publicPath;\n\t\t\t\t\t\t\t\toutputPath = generatorOptions.outputPath;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst AssetGenerator = getAssetGenerator();\n\n\t\t\t\t\t\t\treturn new AssetGenerator(\n\t\t\t\t\t\t\t\tdataUrl,\n\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\tpublicPath,\n\t\t\t\t\t\t\t\toutputPath,\n\t\t\t\t\t\t\t\tgeneratorOptions.emit !== false\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(ASSET_MODULE_TYPE_SOURCE)\n\t\t\t\t\t.tap(plugin, () => {\n\t\t\t\t\t\tconst AssetSourceGenerator = getAssetSourceGenerator();\n\n\t\t\t\t\t\treturn new AssetSourceGenerator();\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(plugin, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { chunk, codeGenerationResults } = options;\n\n\t\t\t\t\tconst modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tASSET_MODULE_TYPE,\n\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t);\n\t\t\t\t\tif (modules) {\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst codeGenResult = codeGenerationResults.get(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\tchunk.runtime\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () => codeGenResult.sources.get(type),\n\t\t\t\t\t\t\t\t\tfilename:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.filename ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"filename\"),\n\t\t\t\t\t\t\t\t\tinfo:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.assetInfo ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"assetInfo\"),\n\t\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\t\tidentifier: `assetModule${chunkGraph.getModuleId(module)}`,\n\t\t\t\t\t\t\t\t\thash:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.fullContentHash ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"fullContentHash\")\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\te.message += `\\nduring rendering of asset ${module.identifier()}`;\n\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.prepareModuleExecution.tap(\n\t\t\t\t\t\"AssetModulesPlugin\",\n\t\t\t\t\t(options, context) => {\n\t\t\t\t\t\tconst { codeGenerationResult } = options;\n\t\t\t\t\t\tconst source = codeGenerationResult.sources.get(ASSET_MODULE_TYPE);\n\t\t\t\t\t\tif (source === undefined) return;\n\t\t\t\t\t\tcontext.assets.set(codeGenerationResult.data.get(\"filename\"), {\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tinfo: codeGenerationResult.data.get(\"assetInfo\")\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AssetModulesPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}