{"ast":null,"code":"(function (root) {\n  'use strict';\n\n  // A list of regular expressions that match arbitrary IPv4 addresses,\n  // for which a number of weird notations exist.\n  // Note that an address like 0010.0xa5.1.1 is considered legal.\n  const ipv4Part = '(0?\\\\d+|0x[a-f0-9]+)';\n  const ipv4Regexes = {\n    fourOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n    threeOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n    twoOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n    longValue: new RegExp(`^${ipv4Part}$`, 'i')\n  };\n\n  // Regular Expression for checking Octal numbers\n  const octalRegex = new RegExp(`^0[0-7]+$`, 'i');\n  const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');\n  const zoneIndex = '%[0-9a-z]{1,}';\n\n  // IPv6-matching regular expressions.\n  // For IPv6, the task is simpler: it is enough to match the colon-delimited\n  // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at\n  // the end.\n  const ipv6Part = '(?:[0-9a-f]+::?)+';\n  const ipv6Regexes = {\n    zoneIndex: new RegExp(zoneIndex, 'i'),\n    'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),\n    deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),\n    transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?$`, 'i')\n  };\n\n  // Expand :: in an IPv6 address or address part consisting of `parts` groups.\n  function expandIPv6(string, parts) {\n    // More than one '::' means invalid adddress\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\n      return null;\n    }\n    let colonCount = 0;\n    let lastColon = -1;\n    let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];\n    let replacement, replacementCount;\n\n    // Remove zone index and save it for later\n    if (zoneId) {\n      zoneId = zoneId.substring(1);\n      string = string.replace(/%.+$/, '');\n    }\n\n    // How many parts do we already have?\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n      colonCount++;\n    }\n\n    // 0::0 is two parts more than ::\n    if (string.substr(0, 2) === '::') {\n      colonCount--;\n    }\n    if (string.substr(-2, 2) === '::') {\n      colonCount--;\n    }\n\n    // The following loop would hang if colonCount > parts\n    if (colonCount > parts) {\n      return null;\n    }\n\n    // replacement = ':' + '0:' * (parts - colonCount)\n    replacementCount = parts - colonCount;\n    replacement = ':';\n    while (replacementCount--) {\n      replacement += '0:';\n    }\n\n    // Insert the missing zeroes\n    string = string.replace('::', replacement);\n\n    // Trim any garbage which may be hanging around if :: was at the edge in\n    // the source strin\n    if (string[0] === ':') {\n      string = string.slice(1);\n    }\n    if (string[string.length - 1] === ':') {\n      string = string.slice(0, -1);\n    }\n    parts = function () {\n      const ref = string.split(':');\n      const results = [];\n      for (let i = 0; i < ref.length; i++) {\n        results.push(parseInt(ref[i], 16));\n      }\n      return results;\n    }();\n    return {\n      parts: parts,\n      zoneId: zoneId\n    };\n  }\n\n  // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.\n  function matchCIDR(first, second, partSize, cidrBits) {\n    if (first.length !== second.length) {\n      throw new Error('ipaddr: cannot match CIDR for objects with different lengths');\n    }\n    let part = 0;\n    let shift;\n    while (cidrBits > 0) {\n      shift = partSize - cidrBits;\n      if (shift < 0) {\n        shift = 0;\n      }\n      if (first[part] >> shift !== second[part] >> shift) {\n        return false;\n      }\n      cidrBits -= partSize;\n      part += 1;\n    }\n    return true;\n  }\n  function parseIntAuto(string) {\n    // Hexadedimal base 16 (0x#)\n    if (hexRegex.test(string)) {\n      return parseInt(string, 16);\n    }\n    // While octal representation is discouraged by ECMAScript 3\n    // and forbidden by ECMAScript 5, we silently allow it to\n    // work only if the rest of the string has numbers less than 8.\n    if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {\n      if (octalRegex.test(string)) {\n        return parseInt(string, 8);\n      }\n      throw new Error(`ipaddr: cannot parse ${string} as octal`);\n    }\n    // Always include the base 10 radix!\n    return parseInt(string, 10);\n  }\n  function padPart(part, length) {\n    while (part.length < length) {\n      part = `0${part}`;\n    }\n    return part;\n  }\n  const ipaddr = {};\n\n  // An IPv4 address (RFC791).\n  ipaddr.IPv4 = function () {\n    // Constructs a new IPv4 address from an array of four octets\n    // in network order (MSB first)\n    // Verifies the input.\n    function IPv4(octets) {\n      if (octets.length !== 4) {\n        throw new Error('ipaddr: ipv4 octet count should be 4');\n      }\n      let i, octet;\n      for (i = 0; i < octets.length; i++) {\n        octet = octets[i];\n        if (!(0 <= octet && octet <= 255)) {\n          throw new Error('ipaddr: ipv4 octet should fit in 8 bits');\n        }\n      }\n      this.octets = octets;\n    }\n\n    // Special IPv4 address ranges.\n    // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses\n    IPv4.prototype.SpecialRanges = {\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n      // RFC3171\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n      // RFC3927\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n      // RFC5735\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n      // RFC6598\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n      // RFC1918\n      'private': [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\n      // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\n    };\n\n    // The 'kind' method exists on both IPv4 and IPv6 classes.\n    IPv4.prototype.kind = function () {\n      return 'ipv4';\n    };\n\n    // Checks if this address matches other one within given CIDR range.\n    IPv4.prototype.match = function (other, cidrRange) {\n      let ref;\n      if (cidrRange === undefined) {\n        ref = other;\n        other = ref[0];\n        cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv4') {\n        throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');\n      }\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\n    };\n\n    // returns a number of leading ones in IPv4 address, making sure that\n    // the rest is a solid sequence of 0's (valid netmask)\n    // returns either the CIDR length or null if mask is not valid\n    IPv4.prototype.prefixLengthFromSubnetMask = function () {\n      let cidr = 0;\n      // non-zero encountered stop scanning for zeroes\n      let stop = false;\n      // number of zeroes in octet\n      const zerotable = {\n        0: 8,\n        128: 7,\n        192: 6,\n        224: 5,\n        240: 4,\n        248: 3,\n        252: 2,\n        254: 1,\n        255: 0\n      };\n      let i, octet, zeros;\n      for (i = 3; i >= 0; i -= 1) {\n        octet = this.octets[i];\n        if (octet in zerotable) {\n          zeros = zerotable[octet];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 8) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 32 - cidr;\n    };\n\n    // Checks if the address corresponds to one of the special ranges.\n    IPv4.prototype.range = function () {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    // Returns an array of byte-sized values in network order (MSB first)\n    IPv4.prototype.toByteArray = function () {\n      return this.octets.slice(0);\n    };\n\n    // Converts this IPv4 address to an IPv4-mapped IPv6 address.\n    IPv4.prototype.toIPv4MappedAddress = function () {\n      return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);\n    };\n\n    // Symmetrical method strictly for aligning with the IPv6 methods.\n    IPv4.prototype.toNormalizedString = function () {\n      return this.toString();\n    };\n\n    // Returns the address in convenient, decimal-dotted format.\n    IPv4.prototype.toString = function () {\n      return this.octets.join('.');\n    };\n    return IPv4;\n  }();\n\n  // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation\n  ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n    try {\n      const cidr = this.parseCIDR(string);\n      const ipInterfaceOctets = cidr[0].toByteArray();\n      const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      const octets = [];\n      let i = 0;\n      while (i < 4) {\n        // Broadcast address is bitwise OR between ip interface and inverted mask\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n      return new this(octets);\n    } catch (e) {\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  // Checks if a given string is formatted like IPv4 address.\n  ipaddr.IPv4.isIPv4 = function (string) {\n    return this.parser(string) !== null;\n  };\n\n  // Checks if a given string is a valid IPv4 address.\n  ipaddr.IPv4.isValid = function (string) {\n    try {\n      new this(this.parser(string));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // Checks if a given string is a full four-part IPv4 Address.\n  ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation\n  ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n    let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        // Network address is bitwise AND between ip interface and mask\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n      return new this(octets);\n    } catch (e) {\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  // Tries to parse and validate a string with IPv4 address.\n  // Throws an error if it fails.\n  ipaddr.IPv4.parse = function (string) {\n    const parts = this.parser(string);\n    if (parts === null) {\n      throw new Error('ipaddr: string is not formatted like an IPv4 Address');\n    }\n    return new this(parts);\n  };\n\n  // Parses the string as an IPv4 Address with CIDR Notation.\n  ipaddr.IPv4.parseCIDR = function (string) {\n    let match;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      const maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 32) {\n        const parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function () {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');\n  };\n\n  // Classful variants (like a.b, where a is an octet, and b is a 24-bit\n  // value representing last three octets; this corresponds to a class C\n  // address) are omitted due to classless nature of modern Internet.\n  ipaddr.IPv4.parser = function (string) {\n    let match, part, value;\n\n    // parseInt recognizes all that octal & hexadecimal weirdness for us\n    if (match = string.match(ipv4Regexes.fourOctet)) {\n      return function () {\n        const ref = match.slice(1, 6);\n        const results = [];\n        for (let i = 0; i < ref.length; i++) {\n          part = ref[i];\n          results.push(parseIntAuto(part));\n        }\n        return results;\n      }();\n    } else if (match = string.match(ipv4Regexes.longValue)) {\n      value = parseIntAuto(match[1]);\n      if (value > 0xffffffff || value < 0) {\n        throw new Error('ipaddr: address outside defined range');\n      }\n      return function () {\n        const results = [];\n        let shift;\n        for (shift = 0; shift <= 24; shift += 8) {\n          results.push(value >> shift & 0xff);\n        }\n        return results;\n      }().reverse();\n    } else if (match = string.match(ipv4Regexes.twoOctet)) {\n      return function () {\n        const ref = match.slice(1, 4);\n        const results = [];\n        value = parseIntAuto(ref[1]);\n        if (value > 0xffffff || value < 0) {\n          throw new Error('ipaddr: address outside defined range');\n        }\n        results.push(parseIntAuto(ref[0]));\n        results.push(value >> 16 & 0xff);\n        results.push(value >> 8 & 0xff);\n        results.push(value & 0xff);\n        return results;\n      }();\n    } else if (match = string.match(ipv4Regexes.threeOctet)) {\n      return function () {\n        const ref = match.slice(1, 5);\n        const results = [];\n        value = parseIntAuto(ref[2]);\n        if (value > 0xffff || value < 0) {\n          throw new Error('ipaddr: address outside defined range');\n        }\n        results.push(parseIntAuto(ref[0]));\n        results.push(parseIntAuto(ref[1]));\n        results.push(value >> 8 & 0xff);\n        results.push(value & 0xff);\n        return results;\n      }();\n    } else {\n      return null;\n    }\n  };\n\n  // A utility function to return subnet mask in IPv4 format given the prefix length\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n    prefix = parseInt(prefix);\n    if (prefix < 0 || prefix > 32) {\n      throw new Error('ipaddr: invalid IPv4 prefix length');\n    }\n    const octets = [0, 0, 0, 0];\n    let j = 0;\n    const filledOctetCount = Math.floor(prefix / 8);\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n    if (filledOctetCount < 4) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;\n    }\n    return new this(octets);\n  };\n\n  // An IPv6 address (RFC2460)\n  ipaddr.IPv6 = function () {\n    // Constructs an IPv6 address from an array of eight 16 - bit parts\n    // or sixteen 8 - bit parts in network order(MSB first).\n    // Throws an error if the input is invalid.\n    function IPv6(parts, zoneId) {\n      let i, part;\n      if (parts.length === 16) {\n        this.parts = [];\n        for (i = 0; i <= 14; i += 2) {\n          this.parts.push(parts[i] << 8 | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error('ipaddr: ipv6 part count should be 8 or 16');\n      }\n      for (i = 0; i < this.parts.length; i++) {\n        part = this.parts[i];\n        if (!(0 <= part && part <= 0xffff)) {\n          throw new Error('ipaddr: ipv6 part should fit in 16 bits');\n        }\n      }\n      if (zoneId) {\n        this.zoneId = zoneId;\n      }\n    }\n\n    // Special IPv6 ranges\n    IPv6.prototype.SpecialRanges = {\n      // RFC4291, here and after\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      // RFC6145\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      // RFC6052\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      // RFC3056\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      // RFC6052, RFC6146\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      // RFC4291\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n\n    // Checks if this address is an IPv4-mapped IPv6 address.\n    IPv6.prototype.isIPv4MappedAddress = function () {\n      return this.range() === 'ipv4Mapped';\n    };\n\n    // The 'kind' method exists on both IPv4 and IPv6 classes.\n    IPv6.prototype.kind = function () {\n      return 'ipv6';\n    };\n\n    // Checks if this address matches other one within given CIDR range.\n    IPv6.prototype.match = function (other, cidrRange) {\n      let ref;\n      if (cidrRange === undefined) {\n        ref = other;\n        other = ref[0];\n        cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv6') {\n        throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');\n      }\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\n    };\n\n    // returns a number of leading ones in IPv6 address, making sure that\n    // the rest is a solid sequence of 0's (valid netmask)\n    // returns either the CIDR length or null if mask is not valid\n    IPv6.prototype.prefixLengthFromSubnetMask = function () {\n      let cidr = 0;\n      // non-zero encountered stop scanning for zeroes\n      let stop = false;\n      // number of zeroes in octet\n      const zerotable = {\n        0: 16,\n        32768: 15,\n        49152: 14,\n        57344: 13,\n        61440: 12,\n        63488: 11,\n        64512: 10,\n        65024: 9,\n        65280: 8,\n        65408: 7,\n        65472: 6,\n        65504: 5,\n        65520: 4,\n        65528: 3,\n        65532: 2,\n        65534: 1,\n        65535: 0\n      };\n      let part, zeros;\n      for (let i = 7; i >= 0; i -= 1) {\n        part = this.parts[i];\n        if (part in zerotable) {\n          zeros = zerotable[part];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 16) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 128 - cidr;\n    };\n\n    // Checks if the address corresponds to one of the special ranges.\n    IPv6.prototype.range = function () {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    // Returns an array of byte-sized values in network order (MSB first)\n    IPv6.prototype.toByteArray = function () {\n      let part;\n      const bytes = [];\n      const ref = this.parts;\n      for (let i = 0; i < ref.length; i++) {\n        part = ref[i];\n        bytes.push(part >> 8);\n        bytes.push(part & 0xff);\n      }\n      return bytes;\n    };\n\n    // Returns the address in expanded format with all zeroes included, like\n    // 2001:0db8:0008:0066:0000:0000:0000:0001\n    IPv6.prototype.toFixedLengthString = function () {\n      const addr = function () {\n        const results = [];\n        for (let i = 0; i < this.parts.length; i++) {\n          results.push(padPart(this.parts[i].toString(16), 4));\n        }\n        return results;\n      }.call(this).join(':');\n      let suffix = '';\n      if (this.zoneId) {\n        suffix = `%${this.zoneId}`;\n      }\n      return addr + suffix;\n    };\n\n    // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.\n    // Throws an error otherwise.\n    IPv6.prototype.toIPv4Address = function () {\n      if (!this.isIPv4MappedAddress()) {\n        throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');\n      }\n      const ref = this.parts.slice(-2);\n      const high = ref[0];\n      const low = ref[1];\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n    };\n\n    // Returns the address in expanded format with all zeroes included, like\n    // 2001:db8:8:66:0:0:0:1\n    //\n    // Deprecated: use toFixedLengthString() instead.\n    IPv6.prototype.toNormalizedString = function () {\n      const addr = function () {\n        const results = [];\n        for (let i = 0; i < this.parts.length; i++) {\n          results.push(this.parts[i].toString(16));\n        }\n        return results;\n      }.call(this).join(':');\n      let suffix = '';\n      if (this.zoneId) {\n        suffix = `%${this.zoneId}`;\n      }\n      return addr + suffix;\n    };\n\n    // Returns the address in compact, human-readable format like\n    // 2001:db8:8:66::1\n    // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)\n    IPv6.prototype.toRFC5952String = function () {\n      const regex = /((^|:)(0(:|$)){2,})/g;\n      const string = this.toNormalizedString();\n      let bestMatchIndex = 0;\n      let bestMatchLength = -1;\n      let match;\n      while (match = regex.exec(string)) {\n        if (match[0].length > bestMatchLength) {\n          bestMatchIndex = match.index;\n          bestMatchLength = match[0].length;\n        }\n      }\n      if (bestMatchLength < 0) {\n        return string;\n      }\n      return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;\n    };\n\n    // Returns the address in compact, human-readable format like\n    // 2001:db8:8:66::1\n    //\n    // Deprecated: use toRFC5952String() instead.\n    IPv6.prototype.toString = function () {\n      // Replace the first sequence of 1 or more '0' parts with '::'\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n    };\n    return IPv6;\n  }();\n\n  // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation\n  ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {\n    try {\n      const cidr = this.parseCIDR(string);\n      const ipInterfaceOctets = cidr[0].toByteArray();\n      const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      const octets = [];\n      let i = 0;\n      while (i < 16) {\n        // Broadcast address is bitwise OR between ip interface and inverted mask\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n      return new this(octets);\n    } catch (e) {\n      throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n    }\n  };\n\n  // Checks if a given string is formatted like IPv6 address.\n  ipaddr.IPv6.isIPv6 = function (string) {\n    return this.parser(string) !== null;\n  };\n\n  // Checks to see if string is a valid IPv6 Address\n  ipaddr.IPv6.isValid = function (string) {\n    // Since IPv6.isValid is always called first, this shortcut\n    // provides a substantial performance gain.\n    if (typeof string === 'string' && string.indexOf(':') === -1) {\n      return false;\n    }\n    try {\n      const addr = this.parser(string);\n      new this(addr.parts, addr.zoneId);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation\n  ipaddr.IPv6.networkAddressFromCIDR = function (string) {\n    let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 16) {\n        // Network address is bitwise AND between ip interface and mask\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n      return new this(octets);\n    } catch (e) {\n      throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n    }\n  };\n\n  // Tries to parse and validate a string with IPv6 address.\n  // Throws an error if it fails.\n  ipaddr.IPv6.parse = function (string) {\n    const addr = this.parser(string);\n    if (addr.parts === null) {\n      throw new Error('ipaddr: string is not formatted like an IPv6 Address');\n    }\n    return new this(addr.parts, addr.zoneId);\n  };\n  ipaddr.IPv6.parseCIDR = function (string) {\n    let maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 128) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function () {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');\n  };\n\n  // Parse an IPv6 address.\n  ipaddr.IPv6.parser = function (string) {\n    let addr, i, match, octet, octets, zoneId;\n    if (match = string.match(ipv6Regexes.deprecatedTransitional)) {\n      return this.parser(`::ffff:${match[1]}`);\n    }\n    if (ipv6Regexes.native.test(string)) {\n      return expandIPv6(string, 8);\n    }\n    if (match = string.match(ipv6Regexes.transitional)) {\n      zoneId = match[6] || '';\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n      if (addr.parts) {\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n        for (i = 0; i < octets.length; i++) {\n          octet = octets[i];\n          if (!(0 <= octet && octet <= 255)) {\n            return null;\n          }\n        }\n        addr.parts.push(octets[0] << 8 | octets[1]);\n        addr.parts.push(octets[2] << 8 | octets[3]);\n        return {\n          parts: addr.parts,\n          zoneId: addr.zoneId\n        };\n      }\n    }\n    return null;\n  };\n\n  // A utility function to return subnet mask in IPv6 format given the prefix length\n  ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {\n    prefix = parseInt(prefix);\n    if (prefix < 0 || prefix > 128) {\n      throw new Error('ipaddr: invalid IPv6 prefix length');\n    }\n    const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let j = 0;\n    const filledOctetCount = Math.floor(prefix / 8);\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n    if (filledOctetCount < 16) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;\n    }\n    return new this(octets);\n  };\n\n  // Try to parse an array in network order (MSB first) for IPv4 and IPv6\n  ipaddr.fromByteArray = function (bytes) {\n    const length = bytes.length;\n    if (length === 4) {\n      return new ipaddr.IPv4(bytes);\n    } else if (length === 16) {\n      return new ipaddr.IPv6(bytes);\n    } else {\n      throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');\n    }\n  };\n\n  // Checks if the address is valid IP address\n  ipaddr.isValid = function (string) {\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n  };\n\n  // Attempts to parse an IP Address, first through IPv6 then IPv4.\n  // Throws an error if it could not be parsed.\n  ipaddr.parse = function (string) {\n    if (ipaddr.IPv6.isValid(string)) {\n      return ipaddr.IPv6.parse(string);\n    } else if (ipaddr.IPv4.isValid(string)) {\n      return ipaddr.IPv4.parse(string);\n    } else {\n      throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');\n    }\n  };\n\n  // Attempt to parse CIDR notation, first through IPv6 then IPv4.\n  // Throws an error if it could not be parsed.\n  ipaddr.parseCIDR = function (string) {\n    try {\n      return ipaddr.IPv6.parseCIDR(string);\n    } catch (e) {\n      try {\n        return ipaddr.IPv4.parseCIDR(string);\n      } catch (e2) {\n        throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');\n      }\n    }\n  };\n\n  // Parse an address and return plain IPv4 address if it is an IPv4-mapped address\n  ipaddr.process = function (string) {\n    const addr = this.parse(string);\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n      return addr.toIPv4Address();\n    } else {\n      return addr;\n    }\n  };\n\n  // An utility function to ease named range matching. See examples below.\n  // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors\n  // on matching IPv4 addresses to IPv6 ranges or vice versa.\n  ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n    let i, rangeName, rangeSubnets, subnet;\n    if (defaultName === undefined || defaultName === null) {\n      defaultName = 'unicast';\n    }\n    for (rangeName in rangeList) {\n      if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {\n        rangeSubnets = rangeList[rangeName];\n        // ECMA5 Array.isArray isn't available everywhere\n        if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n          rangeSubnets = [rangeSubnets];\n        }\n        for (i = 0; i < rangeSubnets.length; i++) {\n          subnet = rangeSubnets[i];\n          if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {\n            return rangeName;\n          }\n        }\n      }\n    }\n    return defaultName;\n  };\n\n  // Export for both the CommonJS and browser-like environment\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = ipaddr;\n  } else {\n    root.ipaddr = ipaddr;\n  }\n})(this);","map":{"version":3,"names":["root","ipv4Part","ipv4Regexes","fourOctet","RegExp","threeOctet","twoOctet","longValue","octalRegex","hexRegex","zoneIndex","ipv6Part","ipv6Regexes","deprecatedTransitional","transitional","expandIPv6","string","parts","indexOf","lastIndexOf","colonCount","lastColon","zoneId","match","replacement","replacementCount","substring","replace","substr","slice","length","ref","split","results","i","push","parseInt","matchCIDR","first","second","partSize","cidrBits","Error","part","shift","parseIntAuto","test","isNaN","padPart","ipaddr","IPv4","octets","octet","prototype","SpecialRanges","unspecified","broadcast","multicast","linkLocal","loopback","carrierGradeNat","reserved","kind","other","cidrRange","undefined","prefixLengthFromSubnetMask","cidr","stop","zerotable","zeros","range","subnetMatch","toByteArray","toIPv4MappedAddress","IPv6","parse","toString","toNormalizedString","join","broadcastAddressFromCIDR","parseCIDR","ipInterfaceOctets","subnetMaskOctets","subnetMaskFromPrefixLength","e","isIPv4","parser","isValid","isValidFourPartDecimal","networkAddressFromCIDR","maskLength","parsed","Object","defineProperty","value","reverse","prefix","j","filledOctetCount","Math","floor","pow","uniqueLocal","ipv4Mapped","rfc6145","rfc6052","teredo","isIPv4MappedAddress","bytes","toFixedLengthString","addr","call","suffix","toIPv4Address","high","low","toRFC5952String","regex","bestMatchIndex","bestMatchLength","exec","index","isIPv6","native","fromByteArray","e2","process","address","rangeList","defaultName","rangeName","rangeSubnets","subnet","hasOwnProperty","Array","apply","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/ipaddr.js/lib/ipaddr.js"],"sourcesContent":["(function (root) {\n    'use strict';\n    // A list of regular expressions that match arbitrary IPv4 addresses,\n    // for which a number of weird notations exist.\n    // Note that an address like 0010.0xa5.1.1 is considered legal.\n    const ipv4Part = '(0?\\\\d+|0x[a-f0-9]+)';\n    const ipv4Regexes = {\n        fourOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        threeOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        twoOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        longValue: new RegExp(`^${ipv4Part}$`, 'i')\n    };\n\n    // Regular Expression for checking Octal numbers\n    const octalRegex = new RegExp(`^0[0-7]+$`, 'i');\n    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');\n\n    const zoneIndex = '%[0-9a-z]{1,}';\n\n    // IPv6-matching regular expressions.\n    // For IPv6, the task is simpler: it is enough to match the colon-delimited\n    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at\n    // the end.\n    const ipv6Part = '(?:[0-9a-f]+::?)+';\n    const ipv6Regexes = {\n        zoneIndex: new RegExp(zoneIndex, 'i'),\n        'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),\n        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),\n        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?$`, 'i')\n    };\n\n    // Expand :: in an IPv6 address or address part consisting of `parts` groups.\n    function expandIPv6 (string, parts) {\n        // More than one '::' means invalid adddress\n        if (string.indexOf('::') !== string.lastIndexOf('::')) {\n            return null;\n        }\n\n        let colonCount = 0;\n        let lastColon = -1;\n        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];\n        let replacement, replacementCount;\n\n        // Remove zone index and save it for later\n        if (zoneId) {\n            zoneId = zoneId.substring(1);\n            string = string.replace(/%.+$/, '');\n        }\n\n        // How many parts do we already have?\n        while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n            colonCount++;\n        }\n\n        // 0::0 is two parts more than ::\n        if (string.substr(0, 2) === '::') {\n            colonCount--;\n        }\n\n        if (string.substr(-2, 2) === '::') {\n            colonCount--;\n        }\n\n        // The following loop would hang if colonCount > parts\n        if (colonCount > parts) {\n            return null;\n        }\n\n        // replacement = ':' + '0:' * (parts - colonCount)\n        replacementCount = parts - colonCount;\n        replacement = ':';\n        while (replacementCount--) {\n            replacement += '0:';\n        }\n\n        // Insert the missing zeroes\n        string = string.replace('::', replacement);\n\n        // Trim any garbage which may be hanging around if :: was at the edge in\n        // the source strin\n        if (string[0] === ':') {\n            string = string.slice(1);\n        }\n\n        if (string[string.length - 1] === ':') {\n            string = string.slice(0, -1);\n        }\n\n        parts = (function () {\n            const ref = string.split(':');\n            const results = [];\n\n            for (let i = 0; i < ref.length; i++) {\n                results.push(parseInt(ref[i], 16));\n            }\n\n            return results;\n        })();\n\n        return {\n            parts: parts,\n            zoneId: zoneId\n        };\n    }\n\n    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.\n    function matchCIDR (first, second, partSize, cidrBits) {\n        if (first.length !== second.length) {\n            throw new Error('ipaddr: cannot match CIDR for objects with different lengths');\n        }\n\n        let part = 0;\n        let shift;\n\n        while (cidrBits > 0) {\n            shift = partSize - cidrBits;\n            if (shift < 0) {\n                shift = 0;\n            }\n\n            if (first[part] >> shift !== second[part] >> shift) {\n                return false;\n            }\n\n            cidrBits -= partSize;\n            part += 1;\n        }\n\n        return true;\n    }\n\n    function parseIntAuto (string) {\n        // Hexadedimal base 16 (0x#)\n        if (hexRegex.test(string)) {\n            return parseInt(string, 16);\n        }\n        // While octal representation is discouraged by ECMAScript 3\n        // and forbidden by ECMAScript 5, we silently allow it to\n        // work only if the rest of the string has numbers less than 8.\n        if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {\n        if (octalRegex.test(string)) {\n            return parseInt(string, 8);\n        }\n            throw new Error(`ipaddr: cannot parse ${string} as octal`);\n        }\n        // Always include the base 10 radix!\n        return parseInt(string, 10);\n    }\n\n    function padPart (part, length) {\n        while (part.length < length) {\n            part = `0${part}`;\n        }\n\n        return part;\n    }\n\n    const ipaddr = {};\n\n    // An IPv4 address (RFC791).\n    ipaddr.IPv4 = (function () {\n        // Constructs a new IPv4 address from an array of four octets\n        // in network order (MSB first)\n        // Verifies the input.\n        function IPv4 (octets) {\n            if (octets.length !== 4) {\n                throw new Error('ipaddr: ipv4 octet count should be 4');\n            }\n\n            let i, octet;\n\n            for (i = 0; i < octets.length; i++) {\n                octet = octets[i];\n                if (!((0 <= octet && octet <= 255))) {\n                    throw new Error('ipaddr: ipv4 octet should fit in 8 bits');\n                }\n            }\n\n            this.octets = octets;\n        }\n\n        // Special IPv4 address ranges.\n        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses\n        IPv4.prototype.SpecialRanges = {\n            unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n            broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n            // RFC3171\n            multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n            // RFC3927\n            linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n            // RFC5735\n            loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n            // RFC6598\n            carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n            // RFC1918\n            'private': [\n                [new IPv4([10, 0, 0, 0]), 8],\n                [new IPv4([172, 16, 0, 0]), 12],\n                [new IPv4([192, 168, 0, 0]), 16]\n            ],\n            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700\n            reserved: [\n                [new IPv4([192, 0, 0, 0]), 24],\n                [new IPv4([192, 0, 2, 0]), 24],\n                [new IPv4([192, 88, 99, 0]), 24],\n                [new IPv4([198, 51, 100, 0]), 24],\n                [new IPv4([203, 0, 113, 0]), 24],\n                [new IPv4([240, 0, 0, 0]), 4]\n            ]\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv4.prototype.kind = function () {\n            return 'ipv4';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv4.prototype.match = function (other, cidrRange) {\n            let ref;\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv4') {\n                throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');\n            }\n\n            return matchCIDR(this.octets, other.octets, 8, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv4 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv4.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 8,\n                128: 7,\n                192: 6,\n                224: 5,\n                240: 4,\n                248: 3,\n                252: 2,\n                254: 1,\n                255: 0\n            };\n            let i, octet, zeros;\n\n            for (i = 3; i >= 0; i -= 1) {\n                octet = this.octets[i];\n                if (octet in zerotable) {\n                    zeros = zerotable[octet];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 8) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 32 - cidr;\n        };\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv4.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv4.prototype.toByteArray = function () {\n            return this.octets.slice(0);\n        };\n\n        // Converts this IPv4 address to an IPv4-mapped IPv6 address.\n        IPv4.prototype.toIPv4MappedAddress = function () {\n            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);\n        };\n\n        // Symmetrical method strictly for aligning with the IPv6 methods.\n        IPv4.prototype.toNormalizedString = function () {\n            return this.toString();\n        };\n\n        // Returns the address in convenient, decimal-dotted format.\n        IPv4.prototype.toString = function () {\n            return this.octets.join('.');\n        };\n\n        return IPv4;\n    })();\n\n    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 4) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Checks if a given string is formatted like IPv4 address.\n    ipaddr.IPv4.isIPv4 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks if a given string is a valid IPv4 address.\n    ipaddr.IPv4.isValid = function (string) {\n        try {\n            new this(this.parser(string));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a full four-part IPv4 Address.\n    ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 4) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Tries to parse and validate a string with IPv4 address.\n    // Throws an error if it fails.\n    ipaddr.IPv4.parse = function (string) {\n        const parts = this.parser(string);\n\n        if (parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv4 Address');\n        }\n\n        return new this(parts);\n    };\n\n    // Parses the string as an IPv4 Address with CIDR Notation.\n    ipaddr.IPv4.parseCIDR = function (string) {\n        let match;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            const maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 32) {\n                const parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');\n    };\n\n    // Classful variants (like a.b, where a is an octet, and b is a 24-bit\n    // value representing last three octets; this corresponds to a class C\n    // address) are omitted due to classless nature of modern Internet.\n    ipaddr.IPv4.parser = function (string) {\n        let match, part, value;\n\n        // parseInt recognizes all that octal & hexadecimal weirdness for us\n        if ((match = string.match(ipv4Regexes.fourOctet))) {\n            return (function () {\n                const ref = match.slice(1, 6);\n                const results = [];\n\n                for (let i = 0; i < ref.length; i++) {\n                    part = ref[i];\n                    results.push(parseIntAuto(part));\n                }\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.longValue))) {\n            value = parseIntAuto(match[1]);\n            if (value > 0xffffffff || value < 0) {\n                throw new Error('ipaddr: address outside defined range');\n            }\n\n            return ((function () {\n                const results = [];\n                let shift;\n\n                for (shift = 0; shift <= 24; shift += 8) {\n                    results.push((value >> shift) & 0xff);\n                }\n\n                return results;\n            })()).reverse();\n        } else if ((match = string.match(ipv4Regexes.twoOctet))) {\n            return (function () {\n                const ref = match.slice(1, 4);\n                const results = [];\n\n                value = parseIntAuto(ref[1]);\n                if (value > 0xffffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push((value >> 16) & 0xff);\n                results.push((value >>  8) & 0xff);\n                results.push( value        & 0xff);\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.threeOctet))) {\n            return (function () {\n                const ref = match.slice(1, 5);\n                const results = [];\n\n                value = parseIntAuto(ref[2]);\n                if (value > 0xffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push(parseIntAuto(ref[1]));\n                results.push((value >> 8) & 0xff);\n                results.push( value       & 0xff);\n\n                return results;\n            })();\n        } else {\n            return null;\n        }\n    };\n\n    // A utility function to return subnet mask in IPv4 format given the prefix length\n    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 32) {\n            throw new Error('ipaddr: invalid IPv4 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 4) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // An IPv6 address (RFC2460)\n    ipaddr.IPv6 = (function () {\n        // Constructs an IPv6 address from an array of eight 16 - bit parts\n        // or sixteen 8 - bit parts in network order(MSB first).\n        // Throws an error if the input is invalid.\n        function IPv6 (parts, zoneId) {\n            let i, part;\n\n            if (parts.length === 16) {\n                this.parts = [];\n                for (i = 0; i <= 14; i += 2) {\n                    this.parts.push((parts[i] << 8) | parts[i + 1]);\n                }\n            } else if (parts.length === 8) {\n                this.parts = parts;\n            } else {\n                throw new Error('ipaddr: ipv6 part count should be 8 or 16');\n            }\n\n            for (i = 0; i < this.parts.length; i++) {\n                part = this.parts[i];\n                if (!((0 <= part && part <= 0xffff))) {\n                    throw new Error('ipaddr: ipv6 part should fit in 16 bits');\n                }\n            }\n\n            if (zoneId) {\n                this.zoneId = zoneId;\n            }\n        }\n\n        // Special IPv6 ranges\n        IPv6.prototype.SpecialRanges = {\n            // RFC4291, here and after\n            unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n            linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n            multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n            loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n            uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n            ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n            // RFC6145\n            rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n            // RFC6052\n            rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n            // RFC3056\n            '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n            // RFC6052, RFC6146\n            teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n            // RFC4291\n            reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n        };\n\n        // Checks if this address is an IPv4-mapped IPv6 address.\n        IPv6.prototype.isIPv4MappedAddress = function () {\n            return this.range() === 'ipv4Mapped';\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv6.prototype.kind = function () {\n            return 'ipv6';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv6.prototype.match = function (other, cidrRange) {\n            let ref;\n\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv6') {\n                throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');\n            }\n\n            return matchCIDR(this.parts, other.parts, 16, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv6 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv6.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 16,\n                32768: 15,\n                49152: 14,\n                57344: 13,\n                61440: 12,\n                63488: 11,\n                64512: 10,\n                65024: 9,\n                65280: 8,\n                65408: 7,\n                65472: 6,\n                65504: 5,\n                65520: 4,\n                65528: 3,\n                65532: 2,\n                65534: 1,\n                65535: 0\n            };\n            let part, zeros;\n\n            for (let i = 7; i >= 0; i -= 1) {\n                part = this.parts[i];\n                if (part in zerotable) {\n                    zeros = zerotable[part];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 16) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 128 - cidr;\n        };\n\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv6.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv6.prototype.toByteArray = function () {\n            let part;\n            const bytes = [];\n            const ref = this.parts;\n            for (let i = 0; i < ref.length; i++) {\n                part = ref[i];\n                bytes.push(part >> 8);\n                bytes.push(part & 0xff);\n            }\n\n            return bytes;\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:0db8:0008:0066:0000:0000:0000:0001\n        IPv6.prototype.toFixedLengthString = function () {\n            const addr = ((function () {\n                const results = [];\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(padPart(this.parts[i].toString(16), 4));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.\n        // Throws an error otherwise.\n        IPv6.prototype.toIPv4Address = function () {\n            if (!this.isIPv4MappedAddress()) {\n                throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');\n            }\n\n            const ref = this.parts.slice(-2);\n            const high = ref[0];\n            const low = ref[1];\n\n            return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:db8:8:66:0:0:0:1\n        //\n        // Deprecated: use toFixedLengthString() instead.\n        IPv6.prototype.toNormalizedString = function () {\n            const addr = ((function () {\n                const results = [];\n\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(this.parts[i].toString(16));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)\n        IPv6.prototype.toRFC5952String = function () {\n            const regex = /((^|:)(0(:|$)){2,})/g;\n            const string = this.toNormalizedString();\n            let bestMatchIndex = 0;\n            let bestMatchLength = -1;\n            let match;\n\n            while ((match = regex.exec(string))) {\n                if (match[0].length > bestMatchLength) {\n                    bestMatchIndex = match.index;\n                    bestMatchLength = match[0].length;\n                }\n            }\n\n            if (bestMatchLength < 0) {\n                return string;\n            }\n\n            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        //\n        // Deprecated: use toRFC5952String() instead.\n        IPv6.prototype.toString = function () {\n            // Replace the first sequence of 1 or more '0' parts with '::'\n            return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n        };\n\n        return IPv6;\n\n    })();\n\n    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 16) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Checks if a given string is formatted like IPv6 address.\n    ipaddr.IPv6.isIPv6 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks to see if string is a valid IPv6 Address\n    ipaddr.IPv6.isValid = function (string) {\n\n        // Since IPv6.isValid is always called first, this shortcut\n        // provides a substantial performance gain.\n        if (typeof string === 'string' && string.indexOf(':') === -1) {\n            return false;\n        }\n\n        try {\n            const addr = this.parser(string);\n            new this(addr.parts, addr.zoneId);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 16) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Tries to parse and validate a string with IPv6 address.\n    // Throws an error if it fails.\n    ipaddr.IPv6.parse = function (string) {\n        const addr = this.parser(string);\n\n        if (addr.parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv6 Address');\n        }\n\n        return new this(addr.parts, addr.zoneId);\n    };\n\n    ipaddr.IPv6.parseCIDR = function (string) {\n        let maskLength, match, parsed;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 128) {\n                parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');\n    };\n\n    // Parse an IPv6 address.\n    ipaddr.IPv6.parser = function (string) {\n        let addr, i, match, octet, octets, zoneId;\n\n        if ((match = string.match(ipv6Regexes.deprecatedTransitional))) {\n            return this.parser(`::ffff:${match[1]}`);\n        }\n        if (ipv6Regexes.native.test(string)) {\n            return expandIPv6(string, 8);\n        }\n        if ((match = string.match(ipv6Regexes.transitional))) {\n            zoneId = match[6] || '';\n            addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n            if (addr.parts) {\n                octets = [\n                    parseInt(match[2]),\n                    parseInt(match[3]),\n                    parseInt(match[4]),\n                    parseInt(match[5])\n                ];\n                for (i = 0; i < octets.length; i++) {\n                    octet = octets[i];\n                    if (!((0 <= octet && octet <= 255))) {\n                        return null;\n                    }\n                }\n\n                addr.parts.push(octets[0] << 8 | octets[1]);\n                addr.parts.push(octets[2] << 8 | octets[3]);\n                return {\n                    parts: addr.parts,\n                    zoneId: addr.zoneId\n                };\n            }\n        }\n\n        return null;\n    };\n\n    // A utility function to return subnet mask in IPv6 format given the prefix length\n    ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 128) {\n            throw new Error('ipaddr: invalid IPv6 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 16) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // Try to parse an array in network order (MSB first) for IPv4 and IPv6\n    ipaddr.fromByteArray = function (bytes) {\n        const length = bytes.length;\n\n        if (length === 4) {\n            return new ipaddr.IPv4(bytes);\n        } else if (length === 16) {\n            return new ipaddr.IPv6(bytes);\n        } else {\n            throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');\n        }\n    };\n\n    // Checks if the address is valid IP address\n    ipaddr.isValid = function (string) {\n        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n    };\n\n\n    // Attempts to parse an IP Address, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parse = function (string) {\n        if (ipaddr.IPv6.isValid(string)) {\n            return ipaddr.IPv6.parse(string);\n        } else if (ipaddr.IPv4.isValid(string)) {\n            return ipaddr.IPv4.parse(string);\n        } else {\n            throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');\n        }\n    };\n\n    // Attempt to parse CIDR notation, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parseCIDR = function (string) {\n        try {\n            return ipaddr.IPv6.parseCIDR(string);\n        } catch (e) {\n            try {\n                return ipaddr.IPv4.parseCIDR(string);\n            } catch (e2) {\n                throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');\n            }\n        }\n    };\n\n    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address\n    ipaddr.process = function (string) {\n        const addr = this.parse(string);\n\n        if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n            return addr.toIPv4Address();\n        } else {\n            return addr;\n        }\n    };\n\n    // An utility function to ease named range matching. See examples below.\n    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors\n    // on matching IPv4 addresses to IPv6 ranges or vice versa.\n    ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n        let i, rangeName, rangeSubnets, subnet;\n\n        if (defaultName === undefined || defaultName === null) {\n            defaultName = 'unicast';\n        }\n\n        for (rangeName in rangeList) {\n            if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {\n                rangeSubnets = rangeList[rangeName];\n                // ECMA5 Array.isArray isn't available everywhere\n                if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n                    rangeSubnets = [rangeSubnets];\n                }\n\n                for (i = 0; i < rangeSubnets.length; i++) {\n                    subnet = rangeSubnets[i];\n                    if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {\n                        return rangeName;\n                    }\n                }\n            }\n        }\n\n        return defaultName;\n    };\n\n    // Export for both the CommonJS and browser-like environment\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = ipaddr;\n\n    } else {\n        root.ipaddr = ipaddr;\n    }\n\n}(this));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}