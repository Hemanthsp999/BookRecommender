{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  ConcatSource,\n  PrefixSource\n} = require(\"webpack-sources\");\nconst {\n  WEBPACK_MODULE_TYPE_RUNTIME\n} = require(\"./ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"./RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\nconst NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/**\n * @typedef {Object} RenderManifestOptions\n * @property {Chunk} chunk the chunk used to render\n * @property {string} hash\n * @property {string} fullHash\n * @property {OutputOptions} outputOptions\n * @property {CodeGenerationResults} codeGenerationResults\n * @property {{javascript: ModuleTemplate}} moduleTemplates\n * @property {DependencyTemplates} dependencyTemplates\n * @property {RuntimeTemplate} runtimeTemplate\n * @property {ModuleGraph} moduleGraph\n * @property {ChunkGraph} chunkGraph\n */\n\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\n\n/**\n * @typedef {Object} RenderManifestEntryTemplated\n * @property {function(): Source} render\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\n * @property {PathData=} pathOptions\n * @property {AssetInfo=} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} RenderManifestEntryStatic\n * @property {function(): Source} render\n * @property {string} filename\n * @property {AssetInfo} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\nclass Template {\n  /**\n   *\n   * @param {Function} fn a runtime function (.runtime.js) \"template\"\n   * @returns {string} the updated and normalized function string\n   */\n  static getFunctionContent(fn) {\n    return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n  }\n\n  /**\n   * @param {string} str the string converted to identifier\n   * @returns {string} created identifier\n   */\n  static toIdentifier(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n  }\n  /**\n   *\n   * @param {string} str string to be converted to commented in bundle code\n   * @returns {string} returns a commented version of string\n   */\n  static toComment(str) {\n    if (!str) return \"\";\n    return `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n\n  /**\n   *\n   * @param {string} str string to be converted to \"normal comment\"\n   * @returns {string} returns a commented version of string\n   */\n  static toNormalComment(str) {\n    if (!str) return \"\";\n    return `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n\n  /**\n   * @param {string} str string path to be normalized\n   * @returns {string} normalized bundle-safe path\n   */\n  static toPath(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n  }\n\n  // map number to a single character a-z, A-Z or multiple characters if number is too big\n  /**\n   * @param {number} n number to convert to ident\n   * @returns {string} returns single character ident\n   */\n  static numberToIdentifier(n) {\n    if (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\n      // use multiple letters\n      return Template.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS));\n    }\n\n    // lower case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n    }\n    n -= DELTA_A_TO_Z;\n\n    // upper case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n    }\n    if (n === DELTA_A_TO_Z) return \"_\";\n    return \"$\";\n  }\n\n  /**\n   * @param {number} n number to convert to ident\n   * @returns {string} returns single character ident\n   */\n  static numberToIdentifierContinuation(n) {\n    if (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\n      // use multiple letters\n      return Template.numberToIdentifierContinuation(n % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS));\n    }\n\n    // lower case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n    }\n    n -= DELTA_A_TO_Z;\n\n    // upper case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n    }\n    n -= DELTA_A_TO_Z;\n\n    // numbers\n    if (n < 10) {\n      return `${n}`;\n    }\n    if (n === 10) return \"_\";\n    return \"$\";\n  }\n\n  /**\n   *\n   * @param {string | string[]} s string to convert to identity\n   * @returns {string} converted identity\n   */\n  static indent(s) {\n    if (Array.isArray(s)) {\n      return s.map(Template.indent).join(\"\\n\");\n    } else {\n      const str = s.trimEnd();\n      if (!str) return \"\";\n      const ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n    }\n  }\n\n  /**\n   *\n   * @param {string|string[]} s string to create prefix for\n   * @param {string} prefix prefix to compose\n   * @returns {string} returns new prefix string\n   */\n  static prefix(s, prefix) {\n    const str = Template.asString(s).trim();\n    if (!str) return \"\";\n    const ind = str[0] === \"\\n\" ? \"\" : prefix;\n    return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n  }\n\n  /**\n   *\n   * @param {string|string[]} str string or string collection\n   * @returns {string} returns a single string from array\n   */\n  static asString(str) {\n    if (Array.isArray(str)) {\n      return str.join(\"\\n\");\n    }\n    return str;\n  }\n\n  /**\n   * @typedef {Object} WithId\n   * @property {string|number} id\n   */\n\n  /**\n   * @param {WithId[]} modules a collection of modules to get array bounds for\n   * @returns {[number, number] | false} returns the upper and lower array bounds\n   * or false if not every module has a number based id\n   */\n  static getModulesArrayBounds(modules) {\n    let maxId = -Infinity;\n    let minId = Infinity;\n    for (const module of modules) {\n      const moduleId = module.id;\n      if (typeof moduleId !== \"number\") return false;\n      if (maxId < moduleId) maxId = moduleId;\n      if (minId > moduleId) minId = moduleId;\n    }\n    if (minId < 16 + (\"\" + minId).length) {\n      // add minId x ',' instead of 'Array(minId).concat(…)'\n      minId = 0;\n    }\n    // start with -1 because the first module needs no comma\n    let objectOverhead = -1;\n    for (const module of modules) {\n      // module id + colon + comma\n      objectOverhead += `${module.id}`.length + 2;\n    }\n    // number of commas, or when starting non-zero the length of Array(minId).concat()\n    const arrayOverhead = minId === 0 ? maxId : 16 + `${minId}`.length + maxId;\n    return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n  }\n\n  /**\n   * @param {ChunkRenderContext} renderContext render context\n   * @param {Module[]} modules modules to render (should be ordered by identifier)\n   * @param {function(Module): Source} renderModule function to render a module\n   * @param {string=} prefix applying prefix strings\n   * @returns {Source} rendered chunk modules in a Source object\n   */\n  static renderChunkModules(renderContext, modules, renderModule) {\n    let prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const {\n      chunkGraph\n    } = renderContext;\n    var source = new ConcatSource();\n    if (modules.length === 0) {\n      return null;\n    }\n    /** @type {{id: string|number, source: Source|string}[]} */\n    const allModules = modules.map(module => {\n      return {\n        id: chunkGraph.getModuleId(module),\n        source: renderModule(module) || \"false\"\n      };\n    });\n    const bounds = Template.getModulesArrayBounds(allModules);\n    if (bounds) {\n      // Render a spare array\n      const minId = bounds[0];\n      const maxId = bounds[1];\n      if (minId !== 0) {\n        source.add(`Array(${minId}).concat(`);\n      }\n      source.add(\"[\\n\");\n      /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n      const modules = new Map();\n      for (const module of allModules) {\n        modules.set(module.id, module);\n      }\n      for (let idx = minId; idx <= maxId; idx++) {\n        const module = modules.get(idx);\n        if (idx !== minId) {\n          source.add(\",\\n\");\n        }\n        source.add(`/* ${idx} */`);\n        if (module) {\n          source.add(\"\\n\");\n          source.add(module.source);\n        }\n      }\n      source.add(\"\\n\" + prefix + \"]\");\n      if (minId !== 0) {\n        source.add(\")\");\n      }\n    } else {\n      // Render an object\n      source.add(\"{\\n\");\n      for (let i = 0; i < allModules.length; i++) {\n        const module = allModules[i];\n        if (i !== 0) {\n          source.add(\",\\n\");\n        }\n        source.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n        source.add(module.source);\n      }\n      source.add(`\\n\\n${prefix}}`);\n    }\n    return source;\n  }\n\n  /**\n   * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n   * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\n   * @returns {Source} rendered runtime modules in a Source object\n   */\n  static renderRuntimeModules(runtimeModules, renderContext) {\n    const source = new ConcatSource();\n    for (const module of runtimeModules) {\n      const codeGenerationResults = renderContext.codeGenerationResults;\n      let runtimeSource;\n      if (codeGenerationResults) {\n        runtimeSource = codeGenerationResults.getSource(module, renderContext.chunk.runtime, WEBPACK_MODULE_TYPE_RUNTIME);\n      } else {\n        const codeGenResult = module.codeGeneration({\n          chunkGraph: renderContext.chunkGraph,\n          dependencyTemplates: renderContext.dependencyTemplates,\n          moduleGraph: renderContext.moduleGraph,\n          runtimeTemplate: renderContext.runtimeTemplate,\n          runtime: renderContext.chunk.runtime,\n          codeGenerationResults\n        });\n        if (!codeGenResult) continue;\n        runtimeSource = codeGenResult.sources.get(\"runtime\");\n      }\n      if (runtimeSource) {\n        source.add(Template.toNormalComment(module.identifier()) + \"\\n\");\n        if (!module.shouldIsolate()) {\n          source.add(runtimeSource);\n          source.add(\"\\n\\n\");\n        } else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\n          source.add(\"(() => {\\n\");\n          source.add(new PrefixSource(\"\\t\", runtimeSource));\n          source.add(\"\\n})();\\n\\n\");\n        } else {\n          source.add(\"!function() {\\n\");\n          source.add(new PrefixSource(\"\\t\", runtimeSource));\n          source.add(\"\\n}();\\n\\n\");\n        }\n      }\n    }\n    return source;\n  }\n\n  /**\n   * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n   * @param {RenderContext} renderContext render context\n   * @returns {Source} rendered chunk runtime modules in a Source object\n   */\n  static renderChunkRuntimeModules(runtimeModules, renderContext) {\n    return new PrefixSource(\"/******/ \", new ConcatSource(`function(${RuntimeGlobals.require}) { // webpackRuntimeModules\\n`, this.renderRuntimeModules(runtimeModules, renderContext), \"}\\n\"));\n  }\n}\nmodule.exports = Template;\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS;\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;","map":{"version":3,"names":["ConcatSource","PrefixSource","require","WEBPACK_MODULE_TYPE_RUNTIME","RuntimeGlobals","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","NUMBER_OF_IDENTIFIER_START_CHARS","NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","Template","getFunctionContent","fn","toString","replace","toIdentifier","str","toComment","toNormalComment","toPath","numberToIdentifier","n","numberToIdentifierContinuation","Math","floor","String","fromCharCode","indent","s","Array","isArray","map","join","trimEnd","ind","prefix","asString","trim","getModulesArrayBounds","modules","maxId","Infinity","minId","module","moduleId","id","length","objectOverhead","arrayOverhead","renderChunkModules","renderContext","renderModule","arguments","undefined","chunkGraph","source","allModules","getModuleId","bounds","add","Map","set","idx","get","i","JSON","stringify","renderRuntimeModules","runtimeModules","codeGenerationResults","runtimeSource","getSource","chunk","runtime","codeGenResult","codeGeneration","dependencyTemplates","moduleGraph","runtimeTemplate","sources","identifier","shouldIsolate","supportsArrowFunction","renderChunkRuntimeModules","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/Template.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\nconst { WEBPACK_MODULE_TYPE_RUNTIME } = require(\"./ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"./RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\nconst NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\n\tNUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/**\n * @typedef {Object} RenderManifestOptions\n * @property {Chunk} chunk the chunk used to render\n * @property {string} hash\n * @property {string} fullHash\n * @property {OutputOptions} outputOptions\n * @property {CodeGenerationResults} codeGenerationResults\n * @property {{javascript: ModuleTemplate}} moduleTemplates\n * @property {DependencyTemplates} dependencyTemplates\n * @property {RuntimeTemplate} runtimeTemplate\n * @property {ModuleGraph} moduleGraph\n * @property {ChunkGraph} chunkGraph\n */\n\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\n\n/**\n * @typedef {Object} RenderManifestEntryTemplated\n * @property {function(): Source} render\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\n * @property {PathData=} pathOptions\n * @property {AssetInfo=} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} RenderManifestEntryStatic\n * @property {function(): Source} render\n * @property {string} filename\n * @property {AssetInfo} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\nclass Template {\n\t/**\n\t *\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\n\t * @returns {string} the updated and normalized function string\n\t */\n\tstatic getFunctionContent(fn) {\n\t\treturn fn\n\t\t\t.toString()\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\n\t}\n\n\t/**\n\t * @param {string} str the string converted to identifier\n\t * @returns {string} created identifier\n\t */\n\tstatic toIdentifier(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n\t}\n\t/**\n\t *\n\t * @param {string} str string to be converted to commented in bundle code\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t *\n\t * @param {string} str string to be converted to \"normal comment\"\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toNormalComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t * @param {string} str string path to be normalized\n\t * @returns {string} normalized bundle-safe path\n\t */\n\tstatic toPath(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n\t}\n\n\t// map number to a single character a-z, A-Z or multiple characters if number is too big\n\t/**\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifier(n) {\n\t\tif (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\n\t\t\t// use multiple letters\n\t\t\treturn (\n\t\t\t\tTemplate.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) +\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n\t\t}\n\n\t\tif (n === DELTA_A_TO_Z) return \"_\";\n\t\treturn \"$\";\n\t}\n\n\t/**\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifierContinuation(n) {\n\t\tif (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\n\t\t\t// use multiple letters\n\t\t\treturn (\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tn % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS\n\t\t\t\t) +\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// numbers\n\t\tif (n < 10) {\n\t\t\treturn `${n}`;\n\t\t}\n\n\t\tif (n === 10) return \"_\";\n\t\treturn \"$\";\n\t}\n\n\t/**\n\t *\n\t * @param {string | string[]} s string to convert to identity\n\t * @returns {string} converted identity\n\t */\n\tstatic indent(s) {\n\t\tif (Array.isArray(s)) {\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\n\t\t} else {\n\t\t\tconst str = s.trimEnd();\n\t\t\tif (!str) return \"\";\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} s string to create prefix for\n\t * @param {string} prefix prefix to compose\n\t * @returns {string} returns new prefix string\n\t */\n\tstatic prefix(s, prefix) {\n\t\tconst str = Template.asString(s).trim();\n\t\tif (!str) return \"\";\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} str string or string collection\n\t * @returns {string} returns a single string from array\n\t */\n\tstatic asString(str) {\n\t\tif (Array.isArray(str)) {\n\t\t\treturn str.join(\"\\n\");\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @typedef {Object} WithId\n\t * @property {string|number} id\n\t */\n\n\t/**\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\n\t * or false if not every module has a number based id\n\t */\n\tstatic getModulesArrayBounds(modules) {\n\t\tlet maxId = -Infinity;\n\t\tlet minId = Infinity;\n\t\tfor (const module of modules) {\n\t\t\tconst moduleId = module.id;\n\t\t\tif (typeof moduleId !== \"number\") return false;\n\t\t\tif (maxId < moduleId) maxId = moduleId;\n\t\t\tif (minId > moduleId) minId = moduleId;\n\t\t}\n\t\tif (minId < 16 + (\"\" + minId).length) {\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\n\t\t\tminId = 0;\n\t\t}\n\t\t// start with -1 because the first module needs no comma\n\t\tlet objectOverhead = -1;\n\t\tfor (const module of modules) {\n\t\t\t// module id + colon + comma\n\t\t\tobjectOverhead += `${module.id}`.length + 2;\n\t\t}\n\t\t// number of commas, or when starting non-zero the length of Array(minId).concat()\n\t\tconst arrayOverhead = minId === 0 ? maxId : 16 + `${minId}`.length + maxId;\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\n\t}\n\n\t/**\n\t * @param {ChunkRenderContext} renderContext render context\n\t * @param {Module[]} modules modules to render (should be ordered by identifier)\n\t * @param {function(Module): Source} renderModule function to render a module\n\t * @param {string=} prefix applying prefix strings\n\t * @returns {Source} rendered chunk modules in a Source object\n\t */\n\tstatic renderChunkModules(renderContext, modules, renderModule, prefix = \"\") {\n\t\tconst { chunkGraph } = renderContext;\n\t\tvar source = new ConcatSource();\n\t\tif (modules.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\n\t\tconst allModules = modules.map(module => {\n\t\t\treturn {\n\t\t\t\tid: chunkGraph.getModuleId(module),\n\t\t\t\tsource: renderModule(module) || \"false\"\n\t\t\t};\n\t\t});\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\n\t\tif (bounds) {\n\t\t\t// Render a spare array\n\t\t\tconst minId = bounds[0];\n\t\t\tconst maxId = bounds[1];\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\n\t\t\t}\n\t\t\tsource.add(\"[\\n\");\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\t\t\tconst modules = new Map();\n\t\t\tfor (const module of allModules) {\n\t\t\t\tmodules.set(module.id, module);\n\t\t\t}\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\n\t\t\t\tconst module = modules.get(idx);\n\t\t\t\tif (idx !== minId) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`/* ${idx} */`);\n\t\t\t\tif (module) {\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t\tsource.add(module.source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(\")\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Render an object\n\t\t\tsource.add(\"{\\n\");\n\t\t\tfor (let i = 0; i < allModules.length; i++) {\n\t\t\t\tconst module = allModules[i];\n\t\t\t\tif (i !== 0) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n\t\t\t\tsource.add(module.source);\n\t\t\t}\n\t\t\tsource.add(`\\n\\n${prefix}}`);\n\t\t}\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n\t * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\n\t * @returns {Source} rendered runtime modules in a Source object\n\t */\n\tstatic renderRuntimeModules(runtimeModules, renderContext) {\n\t\tconst source = new ConcatSource();\n\t\tfor (const module of runtimeModules) {\n\t\t\tconst codeGenerationResults = renderContext.codeGenerationResults;\n\t\t\tlet runtimeSource;\n\t\t\tif (codeGenerationResults) {\n\t\t\t\truntimeSource = codeGenerationResults.getSource(\n\t\t\t\t\tmodule,\n\t\t\t\t\trenderContext.chunk.runtime,\n\t\t\t\t\tWEBPACK_MODULE_TYPE_RUNTIME\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst codeGenResult = module.codeGeneration({\n\t\t\t\t\tchunkGraph: renderContext.chunkGraph,\n\t\t\t\t\tdependencyTemplates: renderContext.dependencyTemplates,\n\t\t\t\t\tmoduleGraph: renderContext.moduleGraph,\n\t\t\t\t\truntimeTemplate: renderContext.runtimeTemplate,\n\t\t\t\t\truntime: renderContext.chunk.runtime,\n\t\t\t\t\tcodeGenerationResults\n\t\t\t\t});\n\t\t\t\tif (!codeGenResult) continue;\n\t\t\t\truntimeSource = codeGenResult.sources.get(\"runtime\");\n\t\t\t}\n\t\t\tif (runtimeSource) {\n\t\t\t\tsource.add(Template.toNormalComment(module.identifier()) + \"\\n\");\n\t\t\t\tif (!module.shouldIsolate()) {\n\t\t\t\t\tsource.add(runtimeSource);\n\t\t\t\t\tsource.add(\"\\n\\n\");\n\t\t\t\t} else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\n\t\t\t\t\tsource.add(\"(() => {\\n\");\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\n\t\t\t\t\tsource.add(\"\\n})();\\n\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tsource.add(\"!function() {\\n\");\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\n\t\t\t\t\tsource.add(\"\\n}();\\n\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n\t * @param {RenderContext} renderContext render context\n\t * @returns {Source} rendered chunk runtime modules in a Source object\n\t */\n\tstatic renderChunkRuntimeModules(runtimeModules, renderContext) {\n\t\treturn new PrefixSource(\n\t\t\t\"/******/ \",\n\t\t\tnew ConcatSource(\n\t\t\t\t`function(${RuntimeGlobals.require}) { // webpackRuntimeModules\\n`,\n\t\t\t\tthis.renderRuntimeModules(runtimeModules, renderContext),\n\t\t\t\t\"}\\n\"\n\t\t\t)\n\t\t);\n\t}\n}\n\nmodule.exports = Template;\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS =\n\tNUMBER_OF_IDENTIFIER_START_CHARS;\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\n\tNUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}