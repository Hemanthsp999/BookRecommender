{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nmodule.exports = class ConditionalPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Partial<ResolveRequest>} test compare object\n   * @param {string | null} message log message\n   * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, test, message, allowAlternatives, target) {\n    this.source = source;\n    this.test = test;\n    this.message = message;\n    this.allowAlternatives = allowAlternatives;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const {\n      test,\n      message,\n      allowAlternatives\n    } = this;\n    const keys = /** @type {(keyof ResolveRequest)[]} */Object.keys(test);\n    resolver.getHook(this.source).tapAsync(\"ConditionalPlugin\", (request, resolveContext, callback) => {\n      for (const prop of keys) {\n        if (request[prop] !== test[prop]) return callback();\n      }\n      resolver.doResolve(target, request, message, resolveContext, allowAlternatives ? callback : (err, result) => {\n        if (err) return callback(err);\n\n        // Don't allow other alternatives\n        if (result === undefined) return callback(null, null);\n        callback(null, result);\n      });\n    });\n  }\n};","map":{"version":3,"names":["module","exports","ConditionalPlugin","constructor","source","test","message","allowAlternatives","target","apply","resolver","ensureHook","keys","Object","getHook","tapAsync","request","resolveContext","callback","prop","doResolve","err","result","undefined"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/ConditionalPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ConditionalPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Partial<ResolveRequest>} test compare object\n\t * @param {string | null} message log message\n\t * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, test, message, allowAlternatives, target) {\n\t\tthis.source = source;\n\t\tthis.test = test;\n\t\tthis.message = message;\n\t\tthis.allowAlternatives = allowAlternatives;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst { test, message, allowAlternatives } = this;\n\t\tconst keys = /** @type {(keyof ResolveRequest)[]} */ (Object.keys(test));\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ConditionalPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tfor (const prop of keys) {\n\t\t\t\t\tif (request[prop] !== test[prop]) return callback();\n\t\t\t\t}\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\trequest,\n\t\t\t\t\tmessage,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tallowAlternatives\n\t\t\t\t\t\t? callback\n\t\t\t\t\t\t: (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\t// Don't allow other alternatives\n\t\t\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t  }\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG,MAAMC,iBAAiB,CAAC;EACxC;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,MAAM,EAAE;IAC7D,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/C,MAAM;MAAEH,IAAI;MAAEC,OAAO;MAAEC;IAAkB,CAAC,GAAG,IAAI;IACjD,MAAMK,IAAI,GAAG,uCAAyCC,MAAM,CAACD,IAAI,CAACP,IAAI,CAAE;IACxEK,QAAQ,CACNI,OAAO,CAAC,IAAI,CAACV,MAAM,CAAC,CACpBW,QAAQ,CAAC,mBAAmB,EAAE,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACrE,KAAK,MAAMC,IAAI,IAAIP,IAAI,EAAE;QACxB,IAAII,OAAO,CAACG,IAAI,CAAC,KAAKd,IAAI,CAACc,IAAI,CAAC,EAAE,OAAOD,QAAQ,CAAC,CAAC;MACpD;MACAR,QAAQ,CAACU,SAAS,CACjBZ,MAAM,EACNQ,OAAO,EACPV,OAAO,EACPW,cAAc,EACdV,iBAAiB,GACdW,QAAQ,GACR,CAACG,GAAG,EAAEC,MAAM,KAAK;QACjB,IAAID,GAAG,EAAE,OAAOH,QAAQ,CAACG,GAAG,CAAC;;QAE7B;QACA,IAAIC,MAAM,KAAKC,SAAS,EAAE,OAAOL,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;QACrDA,QAAQ,CAAC,IAAI,EAAEI,MAAM,CAAC;MACtB,CACJ,CAAC;IACF,CAAC,CAAC;EACJ;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}