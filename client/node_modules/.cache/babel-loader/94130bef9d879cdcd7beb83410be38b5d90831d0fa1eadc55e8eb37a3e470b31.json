{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass WorkerDependency extends ModuleDependency {\n  /**\n   * @param {string} request request\n   * @param {Range} range range\n   * @param {Object} workerDependencyOptions options\n   * @param {string} workerDependencyOptions.publicPath public path for the worker\n   */\n  constructor(request, range, workerDependencyOptions) {\n    super(request);\n    this.range = range;\n    // If options are updated, don't forget to update the hash and serialization functions\n    this.options = workerDependencyOptions;\n    /** Cache the hash */\n    this._hashUpdate = undefined;\n  }\n\n  /**\n   * Returns list of exports referenced by this dependency\n   * @param {ModuleGraph} moduleGraph module graph\n   * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n   * @returns {(string[] | ReferencedExport)[]} referenced exports\n   */\n  getReferencedExports(moduleGraph, runtime) {\n    return Dependency.NO_EXPORTS_REFERENCED;\n  }\n  get type() {\n    return \"new Worker()\";\n  }\n  get category() {\n    return \"worker\";\n  }\n\n  /**\n   * Update the hash\n   * @param {Hash} hash hash to be updated\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n  updateHash(hash, context) {\n    if (this._hashUpdate === undefined) {\n      this._hashUpdate = JSON.stringify(this.options);\n    }\n    hash.update(this._hashUpdate);\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.options);\n    super.serialize(context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.options = read();\n    super.deserialize(context);\n  }\n}\nWorkerDependency.Template = class WorkerDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const {\n      chunkGraph,\n      moduleGraph,\n      runtimeRequirements\n    } = templateContext;\n    const dep = /** @type {WorkerDependency} */dependency;\n    const block = /** @type {AsyncDependenciesBlock} */\n    moduleGraph.getParentBlock(dependency);\n    const entrypoint = /** @type {Entrypoint} */\n    chunkGraph.getBlockChunkGroup(block);\n    const chunk = entrypoint.getEntrypointChunk();\n    // We use the workerPublicPath option if provided, else we fallback to the RuntimeGlobal publicPath\n    const workerImportBaseUrl = dep.options.publicPath ? `\"${dep.options.publicPath}\"` : RuntimeGlobals.publicPath;\n    runtimeRequirements.add(RuntimeGlobals.publicPath);\n    runtimeRequirements.add(RuntimeGlobals.baseURI);\n    runtimeRequirements.add(RuntimeGlobals.getChunkScriptFilename);\n    source.replace(dep.range[0], dep.range[1] - 1, `/* worker import */ ${workerImportBaseUrl} + ${RuntimeGlobals.getChunkScriptFilename}(${JSON.stringify(chunk.id)}), ${RuntimeGlobals.baseURI}`);\n  }\n};\nmakeSerializable(WorkerDependency, \"webpack/lib/dependencies/WorkerDependency\");\nmodule.exports = WorkerDependency;","map":{"version":3,"names":["Dependency","require","RuntimeGlobals","makeSerializable","ModuleDependency","WorkerDependency","constructor","request","range","workerDependencyOptions","options","_hashUpdate","undefined","getReferencedExports","moduleGraph","runtime","NO_EXPORTS_REFERENCED","type","category","updateHash","hash","context","JSON","stringify","update","serialize","write","deserialize","read","Template","WorkerDependencyTemplate","apply","dependency","source","templateContext","chunkGraph","runtimeRequirements","dep","block","getParentBlock","entrypoint","getBlockChunkGroup","chunk","getEntrypointChunk","workerImportBaseUrl","publicPath","add","baseURI","getChunkScriptFilename","replace","id","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/dependencies/WorkerDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass WorkerDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request request\n\t * @param {Range} range range\n\t * @param {Object} workerDependencyOptions options\n\t * @param {string} workerDependencyOptions.publicPath public path for the worker\n\t */\n\tconstructor(request, range, workerDependencyOptions) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t\t// If options are updated, don't forget to update the hash and serialization functions\n\t\tthis.options = workerDependencyOptions;\n\t\t/** Cache the hash */\n\t\tthis._hashUpdate = undefined;\n\t}\n\n\t/**\n\t * Returns list of exports referenced by this dependency\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n\t * @returns {(string[] | ReferencedExport)[]} referenced exports\n\t */\n\tgetReferencedExports(moduleGraph, runtime) {\n\t\treturn Dependency.NO_EXPORTS_REFERENCED;\n\t}\n\n\tget type() {\n\t\treturn \"new Worker()\";\n\t}\n\n\tget category() {\n\t\treturn \"worker\";\n\t}\n\n\t/**\n\t * Update the hash\n\t * @param {Hash} hash hash to be updated\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tif (this._hashUpdate === undefined) {\n\t\t\tthis._hashUpdate = JSON.stringify(this.options);\n\t\t}\n\t\thash.update(this._hashUpdate);\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.options);\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.options = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nWorkerDependency.Template = class WorkerDependencyTemplate extends (\n\tModuleDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst { chunkGraph, moduleGraph, runtimeRequirements } = templateContext;\n\t\tconst dep = /** @type {WorkerDependency} */ (dependency);\n\t\tconst block = /** @type {AsyncDependenciesBlock} */ (\n\t\t\tmoduleGraph.getParentBlock(dependency)\n\t\t);\n\t\tconst entrypoint = /** @type {Entrypoint} */ (\n\t\t\tchunkGraph.getBlockChunkGroup(block)\n\t\t);\n\t\tconst chunk = entrypoint.getEntrypointChunk();\n\t\t// We use the workerPublicPath option if provided, else we fallback to the RuntimeGlobal publicPath\n\t\tconst workerImportBaseUrl = dep.options.publicPath\n\t\t\t? `\"${dep.options.publicPath}\"`\n\t\t\t: RuntimeGlobals.publicPath;\n\n\t\truntimeRequirements.add(RuntimeGlobals.publicPath);\n\t\truntimeRequirements.add(RuntimeGlobals.baseURI);\n\t\truntimeRequirements.add(RuntimeGlobals.getChunkScriptFilename);\n\n\t\tsource.replace(\n\t\t\tdep.range[0],\n\t\t\tdep.range[1] - 1,\n\t\t\t`/* worker import */ ${workerImportBaseUrl} + ${\n\t\t\t\tRuntimeGlobals.getChunkScriptFilename\n\t\t\t}(${JSON.stringify(chunk.id)}), ${RuntimeGlobals.baseURI}`\n\t\t);\n\t}\n};\n\nmakeSerializable(WorkerDependency, \"webpack/lib/dependencies/WorkerDependency\");\n\nmodule.exports = WorkerDependency;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}