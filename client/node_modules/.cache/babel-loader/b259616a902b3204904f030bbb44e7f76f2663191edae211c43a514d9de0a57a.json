{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} JsonpLibraryPluginOptions\n * @property {LibraryType} type\n */\n\n/**\n * @typedef {Object} JsonpLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {JsonpLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<JsonpLibraryPluginParsed>}\n */\nclass JsonpLibraryPlugin extends AbstractLibraryPlugin {\n  /**\n   * @param {JsonpLibraryPluginOptions} options the plugin options\n   */\n  constructor(options) {\n    super({\n      pluginName: \"JsonpLibraryPlugin\",\n      type: options.type\n    });\n  }\n\n  /**\n   * @param {LibraryOptions} library normalized library option\n   * @returns {T | false} preprocess as needed by overriding\n   */\n  parseOptions(library) {\n    const {\n      name\n    } = library;\n    if (typeof name !== \"string\") {\n      throw new Error(`Jsonp library name must be a simple string. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`);\n    }\n    return {\n      name: /** @type {string} */name\n    };\n  }\n\n  /**\n   * @param {Source} source source\n   * @param {RenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {Source} source with library export\n   */\n  render(source, _ref, _ref2) {\n    let {\n      chunk\n    } = _ref;\n    let {\n      options,\n      compilation\n    } = _ref2;\n    const name = compilation.getPath(options.name, {\n      chunk\n    });\n    return new ConcatSource(`${name}(`, source, \")\");\n  }\n\n  /**\n   * @param {Chunk} chunk the chunk\n   * @param {Hash} hash hash\n   * @param {ChunkHashContext} chunkHashContext chunk hash context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {void}\n   */\n  chunkHash(chunk, hash, chunkHashContext, _ref3) {\n    let {\n      options,\n      compilation\n    } = _ref3;\n    hash.update(\"JsonpLibraryPlugin\");\n    hash.update(compilation.getPath(options.name, {\n      chunk\n    }));\n  }\n}\nmodule.exports = JsonpLibraryPlugin;","map":{"version":3,"names":["ConcatSource","require","AbstractLibraryPlugin","JsonpLibraryPlugin","constructor","options","pluginName","type","parseOptions","library","name","Error","COMMON_LIBRARY_NAME_MESSAGE","render","source","_ref","_ref2","chunk","compilation","getPath","chunkHash","hash","chunkHashContext","_ref3","update","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/library/JsonpLibraryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} JsonpLibraryPluginOptions\n * @property {LibraryType} type\n */\n\n/**\n * @typedef {Object} JsonpLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {JsonpLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<JsonpLibraryPluginParsed>}\n */\nclass JsonpLibraryPlugin extends AbstractLibraryPlugin {\n\t/**\n\t * @param {JsonpLibraryPluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tsuper({\n\t\t\tpluginName: \"JsonpLibraryPlugin\",\n\t\t\ttype: options.type\n\t\t});\n\t}\n\n\t/**\n\t * @param {LibraryOptions} library normalized library option\n\t * @returns {T | false} preprocess as needed by overriding\n\t */\n\tparseOptions(library) {\n\t\tconst { name } = library;\n\t\tif (typeof name !== \"string\") {\n\t\t\tthrow new Error(\n\t\t\t\t`Jsonp library name must be a simple string. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t);\n\t\t}\n\t\treturn {\n\t\t\tname: /** @type {string} */ (name)\n\t\t};\n\t}\n\n\t/**\n\t * @param {Source} source source\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {Source} source with library export\n\t */\n\trender(source, { chunk }, { options, compilation }) {\n\t\tconst name = compilation.getPath(options.name, {\n\t\t\tchunk\n\t\t});\n\t\treturn new ConcatSource(`${name}(`, source, \")\");\n\t}\n\n\t/**\n\t * @param {Chunk} chunk the chunk\n\t * @param {Hash} hash hash\n\t * @param {ChunkHashContext} chunkHashContext chunk hash context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\tchunkHash(chunk, hash, chunkHashContext, { options, compilation }) {\n\t\thash.update(\"JsonpLibraryPlugin\");\n\t\thash.update(compilation.getPath(options.name, { chunk }));\n\t}\n}\n\nmodule.exports = JsonpLibraryPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACnD,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAME,kBAAkB,SAASD,qBAAqB,CAAC;EACtD;AACD;AACA;EACCE,WAAWA,CAACC,OAAO,EAAE;IACpB,KAAK,CAAC;MACLC,UAAU,EAAE,oBAAoB;MAChCC,IAAI,EAAEF,OAAO,CAACE;IACf,CAAC,CAAC;EACH;;EAEA;AACD;AACA;AACA;EACCC,YAAYA,CAACC,OAAO,EAAE;IACrB,MAAM;MAAEC;IAAK,CAAC,GAAGD,OAAO;IACxB,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;MAC7B,MAAM,IAAIC,KAAK,CACb,+CAA8CT,qBAAqB,CAACU,2BAA4B,EAClG,CAAC;IACF;IACA,OAAO;MACNF,IAAI,EAAE,qBAAuBA;IAC9B,CAAC;EACF;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCG,MAAMA,CAACC,MAAM,EAAAC,IAAA,EAAAC,KAAA,EAAuC;IAAA,IAArC;MAAEC;IAAM,CAAC,GAAAF,IAAA;IAAA,IAAE;MAAEV,OAAO;MAAEa;IAAY,CAAC,GAAAF,KAAA;IACjD,MAAMN,IAAI,GAAGQ,WAAW,CAACC,OAAO,CAACd,OAAO,CAACK,IAAI,EAAE;MAC9CO;IACD,CAAC,CAAC;IACF,OAAO,IAAIjB,YAAY,CAAE,GAAEU,IAAK,GAAE,EAAEI,MAAM,EAAE,GAAG,CAAC;EACjD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCM,SAASA,CAACH,KAAK,EAAEI,IAAI,EAAEC,gBAAgB,EAAAC,KAAA,EAA4B;IAAA,IAA1B;MAAElB,OAAO;MAAEa;IAAY,CAAC,GAAAK,KAAA;IAChEF,IAAI,CAACG,MAAM,CAAC,oBAAoB,CAAC;IACjCH,IAAI,CAACG,MAAM,CAACN,WAAW,CAACC,OAAO,CAACd,OAAO,CAACK,IAAI,EAAE;MAAEO;IAAM,CAAC,CAAC,CAAC;EAC1D;AACD;AAEAQ,MAAM,CAACC,OAAO,GAAGvB,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}