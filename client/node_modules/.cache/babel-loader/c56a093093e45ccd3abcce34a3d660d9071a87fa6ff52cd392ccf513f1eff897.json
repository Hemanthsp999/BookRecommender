{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\nconst LAZY_TARGET = Symbol(\"lazy serialization target\");\nconst LAZY_SERIALIZED_VALUE = Symbol(\"lazy serialization data\");\n\n/**\n * @template DeserializedType\n * @template SerializedType\n */\nclass SerializerMiddleware {\n  /* istanbul ignore next */\n  /**\n   * @abstract\n   * @param {DeserializedType} data data\n   * @param {Object} context context object\n   * @returns {SerializedType|Promise<SerializedType>} serialized data\n   */\n  serialize(data, context) {\n    const AbstractMethodError = require(\"../AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n\n  /* istanbul ignore next */\n  /**\n   * @abstract\n   * @param {SerializedType} data data\n   * @param {Object} context context object\n   * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n   */\n  deserialize(data, context) {\n    const AbstractMethodError = require(\"../AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n\n  /**\n   * @param {any | function(): Promise<any> | any} value contained value or function to value\n   * @param {SerializerMiddleware<any, any>} target target middleware\n   * @param {object=} options lazy options\n   * @param {any=} serializedValue serialized value\n   * @returns {function(): Promise<any> | any} lazy function\n   */\n  static createLazy(value, target) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let serializedValue = arguments.length > 3 ? arguments[3] : undefined;\n    if (SerializerMiddleware.isLazy(value, target)) return value;\n    const fn = typeof value === \"function\" ? value : () => value;\n    fn[LAZY_TARGET] = target;\n    /** @type {any} */\n    fn.options = options;\n    fn[LAZY_SERIALIZED_VALUE] = serializedValue;\n    return fn;\n  }\n\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @param {SerializerMiddleware<any, any>=} target target middleware\n   * @returns {boolean} true, when fn is a lazy function (optionally of that target)\n   */\n  static isLazy(fn, target) {\n    if (typeof fn !== \"function\") return false;\n    const t = fn[LAZY_TARGET];\n    return target ? t === target : !!t;\n  }\n\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @returns {object} options\n   */\n  static getLazyOptions(fn) {\n    if (typeof fn !== \"function\") return undefined;\n    return (/** @type {any} */fn.options\n    );\n  }\n\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @returns {any} serialized value\n   */\n  static getLazySerializedValue(fn) {\n    if (typeof fn !== \"function\") return undefined;\n    return fn[LAZY_SERIALIZED_VALUE];\n  }\n\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @param {any} value serialized value\n   * @returns {void}\n   */\n  static setLazySerializedValue(fn, value) {\n    fn[LAZY_SERIALIZED_VALUE] = value;\n  }\n\n  /**\n   * @param {function(): Promise<any> | any} lazy lazy function\n   * @param {function(any): Promise<any> | any} serialize serialize function\n   * @returns {function(): Promise<any> | any} new lazy\n   */\n  static serializeLazy(lazy, serialize) {\n    const fn = memoize(() => {\n      const r = lazy();\n      if (r && typeof r.then === \"function\") {\n        return r.then(data => data && serialize(data));\n      }\n      return serialize(r);\n    });\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    /** @type {any} */\n    fn.options = /** @type {any} */lazy.options;\n    lazy[LAZY_SERIALIZED_VALUE] = fn;\n    return fn;\n  }\n\n  /**\n   * @param {function(): Promise<any> | any} lazy lazy function\n   * @param {function(any): Promise<any> | any} deserialize deserialize function\n   * @returns {function(): Promise<any> | any} new lazy\n   */\n  static deserializeLazy(lazy, deserialize) {\n    const fn = memoize(() => {\n      const r = lazy();\n      if (r && typeof r.then === \"function\") {\n        return r.then(data => deserialize(data));\n      }\n      return deserialize(r);\n    });\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    /** @type {any} */\n    fn.options = /** @type {any} */lazy.options;\n    fn[LAZY_SERIALIZED_VALUE] = lazy;\n    return fn;\n  }\n\n  /**\n   * @param {function(): Promise<any> | any} lazy lazy function\n   * @returns {function(): Promise<any> | any} new lazy\n   */\n  static unMemoizeLazy(lazy) {\n    if (!SerializerMiddleware.isLazy(lazy)) return lazy;\n    const fn = () => {\n      throw new Error(\"A lazy value that has been unmemorized can't be called again\");\n    };\n    fn[LAZY_SERIALIZED_VALUE] = SerializerMiddleware.unMemoizeLazy(lazy[LAZY_SERIALIZED_VALUE]);\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    fn.options = /** @type {any} */lazy.options;\n    return fn;\n  }\n}\nmodule.exports = SerializerMiddleware;","map":{"version":3,"names":["memoize","require","LAZY_TARGET","Symbol","LAZY_SERIALIZED_VALUE","SerializerMiddleware","serialize","data","context","AbstractMethodError","deserialize","createLazy","value","target","options","arguments","length","undefined","serializedValue","isLazy","fn","t","getLazyOptions","getLazySerializedValue","setLazySerializedValue","serializeLazy","lazy","r","then","deserializeLazy","unMemoizeLazy","Error","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/serialization/SerializerMiddleware.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\n\nconst LAZY_TARGET = Symbol(\"lazy serialization target\");\nconst LAZY_SERIALIZED_VALUE = Symbol(\"lazy serialization data\");\n\n/**\n * @template DeserializedType\n * @template SerializedType\n */\nclass SerializerMiddleware {\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {DeserializedType} data data\n\t * @param {Object} context context object\n\t * @returns {SerializedType|Promise<SerializedType>} serialized data\n\t */\n\tserialize(data, context) {\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {SerializedType} data data\n\t * @param {Object} context context object\n\t * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n\t */\n\tdeserialize(data, context) {\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @param {any | function(): Promise<any> | any} value contained value or function to value\n\t * @param {SerializerMiddleware<any, any>} target target middleware\n\t * @param {object=} options lazy options\n\t * @param {any=} serializedValue serialized value\n\t * @returns {function(): Promise<any> | any} lazy function\n\t */\n\tstatic createLazy(value, target, options = {}, serializedValue) {\n\t\tif (SerializerMiddleware.isLazy(value, target)) return value;\n\t\tconst fn = typeof value === \"function\" ? value : () => value;\n\t\tfn[LAZY_TARGET] = target;\n\t\t/** @type {any} */ (fn).options = options;\n\t\tfn[LAZY_SERIALIZED_VALUE] = serializedValue;\n\t\treturn fn;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @param {SerializerMiddleware<any, any>=} target target middleware\n\t * @returns {boolean} true, when fn is a lazy function (optionally of that target)\n\t */\n\tstatic isLazy(fn, target) {\n\t\tif (typeof fn !== \"function\") return false;\n\t\tconst t = fn[LAZY_TARGET];\n\t\treturn target ? t === target : !!t;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @returns {object} options\n\t */\n\tstatic getLazyOptions(fn) {\n\t\tif (typeof fn !== \"function\") return undefined;\n\t\treturn /** @type {any} */ (fn).options;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @returns {any} serialized value\n\t */\n\tstatic getLazySerializedValue(fn) {\n\t\tif (typeof fn !== \"function\") return undefined;\n\t\treturn fn[LAZY_SERIALIZED_VALUE];\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @param {any} value serialized value\n\t * @returns {void}\n\t */\n\tstatic setLazySerializedValue(fn, value) {\n\t\tfn[LAZY_SERIALIZED_VALUE] = value;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} lazy lazy function\n\t * @param {function(any): Promise<any> | any} serialize serialize function\n\t * @returns {function(): Promise<any> | any} new lazy\n\t */\n\tstatic serializeLazy(lazy, serialize) {\n\t\tconst fn = memoize(() => {\n\t\t\tconst r = lazy();\n\t\t\tif (r && typeof r.then === \"function\") {\n\t\t\t\treturn r.then(data => data && serialize(data));\n\t\t\t}\n\t\t\treturn serialize(r);\n\t\t});\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\n\t\t/** @type {any} */ (fn).options = /** @type {any} */ (lazy).options;\n\t\tlazy[LAZY_SERIALIZED_VALUE] = fn;\n\t\treturn fn;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} lazy lazy function\n\t * @param {function(any): Promise<any> | any} deserialize deserialize function\n\t * @returns {function(): Promise<any> | any} new lazy\n\t */\n\tstatic deserializeLazy(lazy, deserialize) {\n\t\tconst fn = memoize(() => {\n\t\t\tconst r = lazy();\n\t\t\tif (r && typeof r.then === \"function\") {\n\t\t\t\treturn r.then(data => deserialize(data));\n\t\t\t}\n\t\t\treturn deserialize(r);\n\t\t});\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\n\t\t/** @type {any} */ (fn).options = /** @type {any} */ (lazy).options;\n\t\tfn[LAZY_SERIALIZED_VALUE] = lazy;\n\t\treturn fn;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} lazy lazy function\n\t * @returns {function(): Promise<any> | any} new lazy\n\t */\n\tstatic unMemoizeLazy(lazy) {\n\t\tif (!SerializerMiddleware.isLazy(lazy)) return lazy;\n\t\tconst fn = () => {\n\t\t\tthrow new Error(\n\t\t\t\t\"A lazy value that has been unmemorized can't be called again\"\n\t\t\t);\n\t\t};\n\t\tfn[LAZY_SERIALIZED_VALUE] = SerializerMiddleware.unMemoizeLazy(\n\t\t\tlazy[LAZY_SERIALIZED_VALUE]\n\t\t);\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\n\t\tfn.options = /** @type {any} */ (lazy).options;\n\t\treturn fn;\n\t}\n}\n\nmodule.exports = SerializerMiddleware;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}