{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\nconst {\n  getType,\n  PathType\n} = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class SymlinkPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n      if (request.ignoreSymlinks) return callback();\n      const pathsResult = getPaths( /** @type {string} */request.path);\n      const pathSegments = pathsResult.segments;\n      const paths = pathsResult.paths;\n      let containsSymlink = false;\n      let idx = -1;\n      forEachBail(paths,\n      /**\n       * @param {string} path path\n       * @param {(err?: null|Error, result?: null|number) => void} callback callback\n       * @returns {void}\n       */\n      (path, callback) => {\n        idx++;\n        if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(path);\n        fs.readlink(path, (err, result) => {\n          if (!err && result) {\n            pathSegments[idx] = /** @type {string} */result;\n            containsSymlink = true;\n            // Shortcut when absolute symlink found\n            const resultType = getType(result.toString());\n            if (resultType === PathType.AbsoluteWin || resultType === PathType.AbsolutePosix) {\n              return callback(null, idx);\n            }\n          }\n          callback();\n        });\n      },\n      /**\n       * @param {null|Error} [err] error\n       * @param {null|number} [idx] result\n       * @returns {void}\n       */\n      (err, idx) => {\n        if (!containsSymlink) return callback();\n        const resultSegments = typeof idx === \"number\" ? pathSegments.slice(0, idx + 1) : pathSegments.slice();\n        const result = resultSegments.reduceRight((a, b) => {\n          return resolver.join(a, b);\n        });\n        /** @type {ResolveRequest} */\n        const obj = {\n          ...request,\n          path: result\n        };\n        resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n      });\n    });\n  }\n};","map":{"version":3,"names":["forEachBail","require","getPaths","getType","PathType","module","exports","SymlinkPlugin","constructor","source","target","apply","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","ignoreSymlinks","pathsResult","path","pathSegments","segments","paths","containsSymlink","idx","fileDependencies","add","readlink","err","result","resultType","toString","AbsoluteWin","AbsolutePosix","resultSegments","slice","reduceRight","a","b","join","obj","doResolve"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\nconst { getType, PathType } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class SymlinkPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (request.ignoreSymlinks) return callback();\n\t\t\t\tconst pathsResult = getPaths(/** @type {string} */ (request.path));\n\t\t\t\tconst pathSegments = pathsResult.segments;\n\t\t\t\tconst paths = pathsResult.paths;\n\n\t\t\t\tlet containsSymlink = false;\n\t\t\t\tlet idx = -1;\n\t\t\t\tforEachBail(\n\t\t\t\t\tpaths,\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {string} path path\n\t\t\t\t\t * @param {(err?: null|Error, result?: null|number) => void} callback callback\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\t(path, callback) => {\n\t\t\t\t\t\tidx++;\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(path);\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\n\t\t\t\t\t\t\tif (!err && result) {\n\t\t\t\t\t\t\t\tpathSegments[idx] = /** @type {string} */ (result);\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\n\t\t\t\t\t\t\t\tconst resultType = getType(result.toString());\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsoluteWin ||\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsolutePosix\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {null|Error} [err] error\n\t\t\t\t\t * @param {null|number} [idx] result\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\t(err, idx) => {\n\t\t\t\t\t\tif (!containsSymlink) return callback();\n\t\t\t\t\t\tconst resultSegments =\n\t\t\t\t\t\t\ttypeof idx === \"number\"\n\t\t\t\t\t\t\t\t? pathSegments.slice(0, idx + 1)\n\t\t\t\t\t\t\t\t: pathSegments.slice();\n\t\t\t\t\t\tconst result = resultSegments.reduceRight((a, b) => {\n\t\t\t\t\t\t\treturn resolver.join(a, b);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\tpath: result\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}