{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst fs = require(\"graceful-fs\");\nconst CachedInputFileSystem = require(\"./CachedInputFileSystem\");\nconst ResolverFactory = require(\"./ResolverFactory\");\n\n/** @typedef {import(\"./PnpPlugin\").PnpApiImpl} PnpApi */\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").FileSystem} FileSystem */\n/** @typedef {import(\"./Resolver\").ResolveCallback} ResolveCallback */\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./ResolverFactory\").Plugin} Plugin */\n/** @typedef {import(\"./ResolverFactory\").UserResolveOptions} ResolveOptions */\n/** @typedef {{\n * (context: object, path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (context: object, path: string, request: string, callback: ResolveCallback): void;\n * (path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (path: string, request: string, callback: ResolveCallback): void;\n * }} ResolveFunctionAsync\n */\n/** @typedef {{\n * (context: object, path: string, request: string): string|false;\n * (path: string, request: string): string|false;\n * }} ResolveFunction\n */\n\nconst nodeFileSystem = new CachedInputFileSystem(fs, 4000);\nconst nodeContext = {\n  environments: [\"node+es3+es5+process+native\"]\n};\nconst asyncResolver = ResolverFactory.createResolver({\n  conditionNames: [\"node\"],\n  extensions: [\".js\", \".json\", \".node\"],\n  fileSystem: nodeFileSystem\n});\n\n/**\n * @type {ResolveFunctionAsync}\n */\nconst resolve =\n/**\n * @param {object|string} context\n * @param {string} path\n * @param {string|ResolveContext|ResolveCallback} request\n * @param {ResolveContext|ResolveCallback=} resolveContext\n * @param {ResolveCallback=} callback\n */\n(context, path, request, resolveContext, callback) => {\n  if (typeof context === \"string\") {\n    callback = /** @type {ResolveCallback} */resolveContext;\n    resolveContext = /** @type {ResolveContext} */request;\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n  if (typeof callback !== \"function\") {\n    callback = /** @type {ResolveCallback} */resolveContext;\n  }\n  asyncResolver.resolve(context, path, /** @type {string} */request, /** @type {ResolveContext} */resolveContext, /** @type {ResolveCallback} */callback);\n};\nconst syncResolver = ResolverFactory.createResolver({\n  conditionNames: [\"node\"],\n  extensions: [\".js\", \".json\", \".node\"],\n  useSyncFileSystemCalls: true,\n  fileSystem: nodeFileSystem\n});\n\n/**\n * @type {ResolveFunction}\n */\nconst resolveSync =\n/**\n * @param {object|string} context\n * @param {string} path\n * @param {string=} request\n */\n(context, path, request) => {\n  if (typeof context === \"string\") {\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n  return syncResolver.resolveSync(context, path, /** @type {string} */request);\n};\n\n/** @typedef {Omit<ResolveOptions, \"fileSystem\"> & Partial<Pick<ResolveOptions, \"fileSystem\">>} ResolveOptionsOptionalFS */\n\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunctionAsync} Resolver function\n */\nfunction create(options) {\n  const resolver = ResolverFactory.createResolver({\n    fileSystem: nodeFileSystem,\n    ...options\n  });\n  /**\n   * @param {object|string} context Custom context\n   * @param {string} path Base path\n   * @param {string|ResolveContext|ResolveCallback} request String to resolve\n   * @param {ResolveContext|ResolveCallback=} resolveContext Resolve context\n   * @param {ResolveCallback=} callback Result callback\n   */\n  return function (context, path, request, resolveContext, callback) {\n    if (typeof context === \"string\") {\n      callback = /** @type {ResolveCallback} */resolveContext;\n      resolveContext = /** @type {ResolveContext} */request;\n      request = path;\n      path = context;\n      context = nodeContext;\n    }\n    if (typeof callback !== \"function\") {\n      callback = /** @type {ResolveCallback} */resolveContext;\n    }\n    resolver.resolve(context, path, /** @type {string} */request, /** @type {ResolveContext} */resolveContext, callback);\n  };\n}\n\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunction} Resolver function\n */\nfunction createSync(options) {\n  const resolver = ResolverFactory.createResolver({\n    useSyncFileSystemCalls: true,\n    fileSystem: nodeFileSystem,\n    ...options\n  });\n  /**\n   * @param {object|string} context custom context\n   * @param {string} path base path\n   * @param {string=} request request to resolve\n   * @returns {string|false} Resolved path or false\n   */\n  return function (context, path, request) {\n    if (typeof context === \"string\") {\n      request = path;\n      path = context;\n      context = nodeContext;\n    }\n    return resolver.resolveSync(context, path, /** @type {string} */request);\n  };\n}\n\n/**\n * @template A\n * @template B\n * @param {A} obj input a\n * @param {B} exports input b\n * @returns {A & B} merged\n */\nconst mergeExports = (obj, exports) => {\n  const descriptors = Object.getOwnPropertyDescriptors(exports);\n  Object.defineProperties(obj, descriptors);\n  return (/** @type {A & B} */Object.freeze(obj)\n  );\n};\nmodule.exports = mergeExports(resolve, {\n  get sync() {\n    return resolveSync;\n  },\n  create: mergeExports(create, {\n    get sync() {\n      return createSync;\n    }\n  }),\n  ResolverFactory,\n  CachedInputFileSystem,\n  get CloneBasenamePlugin() {\n    return require(\"./CloneBasenamePlugin\");\n  },\n  get LogInfoPlugin() {\n    return require(\"./LogInfoPlugin\");\n  },\n  get forEachBail() {\n    return require(\"./forEachBail\");\n  }\n});","map":{"version":3,"names":["fs","require","CachedInputFileSystem","ResolverFactory","nodeFileSystem","nodeContext","environments","asyncResolver","createResolver","conditionNames","extensions","fileSystem","resolve","context","path","request","resolveContext","callback","syncResolver","useSyncFileSystemCalls","resolveSync","create","options","resolver","createSync","mergeExports","obj","exports","descriptors","Object","getOwnPropertyDescriptors","defineProperties","freeze","module","sync","CloneBasenamePlugin","LogInfoPlugin","forEachBail"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/index.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst fs = require(\"graceful-fs\");\nconst CachedInputFileSystem = require(\"./CachedInputFileSystem\");\nconst ResolverFactory = require(\"./ResolverFactory\");\n\n/** @typedef {import(\"./PnpPlugin\").PnpApiImpl} PnpApi */\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").FileSystem} FileSystem */\n/** @typedef {import(\"./Resolver\").ResolveCallback} ResolveCallback */\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./ResolverFactory\").Plugin} Plugin */\n/** @typedef {import(\"./ResolverFactory\").UserResolveOptions} ResolveOptions */\n/** @typedef {{\n * (context: object, path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (context: object, path: string, request: string, callback: ResolveCallback): void;\n * (path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (path: string, request: string, callback: ResolveCallback): void;\n * }} ResolveFunctionAsync\n */\n/** @typedef {{\n * (context: object, path: string, request: string): string|false;\n * (path: string, request: string): string|false;\n * }} ResolveFunction\n */\n\nconst nodeFileSystem = new CachedInputFileSystem(fs, 4000);\n\nconst nodeContext = {\n\tenvironments: [\"node+es3+es5+process+native\"]\n};\n\nconst asyncResolver = ResolverFactory.createResolver({\n\tconditionNames: [\"node\"],\n\textensions: [\".js\", \".json\", \".node\"],\n\tfileSystem: nodeFileSystem\n});\n\n/**\n * @type {ResolveFunctionAsync}\n */\nconst resolve =\n\t/**\n\t * @param {object|string} context\n\t * @param {string} path\n\t * @param {string|ResolveContext|ResolveCallback} request\n\t * @param {ResolveContext|ResolveCallback=} resolveContext\n\t * @param {ResolveCallback=} callback\n\t */\n\t(context, path, request, resolveContext, callback) => {\n\t\tif (typeof context === \"string\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t\tresolveContext = /** @type {ResolveContext} */ (request);\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\tif (typeof callback !== \"function\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t}\n\t\tasyncResolver.resolve(\n\t\t\tcontext,\n\t\t\tpath,\n\t\t\t/** @type {string} */ (request),\n\t\t\t/** @type {ResolveContext} */ (resolveContext),\n\t\t\t/** @type {ResolveCallback} */ (callback)\n\t\t);\n\t};\n\nconst syncResolver = ResolverFactory.createResolver({\n\tconditionNames: [\"node\"],\n\textensions: [\".js\", \".json\", \".node\"],\n\tuseSyncFileSystemCalls: true,\n\tfileSystem: nodeFileSystem\n});\n\n/**\n * @type {ResolveFunction}\n */\nconst resolveSync =\n\t/**\n\t * @param {object|string} context\n\t * @param {string} path\n\t * @param {string=} request\n\t */\n\t(context, path, request) => {\n\t\tif (typeof context === \"string\") {\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\treturn syncResolver.resolveSync(\n\t\t\tcontext,\n\t\t\tpath,\n\t\t\t/** @type {string} */ (request)\n\t\t);\n\t};\n\n/** @typedef {Omit<ResolveOptions, \"fileSystem\"> & Partial<Pick<ResolveOptions, \"fileSystem\">>} ResolveOptionsOptionalFS */\n\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunctionAsync} Resolver function\n */\nfunction create(options) {\n\tconst resolver = ResolverFactory.createResolver({\n\t\tfileSystem: nodeFileSystem,\n\t\t...options\n\t});\n\t/**\n\t * @param {object|string} context Custom context\n\t * @param {string} path Base path\n\t * @param {string|ResolveContext|ResolveCallback} request String to resolve\n\t * @param {ResolveContext|ResolveCallback=} resolveContext Resolve context\n\t * @param {ResolveCallback=} callback Result callback\n\t */\n\treturn function (context, path, request, resolveContext, callback) {\n\t\tif (typeof context === \"string\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t\tresolveContext = /** @type {ResolveContext} */ (request);\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\tif (typeof callback !== \"function\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t}\n\t\tresolver.resolve(\n\t\t\tcontext,\n\t\t\tpath,\n\t\t\t/** @type {string} */ (request),\n\t\t\t/** @type {ResolveContext} */ (resolveContext),\n\t\t\tcallback\n\t\t);\n\t};\n}\n\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunction} Resolver function\n */\nfunction createSync(options) {\n\tconst resolver = ResolverFactory.createResolver({\n\t\tuseSyncFileSystemCalls: true,\n\t\tfileSystem: nodeFileSystem,\n\t\t...options\n\t});\n\t/**\n\t * @param {object|string} context custom context\n\t * @param {string} path base path\n\t * @param {string=} request request to resolve\n\t * @returns {string|false} Resolved path or false\n\t */\n\treturn function (context, path, request) {\n\t\tif (typeof context === \"string\") {\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\treturn resolver.resolveSync(context, path, /** @type {string} */ (request));\n\t};\n}\n\n/**\n * @template A\n * @template B\n * @param {A} obj input a\n * @param {B} exports input b\n * @returns {A & B} merged\n */\nconst mergeExports = (obj, exports) => {\n\tconst descriptors = Object.getOwnPropertyDescriptors(exports);\n\tObject.defineProperties(obj, descriptors);\n\treturn /** @type {A & B} */ (Object.freeze(obj));\n};\n\nmodule.exports = mergeExports(resolve, {\n\tget sync() {\n\t\treturn resolveSync;\n\t},\n\tcreate: mergeExports(create, {\n\t\tget sync() {\n\t\t\treturn createSync;\n\t\t}\n\t}),\n\tResolverFactory,\n\tCachedInputFileSystem,\n\tget CloneBasenamePlugin() {\n\t\treturn require(\"./CloneBasenamePlugin\");\n\t},\n\tget LogInfoPlugin() {\n\t\treturn require(\"./LogInfoPlugin\");\n\t},\n\tget forEachBail() {\n\t\treturn require(\"./forEachBail\");\n\t}\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}