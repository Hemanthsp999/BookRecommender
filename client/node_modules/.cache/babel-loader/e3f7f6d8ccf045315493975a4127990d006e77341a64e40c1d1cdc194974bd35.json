{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst eslintScope = require(\"eslint-scope\");\nconst Referencer = require(\"eslint-scope/lib/referencer\");\nconst {\n  CachedSource,\n  ConcatSource,\n  ReplaceSource\n} = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst {\n  UsageState\n} = require(\"../ExportsInfo\");\nconst Module = require(\"../Module\");\nconst {\n  JAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst JavascriptParser = require(\"../javascript/JavascriptParser\");\nconst {\n  equals\n} = require(\"../util/ArrayHelpers\");\nconst LazySet = require(\"../util/LazySet\");\nconst {\n  concatComparators\n} = require(\"../util/comparators\");\nconst createHash = require(\"../util/createHash\");\nconst {\n  makePathsRelative\n} = require(\"../util/identifier\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst propertyAccess = require(\"../util/propertyAccess\");\nconst {\n  propertyName\n} = require(\"../util/propertyName\");\nconst {\n  filterRuntime,\n  intersectRuntime,\n  mergeRuntimeCondition,\n  mergeRuntimeConditionNonFalse,\n  runtimeConditionToString,\n  subtractRuntimeCondition\n} = require(\"../util/runtime\");\n\n/** @typedef {import(\"eslint-scope\").Scope} Scope */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../ExportsInfo\").ExportInfo} ExportInfo */\n/** @template T @typedef {import(\"../InitFragment\")<T>} InitFragment */\n/** @typedef {import(\"../Module\").CodeGenerationContext} CodeGenerationContext */\n/** @typedef {import(\"../Module\").CodeGenerationResult} CodeGenerationResult */\n/** @typedef {import(\"../Module\").LibIdentOptions} LibIdentOptions */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {typeof import(\"../util/Hash\")} HashConstructor */\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n// fix eslint-scope to support class properties correctly\n// cspell:word Referencer\nconst ReferencerClass = Referencer;\nif (!ReferencerClass.prototype.PropertyDefinition) {\n  ReferencerClass.prototype.PropertyDefinition = ReferencerClass.prototype.Property;\n}\n\n/**\n * @typedef {Object} ReexportInfo\n * @property {Module} module\n * @property {string[]} export\n */\n\n/** @typedef {RawBinding | SymbolBinding} Binding */\n\n/**\n * @typedef {Object} RawBinding\n * @property {ModuleInfo} info\n * @property {string} rawName\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/**\n * @typedef {Object} SymbolBinding\n * @property {ConcatenatedModuleInfo} info\n * @property {string} name\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo } ModuleInfo */\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo | ReferenceToModuleInfo } ModuleInfoOrReference */\n\n/**\n * @typedef {Object} ConcatenatedModuleInfo\n * @property {\"concatenated\"} type\n * @property {Module} module\n * @property {number} index\n * @property {Object} ast\n * @property {Source} internalSource\n * @property {ReplaceSource} source\n * @property {InitFragment<ChunkRenderContext>[]=} chunkInitFragments\n * @property {Iterable<string>} runtimeRequirements\n * @property {Scope} globalScope\n * @property {Scope} moduleScope\n * @property {Map<string, string>} internalNames\n * @property {Map<string, string>} exportMap\n * @property {Map<string, string>} rawExportMap\n * @property {string=} namespaceExportSymbol\n * @property {string} namespaceObjectName\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ExternalModuleInfo\n * @property {\"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {number} index\n * @property {string} name\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ReferenceToModuleInfo\n * @property {\"reference\"} type\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {ConcatenatedModuleInfo | ExternalModuleInfo} target\n */\n\nconst RESERVED_NAMES = new Set([\n// internal names (should always be renamed)\nConcatenationScope.DEFAULT_EXPORT, ConcatenationScope.NAMESPACE_OBJECT_EXPORT,\n// keywords\n\"abstract,arguments,async,await,boolean,break,byte,case,catch,char,class,const,continue\", \"debugger,default,delete,do,double,else,enum,eval,export,extends,false,final,finally,float\", \"for,function,goto,if,implements,import,in,instanceof,int,interface,let,long,native,new,null\", \"package,private,protected,public,return,short,static,super,switch,synchronized,this,throw\", \"throws,transient,true,try,typeof,var,void,volatile,while,with,yield\",\n// commonjs/amd\n\"module,__dirname,__filename,exports,require,define\",\n// js globals\n\"Array,Date,eval,function,hasOwnProperty,Infinity,isFinite,isNaN,isPrototypeOf,length,Math\", \"NaN,name,Number,Object,prototype,String,toString,undefined,valueOf\",\n// browser globals\n\"alert,all,anchor,anchors,area,assign,blur,button,checkbox,clearInterval,clearTimeout\", \"clientInformation,close,closed,confirm,constructor,crypto,decodeURI,decodeURIComponent\", \"defaultStatus,document,element,elements,embed,embeds,encodeURI,encodeURIComponent,escape\", \"event,fileUpload,focus,form,forms,frame,innerHeight,innerWidth,layer,layers,link,location\", \"mimeTypes,navigate,navigator,frames,frameRate,hidden,history,image,images,offscreenBuffering\", \"open,opener,option,outerHeight,outerWidth,packages,pageXOffset,pageYOffset,parent,parseFloat\", \"parseInt,password,pkcs11,plugin,prompt,propertyIsEnum,radio,reset,screenX,screenY,scroll\", \"secure,select,self,setInterval,setTimeout,status,submit,taint,text,textarea,top,unescape\", \"untaint,window\",\n// window events\n\"onblur,onclick,onerror,onfocus,onkeydown,onkeypress,onkeyup,onmouseover,onload,onmouseup,onmousedown,onsubmit\"].join(\",\").split(\",\"));\nconst createComparator = (property, comparator) => (a, b) => comparator(a[property], b[property]);\nconst compareNumbers = (a, b) => {\n  if (isNaN(a)) {\n    if (!isNaN(b)) {\n      return 1;\n    }\n  } else {\n    if (isNaN(b)) {\n      return -1;\n    }\n    if (a !== b) {\n      return a < b ? -1 : 1;\n    }\n  }\n  return 0;\n};\nconst bySourceOrder = createComparator(\"sourceOrder\", compareNumbers);\nconst byRangeStart = createComparator(\"rangeStart\", compareNumbers);\nconst joinIterableWithComma = iterable => {\n  // This is more performant than Array.from().join(\", \")\n  // as it doesn't create an array\n  let str = \"\";\n  let first = true;\n  for (const item of iterable) {\n    if (first) {\n      first = false;\n    } else {\n      str += \", \";\n    }\n    str += item;\n  }\n  return str;\n};\n\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n */\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @param {Set<ExportInfo>} alreadyVisited alreadyVisited\n * @returns {Binding} the final variable\n */\nconst getFinalBinding = function (moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, strictHarmonyModule, asiSafe) {\n  let alreadyVisited = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : new Set();\n  const exportsType = info.module.getExportsType(moduleGraph, strictHarmonyModule);\n  if (exportName.length === 0) {\n    switch (exportsType) {\n      case \"default-only\":\n        info.interopNamespaceObject2Used = true;\n        return {\n          info,\n          rawName: info.interopNamespaceObject2Name,\n          ids: exportName,\n          exportName\n        };\n      case \"default-with-named\":\n        info.interopNamespaceObjectUsed = true;\n        return {\n          info,\n          rawName: info.interopNamespaceObjectName,\n          ids: exportName,\n          exportName\n        };\n      case \"namespace\":\n      case \"dynamic\":\n        break;\n      default:\n        throw new Error(`Unexpected exportsType ${exportsType}`);\n    }\n  } else {\n    switch (exportsType) {\n      case \"namespace\":\n        break;\n      case \"default-with-named\":\n        switch (exportName[0]) {\n          case \"default\":\n            exportName = exportName.slice(1);\n            break;\n          case \"__esModule\":\n            return {\n              info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName\n            };\n        }\n        break;\n      case \"default-only\":\n        {\n          const exportId = exportName[0];\n          if (exportId === \"__esModule\") {\n            return {\n              info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName\n            };\n          }\n          exportName = exportName.slice(1);\n          if (exportId !== \"default\") {\n            return {\n              info,\n              rawName: \"/* non-default import from default-exporting module */undefined\",\n              ids: exportName,\n              exportName\n            };\n          }\n          break;\n        }\n      case \"dynamic\":\n        switch (exportName[0]) {\n          case \"default\":\n            {\n              exportName = exportName.slice(1);\n              info.interopDefaultAccessUsed = true;\n              const defaultExport = asCall ? `${info.interopDefaultAccessName}()` : asiSafe ? `(${info.interopDefaultAccessName}())` : asiSafe === false ? `;(${info.interopDefaultAccessName}())` : `${info.interopDefaultAccessName}.a`;\n              return {\n                info,\n                rawName: defaultExport,\n                ids: exportName,\n                exportName\n              };\n            }\n          case \"__esModule\":\n            return {\n              info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName\n            };\n        }\n        break;\n      default:\n        throw new Error(`Unexpected exportsType ${exportsType}`);\n    }\n  }\n  if (exportName.length === 0) {\n    switch (info.type) {\n      case \"concatenated\":\n        neededNamespaceObjects.add(info);\n        return {\n          info,\n          rawName: info.namespaceObjectName,\n          ids: exportName,\n          exportName\n        };\n      case \"external\":\n        return {\n          info,\n          rawName: info.name,\n          ids: exportName,\n          exportName\n        };\n    }\n  }\n  const exportsInfo = moduleGraph.getExportsInfo(info.module);\n  const exportInfo = exportsInfo.getExportInfo(exportName[0]);\n  if (alreadyVisited.has(exportInfo)) {\n    return {\n      info,\n      rawName: \"/* circular reexport */ Object(function x() { x() }())\",\n      ids: [],\n      exportName\n    };\n  }\n  alreadyVisited.add(exportInfo);\n  switch (info.type) {\n    case \"concatenated\":\n      {\n        const exportId = exportName[0];\n        if (exportInfo.provided === false) {\n          // It's not provided, but it could be on the prototype\n          neededNamespaceObjects.add(info);\n          return {\n            info,\n            rawName: info.namespaceObjectName,\n            ids: exportName,\n            exportName\n          };\n        }\n        const directExport = info.exportMap && info.exportMap.get(exportId);\n        if (directExport) {\n          const usedName = /** @type {string[]} */\n          exportsInfo.getUsedName(exportName, runtime);\n          if (!usedName) {\n            return {\n              info,\n              rawName: \"/* unused export */ undefined\",\n              ids: exportName.slice(1),\n              exportName\n            };\n          }\n          return {\n            info,\n            name: directExport,\n            ids: usedName.slice(1),\n            exportName\n          };\n        }\n        const rawExport = info.rawExportMap && info.rawExportMap.get(exportId);\n        if (rawExport) {\n          return {\n            info,\n            rawName: rawExport,\n            ids: exportName.slice(1),\n            exportName\n          };\n        }\n        const reexport = exportInfo.findTarget(moduleGraph, module => moduleToInfoMap.has(module));\n        if (reexport === false) {\n          throw new Error(`Target module of reexport from '${info.module.readableIdentifier(requestShortener)}' is not part of the concatenation (export '${exportId}')\\nModules in the concatenation:\\n${Array.from(moduleToInfoMap, _ref => {\n            let [m, info] = _ref;\n            return ` * ${info.type} ${m.readableIdentifier(requestShortener)}`;\n          }).join(\"\\n\")}`);\n        }\n        if (reexport) {\n          const refInfo = moduleToInfoMap.get(reexport.module);\n          return getFinalBinding(moduleGraph, refInfo, reexport.export ? [...reexport.export, ...exportName.slice(1)] : exportName.slice(1), moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, info.module.buildMeta.strictHarmonyModule, asiSafe, alreadyVisited);\n        }\n        if (info.namespaceExportSymbol) {\n          const usedName = /** @type {string[]} */\n          exportsInfo.getUsedName(exportName, runtime);\n          return {\n            info,\n            rawName: info.namespaceObjectName,\n            ids: usedName,\n            exportName\n          };\n        }\n        throw new Error(`Cannot get final name for export '${exportName.join(\".\")}' of ${info.module.readableIdentifier(requestShortener)}`);\n      }\n    case \"external\":\n      {\n        const used = /** @type {string[]} */\n        exportsInfo.getUsedName(exportName, runtime);\n        if (!used) {\n          return {\n            info,\n            rawName: \"/* unused export */ undefined\",\n            ids: exportName.slice(1),\n            exportName\n          };\n        }\n        const comment = equals(used, exportName) ? \"\" : Template.toNormalComment(`${exportName.join(\".\")}`);\n        return {\n          info,\n          rawName: info.name + comment,\n          ids: used,\n          exportName\n        };\n      }\n  }\n};\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} callContext callContext\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @returns {string} the final name\n */\nconst getFinalName = (moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, callContext, strictHarmonyModule, asiSafe) => {\n  const binding = getFinalBinding(moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, strictHarmonyModule, asiSafe);\n  {\n    const {\n      ids,\n      comment\n    } = binding;\n    let reference;\n    let isPropertyAccess;\n    if (\"rawName\" in binding) {\n      reference = `${binding.rawName}${comment || \"\"}${propertyAccess(ids)}`;\n      isPropertyAccess = ids.length > 0;\n    } else {\n      const {\n        info,\n        name: exportId\n      } = binding;\n      const name = info.internalNames.get(exportId);\n      if (!name) {\n        throw new Error(`The export \"${exportId}\" in \"${info.module.readableIdentifier(requestShortener)}\" has no internal name (existing names: ${Array.from(info.internalNames, _ref2 => {\n          let [name, symbol] = _ref2;\n          return `${name}: ${symbol}`;\n        }).join(\", \") || \"none\"})`);\n      }\n      reference = `${name}${comment || \"\"}${propertyAccess(ids)}`;\n      isPropertyAccess = ids.length > 1;\n    }\n    if (isPropertyAccess && asCall && callContext === false) {\n      return asiSafe ? `(0,${reference})` : asiSafe === false ? `;(0,${reference})` : `/*#__PURE__*/Object(${reference})`;\n    }\n    return reference;\n  }\n};\nconst addScopeSymbols = (s, nameSet, scopeSet1, scopeSet2) => {\n  let scope = s;\n  while (scope) {\n    if (scopeSet1.has(scope)) break;\n    if (scopeSet2.has(scope)) break;\n    scopeSet1.add(scope);\n    for (const variable of scope.variables) {\n      nameSet.add(variable.name);\n    }\n    scope = scope.upper;\n  }\n};\nconst getAllReferences = variable => {\n  let set = variable.references;\n  // Look for inner scope variables too (like in class Foo { t() { Foo } })\n  const identifiers = new Set(variable.identifiers);\n  for (const scope of variable.scope.childScopes) {\n    for (const innerVar of scope.variables) {\n      if (innerVar.identifiers.some(id => identifiers.has(id))) {\n        set = set.concat(innerVar.references);\n        break;\n      }\n    }\n  }\n  return set;\n};\nconst getPathInAst = (ast, node) => {\n  if (ast === node) {\n    return [];\n  }\n  const nr = node.range;\n  const enterNode = n => {\n    if (!n) return undefined;\n    const r = n.range;\n    if (r) {\n      if (r[0] <= nr[0] && r[1] >= nr[1]) {\n        const path = getPathInAst(n, node);\n        if (path) {\n          path.push(n);\n          return path;\n        }\n      }\n    }\n    return undefined;\n  };\n  if (Array.isArray(ast)) {\n    for (let i = 0; i < ast.length; i++) {\n      const enterResult = enterNode(ast[i]);\n      if (enterResult !== undefined) return enterResult;\n    }\n  } else if (ast && typeof ast === \"object\") {\n    const keys = Object.keys(ast);\n    for (let i = 0; i < keys.length; i++) {\n      const value = ast[keys[i]];\n      if (Array.isArray(value)) {\n        const pathResult = getPathInAst(value, node);\n        if (pathResult !== undefined) return pathResult;\n      } else if (value && typeof value === \"object\") {\n        const enterResult = enterNode(value);\n        if (enterResult !== undefined) return enterResult;\n      }\n    }\n  }\n};\nconst TYPES = new Set([\"javascript\"]);\nclass ConcatenatedModule extends Module {\n  /**\n   * @param {Module} rootModule the root module of the concatenation\n   * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n   * @param {RuntimeSpec} runtime the runtime\n   * @param {Object=} associatedObjectForCache object for caching\n   * @param {string | HashConstructor=} hashFunction hash function to use\n   * @returns {ConcatenatedModule} the module\n   */\n  static create(rootModule, modules, runtime, associatedObjectForCache) {\n    let hashFunction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"md4\";\n    const identifier = ConcatenatedModule._createIdentifier(rootModule, modules, associatedObjectForCache, hashFunction);\n    return new ConcatenatedModule({\n      identifier,\n      rootModule,\n      modules,\n      runtime\n    });\n  }\n\n  /**\n   * @param {Object} options options\n   * @param {string} options.identifier the identifier of the module\n   * @param {Module=} options.rootModule the root module of the concatenation\n   * @param {RuntimeSpec} options.runtime the selected runtime\n   * @param {Set<Module>=} options.modules all concatenated modules\n   */\n  constructor(_ref3) {\n    let {\n      identifier,\n      rootModule,\n      modules,\n      runtime\n    } = _ref3;\n    super(JAVASCRIPT_MODULE_TYPE_ESM, null, rootModule && rootModule.layer);\n\n    // Info from Factory\n    /** @type {string} */\n    this._identifier = identifier;\n    /** @type {Module} */\n    this.rootModule = rootModule;\n    /** @type {Set<Module>} */\n    this._modules = modules;\n    this._runtime = runtime;\n    this.factoryMeta = rootModule && rootModule.factoryMeta;\n  }\n\n  /**\n   * Assuming this module is in the cache. Update the (cached) module with\n   * the fresh module from the factory. Usually updates internal references\n   * and properties.\n   * @param {Module} module fresh module\n   * @returns {void}\n   */\n  updateCacheModule(module) {\n    throw new Error(\"Must not be called\");\n  }\n\n  /**\n   * @returns {Set<string>} types available (do not mutate)\n   */\n  getSourceTypes() {\n    return TYPES;\n  }\n  get modules() {\n    return Array.from(this._modules);\n  }\n\n  /**\n   * @returns {string} a unique identifier of the module\n   */\n  identifier() {\n    return this._identifier;\n  }\n\n  /**\n   * @param {RequestShortener} requestShortener the request shortener\n   * @returns {string} a user readable identifier of the module\n   */\n  readableIdentifier(requestShortener) {\n    return this.rootModule.readableIdentifier(requestShortener) + ` + ${this._modules.size - 1} modules`;\n  }\n\n  /**\n   * @param {LibIdentOptions} options options\n   * @returns {string | null} an identifier for library inclusion\n   */\n  libIdent(options) {\n    return this.rootModule.libIdent(options);\n  }\n\n  /**\n   * @returns {string | null} absolute path which should be used for condition matching (usually the resource path)\n   */\n  nameForCondition() {\n    return this.rootModule.nameForCondition();\n  }\n\n  /**\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @returns {ConnectionState} how this module should be connected to referencing modules when consumed for side-effects only\n   */\n  getSideEffectsConnectionState(moduleGraph) {\n    return this.rootModule.getSideEffectsConnectionState(moduleGraph);\n  }\n\n  /**\n   * @param {WebpackOptions} options webpack options\n   * @param {Compilation} compilation the compilation\n   * @param {ResolverWithOptions} resolver the resolver\n   * @param {InputFileSystem} fs the file system\n   * @param {function(WebpackError=): void} callback callback function\n   * @returns {void}\n   */\n  build(options, compilation, resolver, fs, callback) {\n    const {\n      rootModule\n    } = this;\n    this.buildInfo = {\n      strict: true,\n      cacheable: true,\n      moduleArgument: rootModule.buildInfo.moduleArgument,\n      exportsArgument: rootModule.buildInfo.exportsArgument,\n      fileDependencies: new LazySet(),\n      contextDependencies: new LazySet(),\n      missingDependencies: new LazySet(),\n      topLevelDeclarations: new Set(),\n      assets: undefined\n    };\n    this.buildMeta = rootModule.buildMeta;\n    this.clearDependenciesAndBlocks();\n    this.clearWarningsAndErrors();\n    for (const m of this._modules) {\n      // populate cacheable\n      if (!m.buildInfo.cacheable) {\n        this.buildInfo.cacheable = false;\n      }\n\n      // populate dependencies\n      for (const d of m.dependencies.filter(dep => !(dep instanceof HarmonyImportDependency) || !this._modules.has(compilation.moduleGraph.getModule(dep)))) {\n        this.dependencies.push(d);\n      }\n      // populate blocks\n      for (const d of m.blocks) {\n        this.blocks.push(d);\n      }\n\n      // populate warnings\n      const warnings = m.getWarnings();\n      if (warnings !== undefined) {\n        for (const warning of warnings) {\n          this.addWarning(warning);\n        }\n      }\n\n      // populate errors\n      const errors = m.getErrors();\n      if (errors !== undefined) {\n        for (const error of errors) {\n          this.addError(error);\n        }\n      }\n\n      // populate topLevelDeclarations\n      if (m.buildInfo.topLevelDeclarations) {\n        const topLevelDeclarations = this.buildInfo.topLevelDeclarations;\n        if (topLevelDeclarations !== undefined) {\n          for (const decl of m.buildInfo.topLevelDeclarations) {\n            topLevelDeclarations.add(decl);\n          }\n        }\n      } else {\n        this.buildInfo.topLevelDeclarations = undefined;\n      }\n\n      // populate assets\n      if (m.buildInfo.assets) {\n        if (this.buildInfo.assets === undefined) {\n          this.buildInfo.assets = Object.create(null);\n        }\n        Object.assign(this.buildInfo.assets, m.buildInfo.assets);\n      }\n      if (m.buildInfo.assetsInfo) {\n        if (this.buildInfo.assetsInfo === undefined) {\n          this.buildInfo.assetsInfo = new Map();\n        }\n        for (const [key, value] of m.buildInfo.assetsInfo) {\n          this.buildInfo.assetsInfo.set(key, value);\n        }\n      }\n    }\n    callback();\n  }\n\n  /**\n   * @param {string=} type the source type for which the size should be estimated\n   * @returns {number} the estimated size of the module (must be non-zero)\n   */\n  size(type) {\n    // Guess size from embedded modules\n    let size = 0;\n    for (const module of this._modules) {\n      size += module.size(type);\n    }\n    return size;\n  }\n\n  /**\n   * @private\n   * @param {Module} rootModule the root of the concatenation\n   * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n   * @param {RuntimeSpec} runtime for this runtime\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @returns {ConcatenationEntry[]} concatenation list\n   */\n  _createConcatenationList(rootModule, modulesSet, runtime, moduleGraph) {\n    /** @type {ConcatenationEntry[]} */\n    const list = [];\n    /** @type {Map<Module, RuntimeSpec | true>} */\n    const existingEntries = new Map();\n\n    /**\n     * @param {Module} module a module\n     * @returns {Iterable<{ connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} imported modules in order\n     */\n    const getConcatenatedImports = module => {\n      let connections = Array.from(moduleGraph.getOutgoingConnections(module));\n      if (module === rootModule) {\n        for (const c of moduleGraph.getOutgoingConnections(this)) connections.push(c);\n      }\n      /**\n       * @type {Array<{ connection: ModuleGraphConnection, sourceOrder: number, rangeStart: number }>}\n       */\n      const references = connections.filter(connection => {\n        if (!(connection.dependency instanceof HarmonyImportDependency)) return false;\n        return connection && connection.resolvedOriginModule === module && connection.module && connection.isTargetActive(runtime);\n      }).map(connection => {\n        const dep = /** @type {HarmonyImportDependency} */\n        connection.dependency;\n        return {\n          connection,\n          sourceOrder: dep.sourceOrder,\n          rangeStart: dep.range && dep.range[0]\n        };\n      });\n      /**\n       * bySourceOrder\n       * @example\n       * import a from \"a\"; // sourceOrder=1\n       * import b from \"b\"; // sourceOrder=2\n       *\n       * byRangeStart\n       * @example\n       * import {a, b} from \"a\"; // sourceOrder=1\n       * a.a(); // first range\n       * b.b(); // second range\n       *\n       * If there is no reexport, we have the same source.\n       * If there is reexport, but module has side effects, this will lead to reexport module only.\n       * If there is side-effects-free reexport, we can get simple deterministic result with range start comparison.\n       */\n      references.sort(concatComparators(bySourceOrder, byRangeStart));\n      /** @type {Map<Module, { connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} */\n      const referencesMap = new Map();\n      for (const {\n        connection\n      } of references) {\n        const runtimeCondition = filterRuntime(runtime, r => connection.isTargetActive(r));\n        if (runtimeCondition === false) continue;\n        const module = connection.module;\n        const entry = referencesMap.get(module);\n        if (entry === undefined) {\n          referencesMap.set(module, {\n            connection,\n            runtimeCondition\n          });\n          continue;\n        }\n        entry.runtimeCondition = mergeRuntimeConditionNonFalse(entry.runtimeCondition, runtimeCondition, runtime);\n      }\n      return referencesMap.values();\n    };\n\n    /**\n     * @param {ModuleGraphConnection} connection graph connection\n     * @param {RuntimeSpec | true} runtimeCondition runtime condition\n     * @returns {void}\n     */\n    const enterModule = (connection, runtimeCondition) => {\n      const module = connection.module;\n      if (!module) return;\n      const existingEntry = existingEntries.get(module);\n      if (existingEntry === true) {\n        return;\n      }\n      if (modulesSet.has(module)) {\n        existingEntries.set(module, true);\n        if (runtimeCondition !== true) {\n          throw new Error(`Cannot runtime-conditional concatenate a module (${module.identifier()} in ${this.rootModule.identifier()}, ${runtimeConditionToString(runtimeCondition)}). This should not happen.`);\n        }\n        const imports = getConcatenatedImports(module);\n        for (const {\n          connection,\n          runtimeCondition\n        } of imports) enterModule(connection, runtimeCondition);\n        list.push({\n          type: \"concatenated\",\n          module: connection.module,\n          runtimeCondition\n        });\n      } else {\n        if (existingEntry !== undefined) {\n          const reducedRuntimeCondition = subtractRuntimeCondition(runtimeCondition, existingEntry, runtime);\n          if (reducedRuntimeCondition === false) return;\n          runtimeCondition = reducedRuntimeCondition;\n          existingEntries.set(connection.module, mergeRuntimeConditionNonFalse(existingEntry, runtimeCondition, runtime));\n        } else {\n          existingEntries.set(connection.module, runtimeCondition);\n        }\n        if (list.length > 0) {\n          const lastItem = list[list.length - 1];\n          if (lastItem.type === \"external\" && lastItem.module === connection.module) {\n            lastItem.runtimeCondition = mergeRuntimeCondition(lastItem.runtimeCondition, runtimeCondition, runtime);\n            return;\n          }\n        }\n        list.push({\n          type: \"external\",\n          get module() {\n            // We need to use a getter here, because the module in the dependency\n            // could be replaced by some other process (i. e. also replaced with a\n            // concatenated module)\n            return connection.module;\n          },\n          runtimeCondition\n        });\n      }\n    };\n    existingEntries.set(rootModule, true);\n    const imports = getConcatenatedImports(rootModule);\n    for (const {\n      connection,\n      runtimeCondition\n    } of imports) enterModule(connection, runtimeCondition);\n    list.push({\n      type: \"concatenated\",\n      module: rootModule,\n      runtimeCondition: true\n    });\n    return list;\n  }\n\n  /**\n   * @param {Module} rootModule the root module of the concatenation\n   * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n   * @param {Object=} associatedObjectForCache object for caching\n   * @param {string | HashConstructor=} hashFunction hash function to use\n   * @returns {string} the identifier\n   */\n  static _createIdentifier(rootModule, modules, associatedObjectForCache) {\n    let hashFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"md4\";\n    const cachedMakePathsRelative = makePathsRelative.bindContextCache(rootModule.context, associatedObjectForCache);\n    let identifiers = [];\n    for (const module of modules) {\n      identifiers.push(cachedMakePathsRelative(module.identifier()));\n    }\n    identifiers.sort();\n    const hash = createHash(hashFunction);\n    hash.update(identifiers.join(\" \"));\n    return rootModule.identifier() + \"|\" + hash.digest(\"hex\");\n  }\n\n  /**\n   * @param {LazySet<string>} fileDependencies set where file dependencies are added to\n   * @param {LazySet<string>} contextDependencies set where context dependencies are added to\n   * @param {LazySet<string>} missingDependencies set where missing dependencies are added to\n   * @param {LazySet<string>} buildDependencies set where build dependencies are added to\n   */\n  addCacheDependencies(fileDependencies, contextDependencies, missingDependencies, buildDependencies) {\n    for (const module of this._modules) {\n      module.addCacheDependencies(fileDependencies, contextDependencies, missingDependencies, buildDependencies);\n    }\n  }\n\n  /**\n   * @param {CodeGenerationContext} context context for code generation\n   * @returns {CodeGenerationResult} result\n   */\n  codeGeneration(_ref4) {\n    let {\n      dependencyTemplates,\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      runtime: generationRuntime,\n      codeGenerationResults\n    } = _ref4;\n    /** @type {Set<string>} */\n    const runtimeRequirements = new Set();\n    const runtime = intersectRuntime(generationRuntime, this._runtime);\n    const requestShortener = runtimeTemplate.requestShortener;\n    // Meta info for each module\n    const [modulesWithInfo, moduleToInfoMap] = this._getModulesWithInfo(moduleGraph, runtime);\n\n    // Set with modules that need a generated namespace object\n    /** @type {Set<ConcatenatedModuleInfo>} */\n    const neededNamespaceObjects = new Set();\n\n    // Generate source code and analyse scopes\n    // Prepare a ReplaceSource for the final source\n    for (const info of moduleToInfoMap.values()) {\n      this._analyseModule(moduleToInfoMap, info, dependencyTemplates, runtimeTemplate, moduleGraph, chunkGraph, runtime, codeGenerationResults);\n    }\n\n    // List of all used names to avoid conflicts\n    const allUsedNames = new Set(RESERVED_NAMES);\n    // Updated Top level declarations are created by renaming\n    const topLevelDeclarations = new Set();\n\n    // List of additional names in scope for module references\n    /** @type {Map<string, { usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }>} */\n    const usedNamesInScopeInfo = new Map();\n    /**\n     * @param {string} module module identifier\n     * @param {string} id export id\n     * @returns {{ usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }} info\n     */\n    const getUsedNamesInScopeInfo = (module, id) => {\n      const key = `${module}-${id}`;\n      let info = usedNamesInScopeInfo.get(key);\n      if (info === undefined) {\n        info = {\n          usedNames: new Set(),\n          alreadyCheckedScopes: new Set()\n        };\n        usedNamesInScopeInfo.set(key, info);\n      }\n      return info;\n    };\n\n    // Set of already checked scopes\n    const ignoredScopes = new Set();\n\n    // get all global names\n    for (const info of modulesWithInfo) {\n      if (info.type === \"concatenated\") {\n        // ignore symbols from moduleScope\n        if (info.moduleScope) {\n          ignoredScopes.add(info.moduleScope);\n        }\n\n        // The super class expression in class scopes behaves weird\n        // We get ranges of all super class expressions to make\n        // renaming to work correctly\n        const superClassCache = new WeakMap();\n        const getSuperClassExpressions = scope => {\n          const cacheEntry = superClassCache.get(scope);\n          if (cacheEntry !== undefined) return cacheEntry;\n          const superClassExpressions = [];\n          for (const childScope of scope.childScopes) {\n            if (childScope.type !== \"class\") continue;\n            const block = childScope.block;\n            if ((block.type === \"ClassDeclaration\" || block.type === \"ClassExpression\") && block.superClass) {\n              superClassExpressions.push({\n                range: block.superClass.range,\n                variables: childScope.variables\n              });\n            }\n          }\n          superClassCache.set(scope, superClassExpressions);\n          return superClassExpressions;\n        };\n\n        // add global symbols\n        if (info.globalScope) {\n          for (const reference of info.globalScope.through) {\n            const name = reference.identifier.name;\n            if (ConcatenationScope.isModuleReference(name)) {\n              const match = ConcatenationScope.matchModuleReference(name);\n              if (!match) continue;\n              const referencedInfo = modulesWithInfo[match.index];\n              if (referencedInfo.type === \"reference\") throw new Error(\"Module reference can't point to a reference\");\n              const binding = getFinalBinding(moduleGraph, referencedInfo, match.ids, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, info.module.buildMeta.strictHarmonyModule, true);\n              if (!binding.ids) continue;\n              const {\n                usedNames,\n                alreadyCheckedScopes\n              } = getUsedNamesInScopeInfo(binding.info.module.identifier(), \"name\" in binding ? binding.name : \"\");\n              for (const expr of getSuperClassExpressions(reference.from)) {\n                if (expr.range[0] <= reference.identifier.range[0] && expr.range[1] >= reference.identifier.range[1]) {\n                  for (const variable of expr.variables) {\n                    usedNames.add(variable.name);\n                  }\n                }\n              }\n              addScopeSymbols(reference.from, usedNames, alreadyCheckedScopes, ignoredScopes);\n            } else {\n              allUsedNames.add(name);\n            }\n          }\n        }\n      }\n    }\n\n    // generate names for symbols\n    for (const info of moduleToInfoMap.values()) {\n      const {\n        usedNames: namespaceObjectUsedNames\n      } = getUsedNamesInScopeInfo(info.module.identifier(), \"\");\n      switch (info.type) {\n        case \"concatenated\":\n          {\n            for (const variable of info.moduleScope.variables) {\n              const name = variable.name;\n              const {\n                usedNames,\n                alreadyCheckedScopes\n              } = getUsedNamesInScopeInfo(info.module.identifier(), name);\n              if (allUsedNames.has(name) || usedNames.has(name)) {\n                const references = getAllReferences(variable);\n                for (const ref of references) {\n                  addScopeSymbols(ref.from, usedNames, alreadyCheckedScopes, ignoredScopes);\n                }\n                const newName = this.findNewName(name, allUsedNames, usedNames, info.module.readableIdentifier(requestShortener));\n                allUsedNames.add(newName);\n                info.internalNames.set(name, newName);\n                topLevelDeclarations.add(newName);\n                const source = info.source;\n                const allIdentifiers = new Set(references.map(r => r.identifier).concat(variable.identifiers));\n                for (const identifier of allIdentifiers) {\n                  const r = identifier.range;\n                  const path = getPathInAst(info.ast, identifier);\n                  if (path && path.length > 1) {\n                    const maybeProperty = path[1].type === \"AssignmentPattern\" && path[1].left === path[0] ? path[2] : path[1];\n                    if (maybeProperty.type === \"Property\" && maybeProperty.shorthand) {\n                      source.insert(r[1], `: ${newName}`);\n                      continue;\n                    }\n                  }\n                  source.replace(r[0], r[1] - 1, newName);\n                }\n              } else {\n                allUsedNames.add(name);\n                info.internalNames.set(name, name);\n                topLevelDeclarations.add(name);\n              }\n            }\n            let namespaceObjectName;\n            if (info.namespaceExportSymbol) {\n              namespaceObjectName = info.internalNames.get(info.namespaceExportSymbol);\n            } else {\n              namespaceObjectName = this.findNewName(\"namespaceObject\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n              allUsedNames.add(namespaceObjectName);\n            }\n            info.namespaceObjectName = namespaceObjectName;\n            topLevelDeclarations.add(namespaceObjectName);\n            break;\n          }\n        case \"external\":\n          {\n            const externalName = this.findNewName(\"\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n            allUsedNames.add(externalName);\n            info.name = externalName;\n            topLevelDeclarations.add(externalName);\n            break;\n          }\n      }\n      if (info.module.buildMeta.exportsType !== \"namespace\") {\n        const externalNameInterop = this.findNewName(\"namespaceObject\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n        allUsedNames.add(externalNameInterop);\n        info.interopNamespaceObjectName = externalNameInterop;\n        topLevelDeclarations.add(externalNameInterop);\n      }\n      if (info.module.buildMeta.exportsType === \"default\" && info.module.buildMeta.defaultObject !== \"redirect\") {\n        const externalNameInterop = this.findNewName(\"namespaceObject2\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n        allUsedNames.add(externalNameInterop);\n        info.interopNamespaceObject2Name = externalNameInterop;\n        topLevelDeclarations.add(externalNameInterop);\n      }\n      if (info.module.buildMeta.exportsType === \"dynamic\" || !info.module.buildMeta.exportsType) {\n        const externalNameInterop = this.findNewName(\"default\", allUsedNames, namespaceObjectUsedNames, info.module.readableIdentifier(requestShortener));\n        allUsedNames.add(externalNameInterop);\n        info.interopDefaultAccessName = externalNameInterop;\n        topLevelDeclarations.add(externalNameInterop);\n      }\n    }\n\n    // Find and replace references to modules\n    for (const info of moduleToInfoMap.values()) {\n      if (info.type === \"concatenated\") {\n        for (const reference of info.globalScope.through) {\n          const name = reference.identifier.name;\n          const match = ConcatenationScope.matchModuleReference(name);\n          if (match) {\n            const referencedInfo = modulesWithInfo[match.index];\n            if (referencedInfo.type === \"reference\") throw new Error(\"Module reference can't point to a reference\");\n            const finalName = getFinalName(moduleGraph, referencedInfo, match.ids, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, match.call, !match.directImport, info.module.buildMeta.strictHarmonyModule, match.asiSafe);\n            const r = reference.identifier.range;\n            const source = info.source;\n            // range is extended by 2 chars to cover the appended \"._\"\n            source.replace(r[0], r[1] + 1, finalName);\n          }\n        }\n      }\n    }\n\n    // Map with all root exposed used exports\n    /** @type {Map<string, function(RequestShortener): string>} */\n    const exportsMap = new Map();\n\n    // Set with all root exposed unused exports\n    /** @type {Set<string>} */\n    const unusedExports = new Set();\n    const rootInfo = /** @type {ConcatenatedModuleInfo} */\n    moduleToInfoMap.get(this.rootModule);\n    const strictHarmonyModule = rootInfo.module.buildMeta.strictHarmonyModule;\n    const exportsInfo = moduleGraph.getExportsInfo(rootInfo.module);\n    for (const exportInfo of exportsInfo.orderedExports) {\n      const name = exportInfo.name;\n      if (exportInfo.provided === false) continue;\n      const used = exportInfo.getUsedName(undefined, runtime);\n      if (!used) {\n        unusedExports.add(name);\n        continue;\n      }\n      exportsMap.set(used, requestShortener => {\n        try {\n          const finalName = getFinalName(moduleGraph, rootInfo, [name], moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, false, strictHarmonyModule, true);\n          return `/* ${exportInfo.isReexport() ? \"reexport\" : \"binding\"} */ ${finalName}`;\n        } catch (e) {\n          e.message += `\\nwhile generating the root export '${name}' (used name: '${used}')`;\n          throw e;\n        }\n      });\n    }\n    const result = new ConcatSource();\n\n    // add harmony compatibility flag (must be first because of possible circular dependencies)\n    if (moduleGraph.getExportsInfo(this).otherExportsInfo.getUsed(runtime) !== UsageState.Unused) {\n      result.add(`// ESM COMPAT FLAG\\n`);\n      result.add(runtimeTemplate.defineEsModuleFlagStatement({\n        exportsArgument: this.exportsArgument,\n        runtimeRequirements\n      }));\n    }\n\n    // define exports\n    if (exportsMap.size > 0) {\n      runtimeRequirements.add(RuntimeGlobals.exports);\n      runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n      const definitions = [];\n      for (const [key, value] of exportsMap) {\n        definitions.push(`\\n  ${propertyName(key)}: ${runtimeTemplate.returningFunction(value(requestShortener))}`);\n      }\n      result.add(`\\n// EXPORTS\\n`);\n      result.add(`${RuntimeGlobals.definePropertyGetters}(${this.exportsArgument}, {${definitions.join(\",\")}\\n});\\n`);\n    }\n\n    // list unused exports\n    if (unusedExports.size > 0) {\n      result.add(`\\n// UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)}\\n`);\n    }\n\n    // generate namespace objects\n    const namespaceObjectSources = new Map();\n    for (const info of neededNamespaceObjects) {\n      if (info.namespaceExportSymbol) continue;\n      const nsObj = [];\n      const exportsInfo = moduleGraph.getExportsInfo(info.module);\n      for (const exportInfo of exportsInfo.orderedExports) {\n        if (exportInfo.provided === false) continue;\n        const usedName = exportInfo.getUsedName(undefined, runtime);\n        if (usedName) {\n          const finalName = getFinalName(moduleGraph, info, [exportInfo.name], moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, undefined, info.module.buildMeta.strictHarmonyModule, true);\n          nsObj.push(`\\n  ${propertyName(usedName)}: ${runtimeTemplate.returningFunction(finalName)}`);\n        }\n      }\n      const name = info.namespaceObjectName;\n      const defineGetters = nsObj.length > 0 ? `${RuntimeGlobals.definePropertyGetters}(${name}, {${nsObj.join(\",\")}\\n});\\n` : \"\";\n      if (nsObj.length > 0) runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n      namespaceObjectSources.set(info, `\n// NAMESPACE OBJECT: ${info.module.readableIdentifier(requestShortener)}\nvar ${name} = {};\n${RuntimeGlobals.makeNamespaceObject}(${name});\n${defineGetters}`);\n      runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n    }\n\n    // define required namespace objects (must be before evaluation modules)\n    for (const info of modulesWithInfo) {\n      if (info.type === \"concatenated\") {\n        const source = namespaceObjectSources.get(info);\n        if (!source) continue;\n        result.add(source);\n      }\n    }\n    const chunkInitFragments = [];\n\n    // evaluate modules in order\n    for (const rawInfo of modulesWithInfo) {\n      let name;\n      let isConditional = false;\n      const info = rawInfo.type === \"reference\" ? rawInfo.target : rawInfo;\n      switch (info.type) {\n        case \"concatenated\":\n          {\n            result.add(`\\n;// CONCATENATED MODULE: ${info.module.readableIdentifier(requestShortener)}\\n`);\n            result.add(info.source);\n            if (info.chunkInitFragments) {\n              for (const f of info.chunkInitFragments) chunkInitFragments.push(f);\n            }\n            if (info.runtimeRequirements) {\n              for (const r of info.runtimeRequirements) {\n                runtimeRequirements.add(r);\n              }\n            }\n            name = info.namespaceObjectName;\n            break;\n          }\n        case \"external\":\n          {\n            result.add(`\\n// EXTERNAL MODULE: ${info.module.readableIdentifier(requestShortener)}\\n`);\n            runtimeRequirements.add(RuntimeGlobals.require);\n            const {\n              runtimeCondition\n            } = /** @type {ExternalModuleInfo | ReferenceToModuleInfo} */rawInfo;\n            const condition = runtimeTemplate.runtimeConditionExpression({\n              chunkGraph,\n              runtimeCondition,\n              runtime,\n              runtimeRequirements\n            });\n            if (condition !== \"true\") {\n              isConditional = true;\n              result.add(`if (${condition}) {\\n`);\n            }\n            result.add(`var ${info.name} = ${RuntimeGlobals.require}(${JSON.stringify(chunkGraph.getModuleId(info.module))});`);\n            name = info.name;\n            break;\n          }\n        default:\n          // @ts-expect-error never is expected here\n          throw new Error(`Unsupported concatenation entry type ${info.type}`);\n      }\n      if (info.interopNamespaceObjectUsed) {\n        runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n        result.add(`\\nvar ${info.interopNamespaceObjectName} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name}, 2);`);\n      }\n      if (info.interopNamespaceObject2Used) {\n        runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n        result.add(`\\nvar ${info.interopNamespaceObject2Name} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name});`);\n      }\n      if (info.interopDefaultAccessUsed) {\n        runtimeRequirements.add(RuntimeGlobals.compatGetDefaultExport);\n        result.add(`\\nvar ${info.interopDefaultAccessName} = /*#__PURE__*/${RuntimeGlobals.compatGetDefaultExport}(${name});`);\n      }\n      if (isConditional) {\n        result.add(\"\\n}\");\n      }\n    }\n    const data = new Map();\n    if (chunkInitFragments.length > 0) data.set(\"chunkInitFragments\", chunkInitFragments);\n    data.set(\"topLevelDeclarations\", topLevelDeclarations);\n\n    /** @type {CodeGenerationResult} */\n    const resultEntry = {\n      sources: new Map([[\"javascript\", new CachedSource(result)]]),\n      data,\n      runtimeRequirements\n    };\n    return resultEntry;\n  }\n\n  /**\n   * @param {Map<Module, ModuleInfo>} modulesMap modulesMap\n   * @param {ModuleInfo} info info\n   * @param {DependencyTemplates} dependencyTemplates dependencyTemplates\n   * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate\n   * @param {ModuleGraph} moduleGraph moduleGraph\n   * @param {ChunkGraph} chunkGraph chunkGraph\n   * @param {RuntimeSpec} runtime runtime\n   * @param {CodeGenerationResults} codeGenerationResults codeGenerationResults\n   */\n  _analyseModule(modulesMap, info, dependencyTemplates, runtimeTemplate, moduleGraph, chunkGraph, runtime, codeGenerationResults) {\n    if (info.type === \"concatenated\") {\n      const m = info.module;\n      try {\n        // Create a concatenation scope to track and capture information\n        const concatenationScope = new ConcatenationScope(modulesMap, info);\n\n        // TODO cache codeGeneration results\n        const codeGenResult = m.codeGeneration({\n          dependencyTemplates,\n          runtimeTemplate,\n          moduleGraph,\n          chunkGraph,\n          runtime,\n          concatenationScope,\n          codeGenerationResults,\n          sourceTypes: TYPES\n        });\n        const source = codeGenResult.sources.get(\"javascript\");\n        const data = codeGenResult.data;\n        const chunkInitFragments = data && data.get(\"chunkInitFragments\");\n        const code = source.source().toString();\n        let ast;\n        try {\n          ast = JavascriptParser._parse(code, {\n            sourceType: \"module\"\n          });\n        } catch (err) {\n          if (err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n            const lineNumber = err.loc.line;\n            const lines = code.split(\"\\n\");\n            err.message += \"\\n| \" + lines.slice(Math.max(0, lineNumber - 3), lineNumber + 2).join(\"\\n| \");\n          }\n          throw err;\n        }\n        const scopeManager = eslintScope.analyze(ast, {\n          ecmaVersion: 6,\n          sourceType: \"module\",\n          optimistic: true,\n          ignoreEval: true,\n          impliedStrict: true\n        });\n        const globalScope = scopeManager.acquire(ast);\n        const moduleScope = globalScope.childScopes[0];\n        const resultSource = new ReplaceSource(source);\n        info.runtimeRequirements = codeGenResult.runtimeRequirements;\n        info.ast = ast;\n        info.internalSource = source;\n        info.source = resultSource;\n        info.chunkInitFragments = chunkInitFragments;\n        info.globalScope = globalScope;\n        info.moduleScope = moduleScope;\n      } catch (err) {\n        err.message += `\\nwhile analyzing module ${m.identifier()} for concatenation`;\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @param {RuntimeSpec} runtime the runtime\n   * @returns {[ModuleInfoOrReference[], Map<Module, ModuleInfo>]} module info items\n   */\n  _getModulesWithInfo(moduleGraph, runtime) {\n    const orderedConcatenationList = this._createConcatenationList(this.rootModule, this._modules, runtime, moduleGraph);\n    /** @type {Map<Module, ModuleInfo>} */\n    const map = new Map();\n    const list = orderedConcatenationList.map((info, index) => {\n      let item = map.get(info.module);\n      if (item === undefined) {\n        switch (info.type) {\n          case \"concatenated\":\n            item = {\n              type: \"concatenated\",\n              module: info.module,\n              index,\n              ast: undefined,\n              internalSource: undefined,\n              runtimeRequirements: undefined,\n              source: undefined,\n              globalScope: undefined,\n              moduleScope: undefined,\n              internalNames: new Map(),\n              exportMap: undefined,\n              rawExportMap: undefined,\n              namespaceExportSymbol: undefined,\n              namespaceObjectName: undefined,\n              interopNamespaceObjectUsed: false,\n              interopNamespaceObjectName: undefined,\n              interopNamespaceObject2Used: false,\n              interopNamespaceObject2Name: undefined,\n              interopDefaultAccessUsed: false,\n              interopDefaultAccessName: undefined\n            };\n            break;\n          case \"external\":\n            item = {\n              type: \"external\",\n              module: info.module,\n              runtimeCondition: info.runtimeCondition,\n              index,\n              name: undefined,\n              interopNamespaceObjectUsed: false,\n              interopNamespaceObjectName: undefined,\n              interopNamespaceObject2Used: false,\n              interopNamespaceObject2Name: undefined,\n              interopDefaultAccessUsed: false,\n              interopDefaultAccessName: undefined\n            };\n            break;\n          default:\n            throw new Error(`Unsupported concatenation entry type ${info.type}`);\n        }\n        map.set(item.module, item);\n        return item;\n      } else {\n        /** @type {ReferenceToModuleInfo} */\n        const ref = {\n          type: \"reference\",\n          runtimeCondition: info.runtimeCondition,\n          target: item\n        };\n        return ref;\n      }\n    });\n    return [list, map];\n  }\n  findNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n    let name = oldName;\n    if (name === ConcatenationScope.DEFAULT_EXPORT) {\n      name = \"\";\n    }\n    if (name === ConcatenationScope.NAMESPACE_OBJECT_EXPORT) {\n      name = \"namespaceObject\";\n    }\n\n    // Remove uncool stuff\n    extraInfo = extraInfo.replace(/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g, \"\");\n    const splittedInfo = extraInfo.split(\"/\");\n    while (splittedInfo.length) {\n      name = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n      const nameIdent = Template.toIdentifier(name);\n      if (!usedNamed1.has(nameIdent) && (!usedNamed2 || !usedNamed2.has(nameIdent))) return nameIdent;\n    }\n    let i = 0;\n    let nameWithNumber = Template.toIdentifier(`${name}_${i}`);\n    while (usedNamed1.has(nameWithNumber) || usedNamed2 && usedNamed2.has(nameWithNumber)) {\n      i++;\n      nameWithNumber = Template.toIdentifier(`${name}_${i}`);\n    }\n    return nameWithNumber;\n  }\n\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n  updateHash(hash, context) {\n    const {\n      chunkGraph,\n      runtime\n    } = context;\n    for (const info of this._createConcatenationList(this.rootModule, this._modules, intersectRuntime(runtime, this._runtime), chunkGraph.moduleGraph)) {\n      switch (info.type) {\n        case \"concatenated\":\n          info.module.updateHash(hash, context);\n          break;\n        case \"external\":\n          hash.update(`${chunkGraph.getModuleId(info.module)}`);\n          // TODO runtimeCondition\n          break;\n      }\n    }\n    super.updateHash(hash, context);\n  }\n  static deserialize(context) {\n    const obj = new ConcatenatedModule({\n      identifier: undefined,\n      rootModule: undefined,\n      modules: undefined,\n      runtime: undefined\n    });\n    obj.deserialize(context);\n    return obj;\n  }\n}\nmakeSerializable(ConcatenatedModule, \"webpack/lib/optimize/ConcatenatedModule\");\nmodule.exports = ConcatenatedModule;","map":{"version":3,"names":["eslintScope","require","Referencer","CachedSource","ConcatSource","ReplaceSource","ConcatenationScope","UsageState","Module","JAVASCRIPT_MODULE_TYPE_ESM","RuntimeGlobals","Template","HarmonyImportDependency","JavascriptParser","equals","LazySet","concatComparators","createHash","makePathsRelative","makeSerializable","propertyAccess","propertyName","filterRuntime","intersectRuntime","mergeRuntimeCondition","mergeRuntimeConditionNonFalse","runtimeConditionToString","subtractRuntimeCondition","ReferencerClass","prototype","PropertyDefinition","Property","RESERVED_NAMES","Set","DEFAULT_EXPORT","NAMESPACE_OBJECT_EXPORT","join","split","createComparator","property","comparator","a","b","compareNumbers","isNaN","bySourceOrder","byRangeStart","joinIterableWithComma","iterable","str","first","item","getFinalBinding","moduleGraph","info","exportName","moduleToInfoMap","runtime","requestShortener","runtimeTemplate","neededNamespaceObjects","asCall","strictHarmonyModule","asiSafe","alreadyVisited","arguments","length","undefined","exportsType","module","getExportsType","interopNamespaceObject2Used","rawName","interopNamespaceObject2Name","ids","interopNamespaceObjectUsed","interopNamespaceObjectName","Error","slice","exportId","interopDefaultAccessUsed","defaultExport","interopDefaultAccessName","type","add","namespaceObjectName","name","exportsInfo","getExportsInfo","exportInfo","getExportInfo","has","provided","directExport","exportMap","get","usedName","getUsedName","rawExport","rawExportMap","reexport","findTarget","readableIdentifier","Array","from","_ref","m","refInfo","export","buildMeta","namespaceExportSymbol","used","comment","toNormalComment","getFinalName","callContext","binding","reference","isPropertyAccess","internalNames","_ref2","symbol","addScopeSymbols","s","nameSet","scopeSet1","scopeSet2","scope","variable","variables","upper","getAllReferences","set","references","identifiers","childScopes","innerVar","some","id","concat","getPathInAst","ast","node","nr","range","enterNode","n","r","path","push","isArray","i","enterResult","keys","Object","value","pathResult","TYPES","ConcatenatedModule","create","rootModule","modules","associatedObjectForCache","hashFunction","identifier","_createIdentifier","constructor","_ref3","layer","_identifier","_modules","_runtime","factoryMeta","updateCacheModule","getSourceTypes","size","libIdent","options","nameForCondition","getSideEffectsConnectionState","build","compilation","resolver","fs","callback","buildInfo","strict","cacheable","moduleArgument","exportsArgument","fileDependencies","contextDependencies","missingDependencies","topLevelDeclarations","assets","clearDependenciesAndBlocks","clearWarningsAndErrors","d","dependencies","filter","dep","getModule","blocks","warnings","getWarnings","warning","addWarning","errors","getErrors","error","addError","decl","assign","assetsInfo","Map","key","_createConcatenationList","modulesSet","list","existingEntries","getConcatenatedImports","connections","getOutgoingConnections","c","connection","dependency","resolvedOriginModule","isTargetActive","map","sourceOrder","rangeStart","sort","referencesMap","runtimeCondition","entry","values","enterModule","existingEntry","imports","reducedRuntimeCondition","lastItem","cachedMakePathsRelative","bindContextCache","context","hash","update","digest","addCacheDependencies","buildDependencies","codeGeneration","_ref4","dependencyTemplates","chunkGraph","generationRuntime","codeGenerationResults","runtimeRequirements","modulesWithInfo","_getModulesWithInfo","_analyseModule","allUsedNames","usedNamesInScopeInfo","getUsedNamesInScopeInfo","usedNames","alreadyCheckedScopes","ignoredScopes","moduleScope","superClassCache","WeakMap","getSuperClassExpressions","cacheEntry","superClassExpressions","childScope","block","superClass","globalScope","through","isModuleReference","match","matchModuleReference","referencedInfo","index","expr","namespaceObjectUsedNames","ref","newName","findNewName","source","allIdentifiers","maybeProperty","left","shorthand","insert","replace","externalName","externalNameInterop","defaultObject","finalName","call","directImport","exportsMap","unusedExports","rootInfo","orderedExports","isReexport","e","message","result","otherExportsInfo","getUsed","Unused","defineEsModuleFlagStatement","exports","definePropertyGetters","definitions","returningFunction","namespaceObjectSources","nsObj","defineGetters","makeNamespaceObject","chunkInitFragments","rawInfo","isConditional","target","f","condition","runtimeConditionExpression","JSON","stringify","getModuleId","createFakeNamespaceObject","compatGetDefaultExport","data","resultEntry","sources","modulesMap","concatenationScope","codeGenResult","sourceTypes","code","toString","_parse","sourceType","err","loc","line","lineNumber","lines","Math","max","scopeManager","analyze","ecmaVersion","optimistic","ignoreEval","impliedStrict","acquire","resultSource","internalSource","orderedConcatenationList","oldName","usedNamed1","usedNamed2","extraInfo","splittedInfo","pop","nameIdent","toIdentifier","nameWithNumber","updateHash","deserialize","obj"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/optimize/ConcatenatedModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst eslintScope = require(\"eslint-scope\");\nconst Referencer = require(\"eslint-scope/lib/referencer\");\nconst {\n\tCachedSource,\n\tConcatSource,\n\tReplaceSource\n} = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst { UsageState } = require(\"../ExportsInfo\");\nconst Module = require(\"../Module\");\nconst { JAVASCRIPT_MODULE_TYPE_ESM } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst JavascriptParser = require(\"../javascript/JavascriptParser\");\nconst { equals } = require(\"../util/ArrayHelpers\");\nconst LazySet = require(\"../util/LazySet\");\nconst { concatComparators } = require(\"../util/comparators\");\nconst createHash = require(\"../util/createHash\");\nconst { makePathsRelative } = require(\"../util/identifier\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst propertyAccess = require(\"../util/propertyAccess\");\nconst { propertyName } = require(\"../util/propertyName\");\nconst {\n\tfilterRuntime,\n\tintersectRuntime,\n\tmergeRuntimeCondition,\n\tmergeRuntimeConditionNonFalse,\n\truntimeConditionToString,\n\tsubtractRuntimeCondition\n} = require(\"../util/runtime\");\n\n/** @typedef {import(\"eslint-scope\").Scope} Scope */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../ExportsInfo\").ExportInfo} ExportInfo */\n/** @template T @typedef {import(\"../InitFragment\")<T>} InitFragment */\n/** @typedef {import(\"../Module\").CodeGenerationContext} CodeGenerationContext */\n/** @typedef {import(\"../Module\").CodeGenerationResult} CodeGenerationResult */\n/** @typedef {import(\"../Module\").LibIdentOptions} LibIdentOptions */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {typeof import(\"../util/Hash\")} HashConstructor */\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n// fix eslint-scope to support class properties correctly\n// cspell:word Referencer\nconst ReferencerClass = Referencer;\nif (!ReferencerClass.prototype.PropertyDefinition) {\n\tReferencerClass.prototype.PropertyDefinition =\n\t\tReferencerClass.prototype.Property;\n}\n\n/**\n * @typedef {Object} ReexportInfo\n * @property {Module} module\n * @property {string[]} export\n */\n\n/** @typedef {RawBinding | SymbolBinding} Binding */\n\n/**\n * @typedef {Object} RawBinding\n * @property {ModuleInfo} info\n * @property {string} rawName\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/**\n * @typedef {Object} SymbolBinding\n * @property {ConcatenatedModuleInfo} info\n * @property {string} name\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo } ModuleInfo */\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo | ReferenceToModuleInfo } ModuleInfoOrReference */\n\n/**\n * @typedef {Object} ConcatenatedModuleInfo\n * @property {\"concatenated\"} type\n * @property {Module} module\n * @property {number} index\n * @property {Object} ast\n * @property {Source} internalSource\n * @property {ReplaceSource} source\n * @property {InitFragment<ChunkRenderContext>[]=} chunkInitFragments\n * @property {Iterable<string>} runtimeRequirements\n * @property {Scope} globalScope\n * @property {Scope} moduleScope\n * @property {Map<string, string>} internalNames\n * @property {Map<string, string>} exportMap\n * @property {Map<string, string>} rawExportMap\n * @property {string=} namespaceExportSymbol\n * @property {string} namespaceObjectName\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ExternalModuleInfo\n * @property {\"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {number} index\n * @property {string} name\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ReferenceToModuleInfo\n * @property {\"reference\"} type\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {ConcatenatedModuleInfo | ExternalModuleInfo} target\n */\n\nconst RESERVED_NAMES = new Set(\n\t[\n\t\t// internal names (should always be renamed)\n\t\tConcatenationScope.DEFAULT_EXPORT,\n\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT,\n\n\t\t// keywords\n\t\t\"abstract,arguments,async,await,boolean,break,byte,case,catch,char,class,const,continue\",\n\t\t\"debugger,default,delete,do,double,else,enum,eval,export,extends,false,final,finally,float\",\n\t\t\"for,function,goto,if,implements,import,in,instanceof,int,interface,let,long,native,new,null\",\n\t\t\"package,private,protected,public,return,short,static,super,switch,synchronized,this,throw\",\n\t\t\"throws,transient,true,try,typeof,var,void,volatile,while,with,yield\",\n\n\t\t// commonjs/amd\n\t\t\"module,__dirname,__filename,exports,require,define\",\n\n\t\t// js globals\n\t\t\"Array,Date,eval,function,hasOwnProperty,Infinity,isFinite,isNaN,isPrototypeOf,length,Math\",\n\t\t\"NaN,name,Number,Object,prototype,String,toString,undefined,valueOf\",\n\n\t\t// browser globals\n\t\t\"alert,all,anchor,anchors,area,assign,blur,button,checkbox,clearInterval,clearTimeout\",\n\t\t\"clientInformation,close,closed,confirm,constructor,crypto,decodeURI,decodeURIComponent\",\n\t\t\"defaultStatus,document,element,elements,embed,embeds,encodeURI,encodeURIComponent,escape\",\n\t\t\"event,fileUpload,focus,form,forms,frame,innerHeight,innerWidth,layer,layers,link,location\",\n\t\t\"mimeTypes,navigate,navigator,frames,frameRate,hidden,history,image,images,offscreenBuffering\",\n\t\t\"open,opener,option,outerHeight,outerWidth,packages,pageXOffset,pageYOffset,parent,parseFloat\",\n\t\t\"parseInt,password,pkcs11,plugin,prompt,propertyIsEnum,radio,reset,screenX,screenY,scroll\",\n\t\t\"secure,select,self,setInterval,setTimeout,status,submit,taint,text,textarea,top,unescape\",\n\t\t\"untaint,window\",\n\n\t\t// window events\n\t\t\"onblur,onclick,onerror,onfocus,onkeydown,onkeypress,onkeyup,onmouseover,onload,onmouseup,onmousedown,onsubmit\"\n\t]\n\t\t.join(\",\")\n\t\t.split(\",\")\n);\n\nconst createComparator = (property, comparator) => (a, b) =>\n\tcomparator(a[property], b[property]);\nconst compareNumbers = (a, b) => {\n\tif (isNaN(a)) {\n\t\tif (!isNaN(b)) {\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (isNaN(b)) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a !== b) {\n\t\t\treturn a < b ? -1 : 1;\n\t\t}\n\t}\n\treturn 0;\n};\nconst bySourceOrder = createComparator(\"sourceOrder\", compareNumbers);\nconst byRangeStart = createComparator(\"rangeStart\", compareNumbers);\n\nconst joinIterableWithComma = iterable => {\n\t// This is more performant than Array.from().join(\", \")\n\t// as it doesn't create an array\n\tlet str = \"\";\n\tlet first = true;\n\tfor (const item of iterable) {\n\t\tif (first) {\n\t\t\tfirst = false;\n\t\t} else {\n\t\t\tstr += \", \";\n\t\t}\n\t\tstr += item;\n\t}\n\treturn str;\n};\n\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n */\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @param {Set<ExportInfo>} alreadyVisited alreadyVisited\n * @returns {Binding} the final variable\n */\nconst getFinalBinding = (\n\tmoduleGraph,\n\tinfo,\n\texportName,\n\tmoduleToInfoMap,\n\truntime,\n\trequestShortener,\n\truntimeTemplate,\n\tneededNamespaceObjects,\n\tasCall,\n\tstrictHarmonyModule,\n\tasiSafe,\n\talreadyVisited = new Set()\n) => {\n\tconst exportsType = info.module.getExportsType(\n\t\tmoduleGraph,\n\t\tstrictHarmonyModule\n\t);\n\tif (exportName.length === 0) {\n\t\tswitch (exportsType) {\n\t\t\tcase \"default-only\":\n\t\t\t\tinfo.interopNamespaceObject2Used = true;\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.interopNamespaceObject2Name,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"default-with-named\":\n\t\t\t\tinfo.interopNamespaceObjectUsed = true;\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.interopNamespaceObjectName,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"namespace\":\n\t\t\tcase \"dynamic\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected exportsType ${exportsType}`);\n\t\t}\n\t} else {\n\t\tswitch (exportsType) {\n\t\t\tcase \"namespace\":\n\t\t\t\tbreak;\n\t\t\tcase \"default-with-named\":\n\t\t\t\tswitch (exportName[0]) {\n\t\t\t\t\tcase \"default\":\n\t\t\t\t\t\texportName = exportName.slice(1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"__esModule\":\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"default-only\": {\n\t\t\t\tconst exportId = exportName[0];\n\t\t\t\tif (exportId === \"__esModule\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\texportName = exportName.slice(1);\n\t\t\t\tif (exportId !== \"default\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName:\n\t\t\t\t\t\t\t\"/* non-default import from default-exporting module */undefined\",\n\t\t\t\t\t\tids: exportName,\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dynamic\":\n\t\t\t\tswitch (exportName[0]) {\n\t\t\t\t\tcase \"default\": {\n\t\t\t\t\t\texportName = exportName.slice(1);\n\t\t\t\t\t\tinfo.interopDefaultAccessUsed = true;\n\t\t\t\t\t\tconst defaultExport = asCall\n\t\t\t\t\t\t\t? `${info.interopDefaultAccessName}()`\n\t\t\t\t\t\t\t: asiSafe\n\t\t\t\t\t\t\t? `(${info.interopDefaultAccessName}())`\n\t\t\t\t\t\t\t: asiSafe === false\n\t\t\t\t\t\t\t? `;(${info.interopDefaultAccessName}())`\n\t\t\t\t\t\t\t: `${info.interopDefaultAccessName}.a`;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: defaultExport,\n\t\t\t\t\t\t\tids: exportName,\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tcase \"__esModule\":\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected exportsType ${exportsType}`);\n\t\t}\n\t}\n\tif (exportName.length === 0) {\n\t\tswitch (info.type) {\n\t\t\tcase \"concatenated\":\n\t\t\t\tneededNamespaceObjects.add(info);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.namespaceObjectName,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"external\":\n\t\t\t\treturn { info, rawName: info.name, ids: exportName, exportName };\n\t\t}\n\t}\n\tconst exportsInfo = moduleGraph.getExportsInfo(info.module);\n\tconst exportInfo = exportsInfo.getExportInfo(exportName[0]);\n\tif (alreadyVisited.has(exportInfo)) {\n\t\treturn {\n\t\t\tinfo,\n\t\t\trawName: \"/* circular reexport */ Object(function x() { x() }())\",\n\t\t\tids: [],\n\t\t\texportName\n\t\t};\n\t}\n\talreadyVisited.add(exportInfo);\n\tswitch (info.type) {\n\t\tcase \"concatenated\": {\n\t\t\tconst exportId = exportName[0];\n\t\t\tif (exportInfo.provided === false) {\n\t\t\t\t// It's not provided, but it could be on the prototype\n\t\t\t\tneededNamespaceObjects.add(info);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.namespaceObjectName,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst directExport = info.exportMap && info.exportMap.get(exportId);\n\t\t\tif (directExport) {\n\t\t\t\tconst usedName = /** @type {string[]} */ (\n\t\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t\t);\n\t\t\t\tif (!usedName) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName: \"/* unused export */ undefined\",\n\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\tname: directExport,\n\t\t\t\t\tids: usedName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst rawExport = info.rawExportMap && info.rawExportMap.get(exportId);\n\t\t\tif (rawExport) {\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: rawExport,\n\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst reexport = exportInfo.findTarget(moduleGraph, module =>\n\t\t\t\tmoduleToInfoMap.has(module)\n\t\t\t);\n\t\t\tif (reexport === false) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Target module of reexport from '${info.module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)}' is not part of the concatenation (export '${exportId}')\\nModules in the concatenation:\\n${Array.from(\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t([m, info]) =>\n\t\t\t\t\t\t\t` * ${info.type} ${m.readableIdentifier(requestShortener)}`\n\t\t\t\t\t).join(\"\\n\")}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (reexport) {\n\t\t\t\tconst refInfo = moduleToInfoMap.get(reexport.module);\n\t\t\t\treturn getFinalBinding(\n\t\t\t\t\tmoduleGraph,\n\t\t\t\t\trefInfo,\n\t\t\t\t\treexport.export\n\t\t\t\t\t\t? [...reexport.export, ...exportName.slice(1)]\n\t\t\t\t\t\t: exportName.slice(1),\n\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\truntime,\n\t\t\t\t\trequestShortener,\n\t\t\t\t\truntimeTemplate,\n\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\tasCall,\n\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\tasiSafe,\n\t\t\t\t\talreadyVisited\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.namespaceExportSymbol) {\n\t\t\t\tconst usedName = /** @type {string[]} */ (\n\t\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.namespaceObjectName,\n\t\t\t\t\tids: usedName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot get final name for export '${exportName.join(\n\t\t\t\t\t\".\"\n\t\t\t\t)}' of ${info.module.readableIdentifier(requestShortener)}`\n\t\t\t);\n\t\t}\n\n\t\tcase \"external\": {\n\t\t\tconst used = /** @type {string[]} */ (\n\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t);\n\t\t\tif (!used) {\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: \"/* unused export */ undefined\",\n\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst comment = equals(used, exportName)\n\t\t\t\t? \"\"\n\t\t\t\t: Template.toNormalComment(`${exportName.join(\".\")}`);\n\t\t\treturn { info, rawName: info.name + comment, ids: used, exportName };\n\t\t}\n\t}\n};\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} callContext callContext\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @returns {string} the final name\n */\nconst getFinalName = (\n\tmoduleGraph,\n\tinfo,\n\texportName,\n\tmoduleToInfoMap,\n\truntime,\n\trequestShortener,\n\truntimeTemplate,\n\tneededNamespaceObjects,\n\tasCall,\n\tcallContext,\n\tstrictHarmonyModule,\n\tasiSafe\n) => {\n\tconst binding = getFinalBinding(\n\t\tmoduleGraph,\n\t\tinfo,\n\t\texportName,\n\t\tmoduleToInfoMap,\n\t\truntime,\n\t\trequestShortener,\n\t\truntimeTemplate,\n\t\tneededNamespaceObjects,\n\t\tasCall,\n\t\tstrictHarmonyModule,\n\t\tasiSafe\n\t);\n\t{\n\t\tconst { ids, comment } = binding;\n\t\tlet reference;\n\t\tlet isPropertyAccess;\n\t\tif (\"rawName\" in binding) {\n\t\t\treference = `${binding.rawName}${comment || \"\"}${propertyAccess(ids)}`;\n\t\t\tisPropertyAccess = ids.length > 0;\n\t\t} else {\n\t\t\tconst { info, name: exportId } = binding;\n\t\t\tconst name = info.internalNames.get(exportId);\n\t\t\tif (!name) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`The export \"${exportId}\" in \"${info.module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)}\" has no internal name (existing names: ${\n\t\t\t\t\t\tArray.from(\n\t\t\t\t\t\t\tinfo.internalNames,\n\t\t\t\t\t\t\t([name, symbol]) => `${name}: ${symbol}`\n\t\t\t\t\t\t).join(\", \") || \"none\"\n\t\t\t\t\t})`\n\t\t\t\t);\n\t\t\t}\n\t\t\treference = `${name}${comment || \"\"}${propertyAccess(ids)}`;\n\t\t\tisPropertyAccess = ids.length > 1;\n\t\t}\n\t\tif (isPropertyAccess && asCall && callContext === false) {\n\t\t\treturn asiSafe\n\t\t\t\t? `(0,${reference})`\n\t\t\t\t: asiSafe === false\n\t\t\t\t? `;(0,${reference})`\n\t\t\t\t: `/*#__PURE__*/Object(${reference})`;\n\t\t}\n\t\treturn reference;\n\t}\n};\n\nconst addScopeSymbols = (s, nameSet, scopeSet1, scopeSet2) => {\n\tlet scope = s;\n\twhile (scope) {\n\t\tif (scopeSet1.has(scope)) break;\n\t\tif (scopeSet2.has(scope)) break;\n\t\tscopeSet1.add(scope);\n\t\tfor (const variable of scope.variables) {\n\t\t\tnameSet.add(variable.name);\n\t\t}\n\t\tscope = scope.upper;\n\t}\n};\n\nconst getAllReferences = variable => {\n\tlet set = variable.references;\n\t// Look for inner scope variables too (like in class Foo { t() { Foo } })\n\tconst identifiers = new Set(variable.identifiers);\n\tfor (const scope of variable.scope.childScopes) {\n\t\tfor (const innerVar of scope.variables) {\n\t\t\tif (innerVar.identifiers.some(id => identifiers.has(id))) {\n\t\t\t\tset = set.concat(innerVar.references);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn set;\n};\n\nconst getPathInAst = (ast, node) => {\n\tif (ast === node) {\n\t\treturn [];\n\t}\n\n\tconst nr = node.range;\n\n\tconst enterNode = n => {\n\t\tif (!n) return undefined;\n\t\tconst r = n.range;\n\t\tif (r) {\n\t\t\tif (r[0] <= nr[0] && r[1] >= nr[1]) {\n\t\t\t\tconst path = getPathInAst(n, node);\n\t\t\t\tif (path) {\n\t\t\t\t\tpath.push(n);\n\t\t\t\t\treturn path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tif (Array.isArray(ast)) {\n\t\tfor (let i = 0; i < ast.length; i++) {\n\t\t\tconst enterResult = enterNode(ast[i]);\n\t\t\tif (enterResult !== undefined) return enterResult;\n\t\t}\n\t} else if (ast && typeof ast === \"object\") {\n\t\tconst keys = Object.keys(ast);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst value = ast[keys[i]];\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tconst pathResult = getPathInAst(value, node);\n\t\t\t\tif (pathResult !== undefined) return pathResult;\n\t\t\t} else if (value && typeof value === \"object\") {\n\t\t\t\tconst enterResult = enterNode(value);\n\t\t\t\tif (enterResult !== undefined) return enterResult;\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass ConcatenatedModule extends Module {\n\t/**\n\t * @param {Module} rootModule the root module of the concatenation\n\t * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @param {Object=} associatedObjectForCache object for caching\n\t * @param {string | HashConstructor=} hashFunction hash function to use\n\t * @returns {ConcatenatedModule} the module\n\t */\n\tstatic create(\n\t\trootModule,\n\t\tmodules,\n\t\truntime,\n\t\tassociatedObjectForCache,\n\t\thashFunction = \"md4\"\n\t) {\n\t\tconst identifier = ConcatenatedModule._createIdentifier(\n\t\t\trootModule,\n\t\t\tmodules,\n\t\t\tassociatedObjectForCache,\n\t\t\thashFunction\n\t\t);\n\t\treturn new ConcatenatedModule({\n\t\t\tidentifier,\n\t\t\trootModule,\n\t\t\tmodules,\n\t\t\truntime\n\t\t});\n\t}\n\n\t/**\n\t * @param {Object} options options\n\t * @param {string} options.identifier the identifier of the module\n\t * @param {Module=} options.rootModule the root module of the concatenation\n\t * @param {RuntimeSpec} options.runtime the selected runtime\n\t * @param {Set<Module>=} options.modules all concatenated modules\n\t */\n\tconstructor({ identifier, rootModule, modules, runtime }) {\n\t\tsuper(JAVASCRIPT_MODULE_TYPE_ESM, null, rootModule && rootModule.layer);\n\n\t\t// Info from Factory\n\t\t/** @type {string} */\n\t\tthis._identifier = identifier;\n\t\t/** @type {Module} */\n\t\tthis.rootModule = rootModule;\n\t\t/** @type {Set<Module>} */\n\t\tthis._modules = modules;\n\t\tthis._runtime = runtime;\n\t\tthis.factoryMeta = rootModule && rootModule.factoryMeta;\n\t}\n\n\t/**\n\t * Assuming this module is in the cache. Update the (cached) module with\n\t * the fresh module from the factory. Usually updates internal references\n\t * and properties.\n\t * @param {Module} module fresh module\n\t * @returns {void}\n\t */\n\tupdateCacheModule(module) {\n\t\tthrow new Error(\"Must not be called\");\n\t}\n\n\t/**\n\t * @returns {Set<string>} types available (do not mutate)\n\t */\n\tgetSourceTypes() {\n\t\treturn TYPES;\n\t}\n\n\tget modules() {\n\t\treturn Array.from(this._modules);\n\t}\n\n\t/**\n\t * @returns {string} a unique identifier of the module\n\t */\n\tidentifier() {\n\t\treturn this._identifier;\n\t}\n\n\t/**\n\t * @param {RequestShortener} requestShortener the request shortener\n\t * @returns {string} a user readable identifier of the module\n\t */\n\treadableIdentifier(requestShortener) {\n\t\treturn (\n\t\t\tthis.rootModule.readableIdentifier(requestShortener) +\n\t\t\t` + ${this._modules.size - 1} modules`\n\t\t);\n\t}\n\n\t/**\n\t * @param {LibIdentOptions} options options\n\t * @returns {string | null} an identifier for library inclusion\n\t */\n\tlibIdent(options) {\n\t\treturn this.rootModule.libIdent(options);\n\t}\n\n\t/**\n\t * @returns {string | null} absolute path which should be used for condition matching (usually the resource path)\n\t */\n\tnameForCondition() {\n\t\treturn this.rootModule.nameForCondition();\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConnectionState} how this module should be connected to referencing modules when consumed for side-effects only\n\t */\n\tgetSideEffectsConnectionState(moduleGraph) {\n\t\treturn this.rootModule.getSideEffectsConnectionState(moduleGraph);\n\t}\n\n\t/**\n\t * @param {WebpackOptions} options webpack options\n\t * @param {Compilation} compilation the compilation\n\t * @param {ResolverWithOptions} resolver the resolver\n\t * @param {InputFileSystem} fs the file system\n\t * @param {function(WebpackError=): void} callback callback function\n\t * @returns {void}\n\t */\n\tbuild(options, compilation, resolver, fs, callback) {\n\t\tconst { rootModule } = this;\n\t\tthis.buildInfo = {\n\t\t\tstrict: true,\n\t\t\tcacheable: true,\n\t\t\tmoduleArgument: rootModule.buildInfo.moduleArgument,\n\t\t\texportsArgument: rootModule.buildInfo.exportsArgument,\n\t\t\tfileDependencies: new LazySet(),\n\t\t\tcontextDependencies: new LazySet(),\n\t\t\tmissingDependencies: new LazySet(),\n\t\t\ttopLevelDeclarations: new Set(),\n\t\t\tassets: undefined\n\t\t};\n\t\tthis.buildMeta = rootModule.buildMeta;\n\t\tthis.clearDependenciesAndBlocks();\n\t\tthis.clearWarningsAndErrors();\n\n\t\tfor (const m of this._modules) {\n\t\t\t// populate cacheable\n\t\t\tif (!m.buildInfo.cacheable) {\n\t\t\t\tthis.buildInfo.cacheable = false;\n\t\t\t}\n\n\t\t\t// populate dependencies\n\t\t\tfor (const d of m.dependencies.filter(\n\t\t\t\tdep =>\n\t\t\t\t\t!(dep instanceof HarmonyImportDependency) ||\n\t\t\t\t\t!this._modules.has(compilation.moduleGraph.getModule(dep))\n\t\t\t)) {\n\t\t\t\tthis.dependencies.push(d);\n\t\t\t}\n\t\t\t// populate blocks\n\t\t\tfor (const d of m.blocks) {\n\t\t\t\tthis.blocks.push(d);\n\t\t\t}\n\n\t\t\t// populate warnings\n\t\t\tconst warnings = m.getWarnings();\n\t\t\tif (warnings !== undefined) {\n\t\t\t\tfor (const warning of warnings) {\n\t\t\t\t\tthis.addWarning(warning);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// populate errors\n\t\t\tconst errors = m.getErrors();\n\t\t\tif (errors !== undefined) {\n\t\t\t\tfor (const error of errors) {\n\t\t\t\t\tthis.addError(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// populate topLevelDeclarations\n\t\t\tif (m.buildInfo.topLevelDeclarations) {\n\t\t\t\tconst topLevelDeclarations = this.buildInfo.topLevelDeclarations;\n\t\t\t\tif (topLevelDeclarations !== undefined) {\n\t\t\t\t\tfor (const decl of m.buildInfo.topLevelDeclarations) {\n\t\t\t\t\t\ttopLevelDeclarations.add(decl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.buildInfo.topLevelDeclarations = undefined;\n\t\t\t}\n\n\t\t\t// populate assets\n\t\t\tif (m.buildInfo.assets) {\n\t\t\t\tif (this.buildInfo.assets === undefined) {\n\t\t\t\t\tthis.buildInfo.assets = Object.create(null);\n\t\t\t\t}\n\t\t\t\tObject.assign(this.buildInfo.assets, m.buildInfo.assets);\n\t\t\t}\n\t\t\tif (m.buildInfo.assetsInfo) {\n\t\t\t\tif (this.buildInfo.assetsInfo === undefined) {\n\t\t\t\t\tthis.buildInfo.assetsInfo = new Map();\n\t\t\t\t}\n\t\t\t\tfor (const [key, value] of m.buildInfo.assetsInfo) {\n\t\t\t\t\tthis.buildInfo.assetsInfo.set(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcallback();\n\t}\n\n\t/**\n\t * @param {string=} type the source type for which the size should be estimated\n\t * @returns {number} the estimated size of the module (must be non-zero)\n\t */\n\tsize(type) {\n\t\t// Guess size from embedded modules\n\t\tlet size = 0;\n\t\tfor (const module of this._modules) {\n\t\t\tsize += module.size(type);\n\t\t}\n\t\treturn size;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Module} rootModule the root of the concatenation\n\t * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n\t * @param {RuntimeSpec} runtime for this runtime\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConcatenationEntry[]} concatenation list\n\t */\n\t_createConcatenationList(rootModule, modulesSet, runtime, moduleGraph) {\n\t\t/** @type {ConcatenationEntry[]} */\n\t\tconst list = [];\n\t\t/** @type {Map<Module, RuntimeSpec | true>} */\n\t\tconst existingEntries = new Map();\n\n\t\t/**\n\t\t * @param {Module} module a module\n\t\t * @returns {Iterable<{ connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} imported modules in order\n\t\t */\n\t\tconst getConcatenatedImports = module => {\n\t\t\tlet connections = Array.from(moduleGraph.getOutgoingConnections(module));\n\t\t\tif (module === rootModule) {\n\t\t\t\tfor (const c of moduleGraph.getOutgoingConnections(this))\n\t\t\t\t\tconnections.push(c);\n\t\t\t}\n\t\t\t/**\n\t\t\t * @type {Array<{ connection: ModuleGraphConnection, sourceOrder: number, rangeStart: number }>}\n\t\t\t */\n\t\t\tconst references = connections\n\t\t\t\t.filter(connection => {\n\t\t\t\t\tif (!(connection.dependency instanceof HarmonyImportDependency))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn (\n\t\t\t\t\t\tconnection &&\n\t\t\t\t\t\tconnection.resolvedOriginModule === module &&\n\t\t\t\t\t\tconnection.module &&\n\t\t\t\t\t\tconnection.isTargetActive(runtime)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.map(connection => {\n\t\t\t\t\tconst dep = /** @type {HarmonyImportDependency} */ (\n\t\t\t\t\t\tconnection.dependency\n\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tconnection,\n\t\t\t\t\t\tsourceOrder: dep.sourceOrder,\n\t\t\t\t\t\trangeStart: dep.range && dep.range[0]\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t/**\n\t\t\t * bySourceOrder\n\t\t\t * @example\n\t\t\t * import a from \"a\"; // sourceOrder=1\n\t\t\t * import b from \"b\"; // sourceOrder=2\n\t\t\t *\n\t\t\t * byRangeStart\n\t\t\t * @example\n\t\t\t * import {a, b} from \"a\"; // sourceOrder=1\n\t\t\t * a.a(); // first range\n\t\t\t * b.b(); // second range\n\t\t\t *\n\t\t\t * If there is no reexport, we have the same source.\n\t\t\t * If there is reexport, but module has side effects, this will lead to reexport module only.\n\t\t\t * If there is side-effects-free reexport, we can get simple deterministic result with range start comparison.\n\t\t\t */\n\t\t\treferences.sort(concatComparators(bySourceOrder, byRangeStart));\n\t\t\t/** @type {Map<Module, { connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} */\n\t\t\tconst referencesMap = new Map();\n\t\t\tfor (const { connection } of references) {\n\t\t\t\tconst runtimeCondition = filterRuntime(runtime, r =>\n\t\t\t\t\tconnection.isTargetActive(r)\n\t\t\t\t);\n\t\t\t\tif (runtimeCondition === false) continue;\n\t\t\t\tconst module = connection.module;\n\t\t\t\tconst entry = referencesMap.get(module);\n\t\t\t\tif (entry === undefined) {\n\t\t\t\t\treferencesMap.set(module, { connection, runtimeCondition });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tentry.runtimeCondition = mergeRuntimeConditionNonFalse(\n\t\t\t\t\tentry.runtimeCondition,\n\t\t\t\t\truntimeCondition,\n\t\t\t\t\truntime\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn referencesMap.values();\n\t\t};\n\n\t\t/**\n\t\t * @param {ModuleGraphConnection} connection graph connection\n\t\t * @param {RuntimeSpec | true} runtimeCondition runtime condition\n\t\t * @returns {void}\n\t\t */\n\t\tconst enterModule = (connection, runtimeCondition) => {\n\t\t\tconst module = connection.module;\n\t\t\tif (!module) return;\n\t\t\tconst existingEntry = existingEntries.get(module);\n\t\t\tif (existingEntry === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (modulesSet.has(module)) {\n\t\t\t\texistingEntries.set(module, true);\n\t\t\t\tif (runtimeCondition !== true) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Cannot runtime-conditional concatenate a module (${module.identifier()} in ${this.rootModule.identifier()}, ${runtimeConditionToString(\n\t\t\t\t\t\t\truntimeCondition\n\t\t\t\t\t\t)}). This should not happen.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst imports = getConcatenatedImports(module);\n\t\t\t\tfor (const { connection, runtimeCondition } of imports)\n\t\t\t\t\tenterModule(connection, runtimeCondition);\n\t\t\t\tlist.push({\n\t\t\t\t\ttype: \"concatenated\",\n\t\t\t\t\tmodule: connection.module,\n\t\t\t\t\truntimeCondition\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (existingEntry !== undefined) {\n\t\t\t\t\tconst reducedRuntimeCondition = subtractRuntimeCondition(\n\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\texistingEntry,\n\t\t\t\t\t\truntime\n\t\t\t\t\t);\n\t\t\t\t\tif (reducedRuntimeCondition === false) return;\n\t\t\t\t\truntimeCondition = reducedRuntimeCondition;\n\t\t\t\t\texistingEntries.set(\n\t\t\t\t\t\tconnection.module,\n\t\t\t\t\t\tmergeRuntimeConditionNonFalse(\n\t\t\t\t\t\t\texistingEntry,\n\t\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\texistingEntries.set(connection.module, runtimeCondition);\n\t\t\t\t}\n\t\t\t\tif (list.length > 0) {\n\t\t\t\t\tconst lastItem = list[list.length - 1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastItem.type === \"external\" &&\n\t\t\t\t\t\tlastItem.module === connection.module\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastItem.runtimeCondition = mergeRuntimeCondition(\n\t\t\t\t\t\t\tlastItem.runtimeCondition,\n\t\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlist.push({\n\t\t\t\t\ttype: \"external\",\n\t\t\t\t\tget module() {\n\t\t\t\t\t\t// We need to use a getter here, because the module in the dependency\n\t\t\t\t\t\t// could be replaced by some other process (i. e. also replaced with a\n\t\t\t\t\t\t// concatenated module)\n\t\t\t\t\t\treturn connection.module;\n\t\t\t\t\t},\n\t\t\t\t\truntimeCondition\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\texistingEntries.set(rootModule, true);\n\t\tconst imports = getConcatenatedImports(rootModule);\n\t\tfor (const { connection, runtimeCondition } of imports)\n\t\t\tenterModule(connection, runtimeCondition);\n\t\tlist.push({\n\t\t\ttype: \"concatenated\",\n\t\t\tmodule: rootModule,\n\t\t\truntimeCondition: true\n\t\t});\n\n\t\treturn list;\n\t}\n\n\t/**\n\t * @param {Module} rootModule the root module of the concatenation\n\t * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n\t * @param {Object=} associatedObjectForCache object for caching\n\t * @param {string | HashConstructor=} hashFunction hash function to use\n\t * @returns {string} the identifier\n\t */\n\tstatic _createIdentifier(\n\t\trootModule,\n\t\tmodules,\n\t\tassociatedObjectForCache,\n\t\thashFunction = \"md4\"\n\t) {\n\t\tconst cachedMakePathsRelative = makePathsRelative.bindContextCache(\n\t\t\trootModule.context,\n\t\t\tassociatedObjectForCache\n\t\t);\n\t\tlet identifiers = [];\n\t\tfor (const module of modules) {\n\t\t\tidentifiers.push(cachedMakePathsRelative(module.identifier()));\n\t\t}\n\t\tidentifiers.sort();\n\t\tconst hash = createHash(hashFunction);\n\t\thash.update(identifiers.join(\" \"));\n\t\treturn rootModule.identifier() + \"|\" + hash.digest(\"hex\");\n\t}\n\n\t/**\n\t * @param {LazySet<string>} fileDependencies set where file dependencies are added to\n\t * @param {LazySet<string>} contextDependencies set where context dependencies are added to\n\t * @param {LazySet<string>} missingDependencies set where missing dependencies are added to\n\t * @param {LazySet<string>} buildDependencies set where build dependencies are added to\n\t */\n\taddCacheDependencies(\n\t\tfileDependencies,\n\t\tcontextDependencies,\n\t\tmissingDependencies,\n\t\tbuildDependencies\n\t) {\n\t\tfor (const module of this._modules) {\n\t\t\tmodule.addCacheDependencies(\n\t\t\t\tfileDependencies,\n\t\t\t\tcontextDependencies,\n\t\t\t\tmissingDependencies,\n\t\t\t\tbuildDependencies\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {CodeGenerationContext} context context for code generation\n\t * @returns {CodeGenerationResult} result\n\t */\n\tcodeGeneration({\n\t\tdependencyTemplates,\n\t\truntimeTemplate,\n\t\tmoduleGraph,\n\t\tchunkGraph,\n\t\truntime: generationRuntime,\n\t\tcodeGenerationResults\n\t}) {\n\t\t/** @type {Set<string>} */\n\t\tconst runtimeRequirements = new Set();\n\t\tconst runtime = intersectRuntime(generationRuntime, this._runtime);\n\n\t\tconst requestShortener = runtimeTemplate.requestShortener;\n\t\t// Meta info for each module\n\t\tconst [modulesWithInfo, moduleToInfoMap] = this._getModulesWithInfo(\n\t\t\tmoduleGraph,\n\t\t\truntime\n\t\t);\n\n\t\t// Set with modules that need a generated namespace object\n\t\t/** @type {Set<ConcatenatedModuleInfo>} */\n\t\tconst neededNamespaceObjects = new Set();\n\n\t\t// Generate source code and analyse scopes\n\t\t// Prepare a ReplaceSource for the final source\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tthis._analyseModule(\n\t\t\t\tmoduleToInfoMap,\n\t\t\t\tinfo,\n\t\t\t\tdependencyTemplates,\n\t\t\t\truntimeTemplate,\n\t\t\t\tmoduleGraph,\n\t\t\t\tchunkGraph,\n\t\t\t\truntime,\n\t\t\t\tcodeGenerationResults\n\t\t\t);\n\t\t}\n\n\t\t// List of all used names to avoid conflicts\n\t\tconst allUsedNames = new Set(RESERVED_NAMES);\n\t\t// Updated Top level declarations are created by renaming\n\t\tconst topLevelDeclarations = new Set();\n\n\t\t// List of additional names in scope for module references\n\t\t/** @type {Map<string, { usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }>} */\n\t\tconst usedNamesInScopeInfo = new Map();\n\t\t/**\n\t\t * @param {string} module module identifier\n\t\t * @param {string} id export id\n\t\t * @returns {{ usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }} info\n\t\t */\n\t\tconst getUsedNamesInScopeInfo = (module, id) => {\n\t\t\tconst key = `${module}-${id}`;\n\t\t\tlet info = usedNamesInScopeInfo.get(key);\n\t\t\tif (info === undefined) {\n\t\t\t\tinfo = {\n\t\t\t\t\tusedNames: new Set(),\n\t\t\t\t\talreadyCheckedScopes: new Set()\n\t\t\t\t};\n\t\t\t\tusedNamesInScopeInfo.set(key, info);\n\t\t\t}\n\t\t\treturn info;\n\t\t};\n\n\t\t// Set of already checked scopes\n\t\tconst ignoredScopes = new Set();\n\n\t\t// get all global names\n\t\tfor (const info of modulesWithInfo) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\t// ignore symbols from moduleScope\n\t\t\t\tif (info.moduleScope) {\n\t\t\t\t\tignoredScopes.add(info.moduleScope);\n\t\t\t\t}\n\n\t\t\t\t// The super class expression in class scopes behaves weird\n\t\t\t\t// We get ranges of all super class expressions to make\n\t\t\t\t// renaming to work correctly\n\t\t\t\tconst superClassCache = new WeakMap();\n\t\t\t\tconst getSuperClassExpressions = scope => {\n\t\t\t\t\tconst cacheEntry = superClassCache.get(scope);\n\t\t\t\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t\t\t\t\tconst superClassExpressions = [];\n\t\t\t\t\tfor (const childScope of scope.childScopes) {\n\t\t\t\t\t\tif (childScope.type !== \"class\") continue;\n\t\t\t\t\t\tconst block = childScope.block;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(block.type === \"ClassDeclaration\" ||\n\t\t\t\t\t\t\t\tblock.type === \"ClassExpression\") &&\n\t\t\t\t\t\t\tblock.superClass\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsuperClassExpressions.push({\n\t\t\t\t\t\t\t\trange: block.superClass.range,\n\t\t\t\t\t\t\t\tvariables: childScope.variables\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsuperClassCache.set(scope, superClassExpressions);\n\t\t\t\t\treturn superClassExpressions;\n\t\t\t\t};\n\n\t\t\t\t// add global symbols\n\t\t\t\tif (info.globalScope) {\n\t\t\t\t\tfor (const reference of info.globalScope.through) {\n\t\t\t\t\t\tconst name = reference.identifier.name;\n\t\t\t\t\t\tif (ConcatenationScope.isModuleReference(name)) {\n\t\t\t\t\t\t\tconst match = ConcatenationScope.matchModuleReference(name);\n\t\t\t\t\t\t\tif (!match) continue;\n\t\t\t\t\t\t\tconst referencedInfo = modulesWithInfo[match.index];\n\t\t\t\t\t\t\tif (referencedInfo.type === \"reference\")\n\t\t\t\t\t\t\t\tthrow new Error(\"Module reference can't point to a reference\");\n\t\t\t\t\t\t\tconst binding = getFinalBinding(\n\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\treferencedInfo,\n\t\t\t\t\t\t\t\tmatch.ids,\n\t\t\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!binding.ids) continue;\n\t\t\t\t\t\t\tconst { usedNames, alreadyCheckedScopes } =\n\t\t\t\t\t\t\t\tgetUsedNamesInScopeInfo(\n\t\t\t\t\t\t\t\t\tbinding.info.module.identifier(),\n\t\t\t\t\t\t\t\t\t\"name\" in binding ? binding.name : \"\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const expr of getSuperClassExpressions(reference.from)) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\texpr.range[0] <= reference.identifier.range[0] &&\n\t\t\t\t\t\t\t\t\texpr.range[1] >= reference.identifier.range[1]\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tfor (const variable of expr.variables) {\n\t\t\t\t\t\t\t\t\t\tusedNames.add(variable.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taddScopeSymbols(\n\t\t\t\t\t\t\t\treference.from,\n\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\talreadyCheckedScopes,\n\t\t\t\t\t\t\t\tignoredScopes\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallUsedNames.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// generate names for symbols\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tconst { usedNames: namespaceObjectUsedNames } = getUsedNamesInScopeInfo(\n\t\t\t\tinfo.module.identifier(),\n\t\t\t\t\"\"\n\t\t\t);\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\": {\n\t\t\t\t\tfor (const variable of info.moduleScope.variables) {\n\t\t\t\t\t\tconst name = variable.name;\n\t\t\t\t\t\tconst { usedNames, alreadyCheckedScopes } = getUsedNamesInScopeInfo(\n\t\t\t\t\t\t\tinfo.module.identifier(),\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (allUsedNames.has(name) || usedNames.has(name)) {\n\t\t\t\t\t\t\tconst references = getAllReferences(variable);\n\t\t\t\t\t\t\tfor (const ref of references) {\n\t\t\t\t\t\t\t\taddScopeSymbols(\n\t\t\t\t\t\t\t\t\tref.from,\n\t\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\t\talreadyCheckedScopes,\n\t\t\t\t\t\t\t\t\tignoredScopes\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst newName = this.findNewName(\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tallUsedNames.add(newName);\n\t\t\t\t\t\t\tinfo.internalNames.set(name, newName);\n\t\t\t\t\t\t\ttopLevelDeclarations.add(newName);\n\t\t\t\t\t\t\tconst source = info.source;\n\t\t\t\t\t\t\tconst allIdentifiers = new Set(\n\t\t\t\t\t\t\t\treferences.map(r => r.identifier).concat(variable.identifiers)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const identifier of allIdentifiers) {\n\t\t\t\t\t\t\t\tconst r = identifier.range;\n\t\t\t\t\t\t\t\tconst path = getPathInAst(info.ast, identifier);\n\t\t\t\t\t\t\t\tif (path && path.length > 1) {\n\t\t\t\t\t\t\t\t\tconst maybeProperty =\n\t\t\t\t\t\t\t\t\t\tpath[1].type === \"AssignmentPattern\" &&\n\t\t\t\t\t\t\t\t\t\tpath[1].left === path[0]\n\t\t\t\t\t\t\t\t\t\t\t? path[2]\n\t\t\t\t\t\t\t\t\t\t\t: path[1];\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tmaybeProperty.type === \"Property\" &&\n\t\t\t\t\t\t\t\t\t\tmaybeProperty.shorthand\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tsource.insert(r[1], `: ${newName}`);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsource.replace(r[0], r[1] - 1, newName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallUsedNames.add(name);\n\t\t\t\t\t\t\tinfo.internalNames.set(name, name);\n\t\t\t\t\t\t\ttopLevelDeclarations.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet namespaceObjectName;\n\t\t\t\t\tif (info.namespaceExportSymbol) {\n\t\t\t\t\t\tnamespaceObjectName = info.internalNames.get(\n\t\t\t\t\t\t\tinfo.namespaceExportSymbol\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnamespaceObjectName = this.findNewName(\n\t\t\t\t\t\t\t\"namespaceObject\",\n\t\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tallUsedNames.add(namespaceObjectName);\n\t\t\t\t\t}\n\t\t\t\t\tinfo.namespaceObjectName = namespaceObjectName;\n\t\t\t\t\ttopLevelDeclarations.add(namespaceObjectName);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"external\": {\n\t\t\t\t\tconst externalName = this.findNewName(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t);\n\t\t\t\t\tallUsedNames.add(externalName);\n\t\t\t\t\tinfo.name = externalName;\n\t\t\t\t\ttopLevelDeclarations.add(externalName);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (info.module.buildMeta.exportsType !== \"namespace\") {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"namespaceObject\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopNamespaceObjectName = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tinfo.module.buildMeta.exportsType === \"default\" &&\n\t\t\t\tinfo.module.buildMeta.defaultObject !== \"redirect\"\n\t\t\t) {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"namespaceObject2\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopNamespaceObject2Name = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tinfo.module.buildMeta.exportsType === \"dynamic\" ||\n\t\t\t\t!info.module.buildMeta.exportsType\n\t\t\t) {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"default\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopDefaultAccessName = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t}\n\n\t\t// Find and replace references to modules\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\tfor (const reference of info.globalScope.through) {\n\t\t\t\t\tconst name = reference.identifier.name;\n\t\t\t\t\tconst match = ConcatenationScope.matchModuleReference(name);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tconst referencedInfo = modulesWithInfo[match.index];\n\t\t\t\t\t\tif (referencedInfo.type === \"reference\")\n\t\t\t\t\t\t\tthrow new Error(\"Module reference can't point to a reference\");\n\t\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\treferencedInfo,\n\t\t\t\t\t\t\tmatch.ids,\n\t\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\t\tmatch.call,\n\t\t\t\t\t\t\t!match.directImport,\n\t\t\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\t\t\tmatch.asiSafe\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst r = reference.identifier.range;\n\t\t\t\t\t\tconst source = info.source;\n\t\t\t\t\t\t// range is extended by 2 chars to cover the appended \"._\"\n\t\t\t\t\t\tsource.replace(r[0], r[1] + 1, finalName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Map with all root exposed used exports\n\t\t/** @type {Map<string, function(RequestShortener): string>} */\n\t\tconst exportsMap = new Map();\n\n\t\t// Set with all root exposed unused exports\n\t\t/** @type {Set<string>} */\n\t\tconst unusedExports = new Set();\n\n\t\tconst rootInfo = /** @type {ConcatenatedModuleInfo} */ (\n\t\t\tmoduleToInfoMap.get(this.rootModule)\n\t\t);\n\t\tconst strictHarmonyModule = rootInfo.module.buildMeta.strictHarmonyModule;\n\t\tconst exportsInfo = moduleGraph.getExportsInfo(rootInfo.module);\n\t\tfor (const exportInfo of exportsInfo.orderedExports) {\n\t\t\tconst name = exportInfo.name;\n\t\t\tif (exportInfo.provided === false) continue;\n\t\t\tconst used = exportInfo.getUsedName(undefined, runtime);\n\t\t\tif (!used) {\n\t\t\t\tunusedExports.add(name);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\texportsMap.set(used, requestShortener => {\n\t\t\t\ttry {\n\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\trootInfo,\n\t\t\t\t\t\t[name],\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tstrictHarmonyModule,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\treturn `/* ${\n\t\t\t\t\t\texportInfo.isReexport() ? \"reexport\" : \"binding\"\n\t\t\t\t\t} */ ${finalName}`;\n\t\t\t\t} catch (e) {\n\t\t\t\t\te.message += `\\nwhile generating the root export '${name}' (used name: '${used}')`;\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst result = new ConcatSource();\n\n\t\t// add harmony compatibility flag (must be first because of possible circular dependencies)\n\t\tif (\n\t\t\tmoduleGraph.getExportsInfo(this).otherExportsInfo.getUsed(runtime) !==\n\t\t\tUsageState.Unused\n\t\t) {\n\t\t\tresult.add(`// ESM COMPAT FLAG\\n`);\n\t\t\tresult.add(\n\t\t\t\truntimeTemplate.defineEsModuleFlagStatement({\n\t\t\t\t\texportsArgument: this.exportsArgument,\n\t\t\t\t\truntimeRequirements\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\t// define exports\n\t\tif (exportsMap.size > 0) {\n\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\n\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n\t\t\tconst definitions = [];\n\t\t\tfor (const [key, value] of exportsMap) {\n\t\t\t\tdefinitions.push(\n\t\t\t\t\t`\\n  ${propertyName(key)}: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\tvalue(requestShortener)\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tresult.add(`\\n// EXPORTS\\n`);\n\t\t\tresult.add(\n\t\t\t\t`${RuntimeGlobals.definePropertyGetters}(${\n\t\t\t\t\tthis.exportsArgument\n\t\t\t\t}, {${definitions.join(\",\")}\\n});\\n`\n\t\t\t);\n\t\t}\n\n\t\t// list unused exports\n\t\tif (unusedExports.size > 0) {\n\t\t\tresult.add(\n\t\t\t\t`\\n// UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)}\\n`\n\t\t\t);\n\t\t}\n\n\t\t// generate namespace objects\n\t\tconst namespaceObjectSources = new Map();\n\t\tfor (const info of neededNamespaceObjects) {\n\t\t\tif (info.namespaceExportSymbol) continue;\n\t\t\tconst nsObj = [];\n\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(info.module);\n\t\t\tfor (const exportInfo of exportsInfo.orderedExports) {\n\t\t\t\tif (exportInfo.provided === false) continue;\n\t\t\t\tconst usedName = exportInfo.getUsedName(undefined, runtime);\n\t\t\t\tif (usedName) {\n\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t[exportInfo.name],\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\tnsObj.push(\n\t\t\t\t\t\t`\\n  ${propertyName(usedName)}: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\tfinalName\n\t\t\t\t\t\t)}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst name = info.namespaceObjectName;\n\t\t\tconst defineGetters =\n\t\t\t\tnsObj.length > 0\n\t\t\t\t\t? `${RuntimeGlobals.definePropertyGetters}(${name}, {${nsObj.join(\n\t\t\t\t\t\t\t\",\"\n\t\t\t\t\t  )}\\n});\\n`\n\t\t\t\t\t: \"\";\n\t\t\tif (nsObj.length > 0)\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n\t\t\tnamespaceObjectSources.set(\n\t\t\t\tinfo,\n\t\t\t\t`\n// NAMESPACE OBJECT: ${info.module.readableIdentifier(requestShortener)}\nvar ${name} = {};\n${RuntimeGlobals.makeNamespaceObject}(${name});\n${defineGetters}`\n\t\t\t);\n\t\t\truntimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n\t\t}\n\n\t\t// define required namespace objects (must be before evaluation modules)\n\t\tfor (const info of modulesWithInfo) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\tconst source = namespaceObjectSources.get(info);\n\t\t\t\tif (!source) continue;\n\t\t\t\tresult.add(source);\n\t\t\t}\n\t\t}\n\n\t\tconst chunkInitFragments = [];\n\n\t\t// evaluate modules in order\n\t\tfor (const rawInfo of modulesWithInfo) {\n\t\t\tlet name;\n\t\t\tlet isConditional = false;\n\t\t\tconst info = rawInfo.type === \"reference\" ? rawInfo.target : rawInfo;\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\": {\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`\\n;// CONCATENATED MODULE: ${info.module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}\\n`\n\t\t\t\t\t);\n\t\t\t\t\tresult.add(info.source);\n\t\t\t\t\tif (info.chunkInitFragments) {\n\t\t\t\t\t\tfor (const f of info.chunkInitFragments) chunkInitFragments.push(f);\n\t\t\t\t\t}\n\t\t\t\t\tif (info.runtimeRequirements) {\n\t\t\t\t\t\tfor (const r of info.runtimeRequirements) {\n\t\t\t\t\t\t\truntimeRequirements.add(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tname = info.namespaceObjectName;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"external\": {\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`\\n// EXTERNAL MODULE: ${info.module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}\\n`\n\t\t\t\t\t);\n\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.require);\n\t\t\t\t\tconst { runtimeCondition } =\n\t\t\t\t\t\t/** @type {ExternalModuleInfo | ReferenceToModuleInfo} */ (rawInfo);\n\t\t\t\t\tconst condition = runtimeTemplate.runtimeConditionExpression({\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\truntimeRequirements\n\t\t\t\t\t});\n\t\t\t\t\tif (condition !== \"true\") {\n\t\t\t\t\t\tisConditional = true;\n\t\t\t\t\t\tresult.add(`if (${condition}) {\\n`);\n\t\t\t\t\t}\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`var ${info.name} = ${RuntimeGlobals.require}(${JSON.stringify(\n\t\t\t\t\t\t\tchunkGraph.getModuleId(info.module)\n\t\t\t\t\t\t)});`\n\t\t\t\t\t);\n\t\t\t\t\tname = info.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\t// @ts-expect-error never is expected here\n\t\t\t\t\tthrow new Error(`Unsupported concatenation entry type ${info.type}`);\n\t\t\t}\n\t\t\tif (info.interopNamespaceObjectUsed) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopNamespaceObjectName} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name}, 2);`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.interopNamespaceObject2Used) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopNamespaceObject2Name} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name});`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.interopDefaultAccessUsed) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.compatGetDefaultExport);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopDefaultAccessName} = /*#__PURE__*/${RuntimeGlobals.compatGetDefaultExport}(${name});`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (isConditional) {\n\t\t\t\tresult.add(\"\\n}\");\n\t\t\t}\n\t\t}\n\n\t\tconst data = new Map();\n\t\tif (chunkInitFragments.length > 0)\n\t\t\tdata.set(\"chunkInitFragments\", chunkInitFragments);\n\t\tdata.set(\"topLevelDeclarations\", topLevelDeclarations);\n\n\t\t/** @type {CodeGenerationResult} */\n\t\tconst resultEntry = {\n\t\t\tsources: new Map([[\"javascript\", new CachedSource(result)]]),\n\t\t\tdata,\n\t\t\truntimeRequirements\n\t\t};\n\n\t\treturn resultEntry;\n\t}\n\n\t/**\n\t * @param {Map<Module, ModuleInfo>} modulesMap modulesMap\n\t * @param {ModuleInfo} info info\n\t * @param {DependencyTemplates} dependencyTemplates dependencyTemplates\n\t * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate\n\t * @param {ModuleGraph} moduleGraph moduleGraph\n\t * @param {ChunkGraph} chunkGraph chunkGraph\n\t * @param {RuntimeSpec} runtime runtime\n\t * @param {CodeGenerationResults} codeGenerationResults codeGenerationResults\n\t */\n\t_analyseModule(\n\t\tmodulesMap,\n\t\tinfo,\n\t\tdependencyTemplates,\n\t\truntimeTemplate,\n\t\tmoduleGraph,\n\t\tchunkGraph,\n\t\truntime,\n\t\tcodeGenerationResults\n\t) {\n\t\tif (info.type === \"concatenated\") {\n\t\t\tconst m = info.module;\n\t\t\ttry {\n\t\t\t\t// Create a concatenation scope to track and capture information\n\t\t\t\tconst concatenationScope = new ConcatenationScope(modulesMap, info);\n\n\t\t\t\t// TODO cache codeGeneration results\n\t\t\t\tconst codeGenResult = m.codeGeneration({\n\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\truntimeTemplate,\n\t\t\t\t\tmoduleGraph,\n\t\t\t\t\tchunkGraph,\n\t\t\t\t\truntime,\n\t\t\t\t\tconcatenationScope,\n\t\t\t\t\tcodeGenerationResults,\n\t\t\t\t\tsourceTypes: TYPES\n\t\t\t\t});\n\t\t\t\tconst source = codeGenResult.sources.get(\"javascript\");\n\t\t\t\tconst data = codeGenResult.data;\n\t\t\t\tconst chunkInitFragments = data && data.get(\"chunkInitFragments\");\n\t\t\t\tconst code = source.source().toString();\n\t\t\t\tlet ast;\n\t\t\t\ttry {\n\t\t\t\t\tast = JavascriptParser._parse(code, {\n\t\t\t\t\t\tsourceType: \"module\"\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (\n\t\t\t\t\t\terr.loc &&\n\t\t\t\t\t\ttypeof err.loc === \"object\" &&\n\t\t\t\t\t\ttypeof err.loc.line === \"number\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst lineNumber = err.loc.line;\n\t\t\t\t\t\tconst lines = code.split(\"\\n\");\n\t\t\t\t\t\terr.message +=\n\t\t\t\t\t\t\t\"\\n| \" +\n\t\t\t\t\t\t\tlines\n\t\t\t\t\t\t\t\t.slice(Math.max(0, lineNumber - 3), lineNumber + 2)\n\t\t\t\t\t\t\t\t.join(\"\\n| \");\n\t\t\t\t\t}\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\tconst scopeManager = eslintScope.analyze(ast, {\n\t\t\t\t\tecmaVersion: 6,\n\t\t\t\t\tsourceType: \"module\",\n\t\t\t\t\toptimistic: true,\n\t\t\t\t\tignoreEval: true,\n\t\t\t\t\timpliedStrict: true\n\t\t\t\t});\n\t\t\t\tconst globalScope = scopeManager.acquire(ast);\n\t\t\t\tconst moduleScope = globalScope.childScopes[0];\n\t\t\t\tconst resultSource = new ReplaceSource(source);\n\t\t\t\tinfo.runtimeRequirements = codeGenResult.runtimeRequirements;\n\t\t\t\tinfo.ast = ast;\n\t\t\t\tinfo.internalSource = source;\n\t\t\t\tinfo.source = resultSource;\n\t\t\t\tinfo.chunkInitFragments = chunkInitFragments;\n\t\t\t\tinfo.globalScope = globalScope;\n\t\t\t\tinfo.moduleScope = moduleScope;\n\t\t\t} catch (err) {\n\t\t\t\terr.message += `\\nwhile analyzing module ${m.identifier()} for concatenation`;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @returns {[ModuleInfoOrReference[], Map<Module, ModuleInfo>]} module info items\n\t */\n\t_getModulesWithInfo(moduleGraph, runtime) {\n\t\tconst orderedConcatenationList = this._createConcatenationList(\n\t\t\tthis.rootModule,\n\t\t\tthis._modules,\n\t\t\truntime,\n\t\t\tmoduleGraph\n\t\t);\n\t\t/** @type {Map<Module, ModuleInfo>} */\n\t\tconst map = new Map();\n\t\tconst list = orderedConcatenationList.map((info, index) => {\n\t\t\tlet item = map.get(info.module);\n\t\t\tif (item === undefined) {\n\t\t\t\tswitch (info.type) {\n\t\t\t\t\tcase \"concatenated\":\n\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\ttype: \"concatenated\",\n\t\t\t\t\t\t\tmodule: info.module,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tast: undefined,\n\t\t\t\t\t\t\tinternalSource: undefined,\n\t\t\t\t\t\t\truntimeRequirements: undefined,\n\t\t\t\t\t\t\tsource: undefined,\n\t\t\t\t\t\t\tglobalScope: undefined,\n\t\t\t\t\t\t\tmoduleScope: undefined,\n\t\t\t\t\t\t\tinternalNames: new Map(),\n\t\t\t\t\t\t\texportMap: undefined,\n\t\t\t\t\t\t\trawExportMap: undefined,\n\t\t\t\t\t\t\tnamespaceExportSymbol: undefined,\n\t\t\t\t\t\t\tnamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObjectUsed: false,\n\t\t\t\t\t\t\tinteropNamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObject2Used: false,\n\t\t\t\t\t\t\tinteropNamespaceObject2Name: undefined,\n\t\t\t\t\t\t\tinteropDefaultAccessUsed: false,\n\t\t\t\t\t\t\tinteropDefaultAccessName: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\ttype: \"external\",\n\t\t\t\t\t\t\tmodule: info.module,\n\t\t\t\t\t\t\truntimeCondition: info.runtimeCondition,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tname: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObjectUsed: false,\n\t\t\t\t\t\t\tinteropNamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObject2Used: false,\n\t\t\t\t\t\t\tinteropNamespaceObject2Name: undefined,\n\t\t\t\t\t\t\tinteropDefaultAccessUsed: false,\n\t\t\t\t\t\t\tinteropDefaultAccessName: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unsupported concatenation entry type ${info.type}`\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tmap.set(item.module, item);\n\t\t\t\treturn item;\n\t\t\t} else {\n\t\t\t\t/** @type {ReferenceToModuleInfo} */\n\t\t\t\tconst ref = {\n\t\t\t\t\ttype: \"reference\",\n\t\t\t\t\truntimeCondition: info.runtimeCondition,\n\t\t\t\t\ttarget: item\n\t\t\t\t};\n\t\t\t\treturn ref;\n\t\t\t}\n\t\t});\n\t\treturn [list, map];\n\t}\n\n\tfindNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n\t\tlet name = oldName;\n\n\t\tif (name === ConcatenationScope.DEFAULT_EXPORT) {\n\t\t\tname = \"\";\n\t\t}\n\t\tif (name === ConcatenationScope.NAMESPACE_OBJECT_EXPORT) {\n\t\t\tname = \"namespaceObject\";\n\t\t}\n\n\t\t// Remove uncool stuff\n\t\textraInfo = extraInfo.replace(\n\t\t\t/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g,\n\t\t\t\"\"\n\t\t);\n\n\t\tconst splittedInfo = extraInfo.split(\"/\");\n\t\twhile (splittedInfo.length) {\n\t\t\tname = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n\t\t\tconst nameIdent = Template.toIdentifier(name);\n\t\t\tif (\n\t\t\t\t!usedNamed1.has(nameIdent) &&\n\t\t\t\t(!usedNamed2 || !usedNamed2.has(nameIdent))\n\t\t\t)\n\t\t\t\treturn nameIdent;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet nameWithNumber = Template.toIdentifier(`${name}_${i}`);\n\t\twhile (\n\t\t\tusedNamed1.has(nameWithNumber) ||\n\t\t\t(usedNamed2 && usedNamed2.has(nameWithNumber))\n\t\t) {\n\t\t\ti++;\n\t\t\tnameWithNumber = Template.toIdentifier(`${name}_${i}`);\n\t\t}\n\t\treturn nameWithNumber;\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tconst { chunkGraph, runtime } = context;\n\t\tfor (const info of this._createConcatenationList(\n\t\t\tthis.rootModule,\n\t\t\tthis._modules,\n\t\t\tintersectRuntime(runtime, this._runtime),\n\t\t\tchunkGraph.moduleGraph\n\t\t)) {\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\":\n\t\t\t\t\tinfo.module.updateHash(hash, context);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"external\":\n\t\t\t\t\thash.update(`${chunkGraph.getModuleId(info.module)}`);\n\t\t\t\t\t// TODO runtimeCondition\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsuper.updateHash(hash, context);\n\t}\n\n\tstatic deserialize(context) {\n\t\tconst obj = new ConcatenatedModule({\n\t\t\tidentifier: undefined,\n\t\t\trootModule: undefined,\n\t\t\tmodules: undefined,\n\t\t\truntime: undefined\n\t\t});\n\t\tobj.deserialize(context);\n\t\treturn obj;\n\t}\n}\n\nmakeSerializable(ConcatenatedModule, \"webpack/lib/optimize/ConcatenatedModule\");\n\nmodule.exports = ConcatenatedModule;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAMC,UAAU,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACzD,MAAM;EACLE,YAAY;EACZC,YAAY;EACZC;AACD,CAAC,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AAC9B,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAC3D,MAAM;EAAEM;AAAW,CAAC,GAAGN,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAMO,MAAM,GAAGP,OAAO,CAAC,WAAW,CAAC;AACnC,MAAM;EAAEQ;AAA2B,CAAC,GAAGR,OAAO,CAAC,wBAAwB,CAAC;AACxE,MAAMS,cAAc,GAAGT,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMU,QAAQ,GAAGV,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMW,uBAAuB,GAAGX,OAAO,CAAC,yCAAyC,CAAC;AAClF,MAAMY,gBAAgB,GAAGZ,OAAO,CAAC,gCAAgC,CAAC;AAClE,MAAM;EAAEa;AAAO,CAAC,GAAGb,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAMc,OAAO,GAAGd,OAAO,CAAC,iBAAiB,CAAC;AAC1C,MAAM;EAAEe;AAAkB,CAAC,GAAGf,OAAO,CAAC,qBAAqB,CAAC;AAC5D,MAAMgB,UAAU,GAAGhB,OAAO,CAAC,oBAAoB,CAAC;AAChD,MAAM;EAAEiB;AAAkB,CAAC,GAAGjB,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAMkB,gBAAgB,GAAGlB,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMmB,cAAc,GAAGnB,OAAO,CAAC,wBAAwB,CAAC;AACxD,MAAM;EAAEoB;AAAa,CAAC,GAAGpB,OAAO,CAAC,sBAAsB,CAAC;AACxD,MAAM;EACLqB,aAAa;EACbC,gBAAgB;EAChBC,qBAAqB;EACrBC,6BAA6B;EAC7BC,wBAAwB;EACxBC;AACD,CAAC,GAAG1B,OAAO,CAAC,iBAAiB,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM2B,eAAe,GAAG1B,UAAU;AAClC,IAAI,CAAC0B,eAAe,CAACC,SAAS,CAACC,kBAAkB,EAAE;EAClDF,eAAe,CAACC,SAAS,CAACC,kBAAkB,GAC3CF,eAAe,CAACC,SAAS,CAACE,QAAQ;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAC7B;AACC;AACA3B,kBAAkB,CAAC4B,cAAc,EACjC5B,kBAAkB,CAAC6B,uBAAuB;AAE1C;AACA,wFAAwF,EACxF,2FAA2F,EAC3F,6FAA6F,EAC7F,2FAA2F,EAC3F,qEAAqE;AAErE;AACA,oDAAoD;AAEpD;AACA,2FAA2F,EAC3F,oEAAoE;AAEpE;AACA,sFAAsF,EACtF,wFAAwF,EACxF,0FAA0F,EAC1F,2FAA2F,EAC3F,8FAA8F,EAC9F,8FAA8F,EAC9F,0FAA0F,EAC1F,0FAA0F,EAC1F,gBAAgB;AAEhB;AACA,+GAA+G,CAC/G,CACCC,IAAI,CAAC,GAAG,CAAC,CACTC,KAAK,CAAC,GAAG,CACZ,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,UAAU,KAAK,CAACC,CAAC,EAAEC,CAAC,KACvDF,UAAU,CAACC,CAAC,CAACF,QAAQ,CAAC,EAAEG,CAAC,CAACH,QAAQ,CAAC,CAAC;AACrC,MAAMI,cAAc,GAAGA,CAACF,CAAC,EAAEC,CAAC,KAAK;EAChC,IAAIE,KAAK,CAACH,CAAC,CAAC,EAAE;IACb,IAAI,CAACG,KAAK,CAACF,CAAC,CAAC,EAAE;MACd,OAAO,CAAC;IACT;EACD,CAAC,MAAM;IACN,IAAIE,KAAK,CAACF,CAAC,CAAC,EAAE;MACb,OAAO,CAAC,CAAC;IACV;IACA,IAAID,CAAC,KAAKC,CAAC,EAAE;MACZ,OAAOD,CAAC,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACtB;EACD;EACA,OAAO,CAAC;AACT,CAAC;AACD,MAAMG,aAAa,GAAGP,gBAAgB,CAAC,aAAa,EAAEK,cAAc,CAAC;AACrE,MAAMG,YAAY,GAAGR,gBAAgB,CAAC,YAAY,EAAEK,cAAc,CAAC;AAEnE,MAAMI,qBAAqB,GAAGC,QAAQ,IAAI;EACzC;EACA;EACA,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,KAAK,GAAG,IAAI;EAChB,KAAK,MAAMC,IAAI,IAAIH,QAAQ,EAAE;IAC5B,IAAIE,KAAK,EAAE;MACVA,KAAK,GAAG,KAAK;IACd,CAAC,MAAM;MACND,GAAG,IAAI,IAAI;IACZ;IACAA,GAAG,IAAIE,IAAI;EACZ;EACA,OAAOF,GAAG;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,eAAe,GAAG,SAAAA,CACvBC,WAAW,EACXC,IAAI,EACJC,UAAU,EACVC,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtBC,MAAM,EACNC,mBAAmB,EACnBC,OAAO,EAEH;EAAA,IADJC,cAAc,GAAAC,SAAA,CAAAC,MAAA,SAAAD,SAAA,SAAAE,SAAA,GAAAF,SAAA,OAAG,IAAIhC,GAAG,CAAC,CAAC;EAE1B,MAAMmC,WAAW,GAAGd,IAAI,CAACe,MAAM,CAACC,cAAc,CAC7CjB,WAAW,EACXS,mBACD,CAAC;EACD,IAAIP,UAAU,CAACW,MAAM,KAAK,CAAC,EAAE;IAC5B,QAAQE,WAAW;MAClB,KAAK,cAAc;QAClBd,IAAI,CAACiB,2BAA2B,GAAG,IAAI;QACvC,OAAO;UACNjB,IAAI;UACJkB,OAAO,EAAElB,IAAI,CAACmB,2BAA2B;UACzCC,GAAG,EAAEnB,UAAU;UACfA;QACD,CAAC;MACF,KAAK,oBAAoB;QACxBD,IAAI,CAACqB,0BAA0B,GAAG,IAAI;QACtC,OAAO;UACNrB,IAAI;UACJkB,OAAO,EAAElB,IAAI,CAACsB,0BAA0B;UACxCF,GAAG,EAAEnB,UAAU;UACfA;QACD,CAAC;MACF,KAAK,WAAW;MAChB,KAAK,SAAS;QACb;MACD;QACC,MAAM,IAAIsB,KAAK,CAAE,0BAAyBT,WAAY,EAAC,CAAC;IAC1D;EACD,CAAC,MAAM;IACN,QAAQA,WAAW;MAClB,KAAK,WAAW;QACf;MACD,KAAK,oBAAoB;QACxB,QAAQb,UAAU,CAAC,CAAC,CAAC;UACpB,KAAK,SAAS;YACbA,UAAU,GAAGA,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;YAChC;UACD,KAAK,YAAY;YAChB,OAAO;cACNxB,IAAI;cACJkB,OAAO,EAAE,sBAAsB;cAC/BE,GAAG,EAAEnB,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;cACxBvB;YACD,CAAC;QACH;QACA;MACD,KAAK,cAAc;QAAE;UACpB,MAAMwB,QAAQ,GAAGxB,UAAU,CAAC,CAAC,CAAC;UAC9B,IAAIwB,QAAQ,KAAK,YAAY,EAAE;YAC9B,OAAO;cACNzB,IAAI;cACJkB,OAAO,EAAE,sBAAsB;cAC/BE,GAAG,EAAEnB,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;cACxBvB;YACD,CAAC;UACF;UACAA,UAAU,GAAGA,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;UAChC,IAAIC,QAAQ,KAAK,SAAS,EAAE;YAC3B,OAAO;cACNzB,IAAI;cACJkB,OAAO,EACN,iEAAiE;cAClEE,GAAG,EAAEnB,UAAU;cACfA;YACD,CAAC;UACF;UACA;QACD;MACA,KAAK,SAAS;QACb,QAAQA,UAAU,CAAC,CAAC,CAAC;UACpB,KAAK,SAAS;YAAE;cACfA,UAAU,GAAGA,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;cAChCxB,IAAI,CAAC0B,wBAAwB,GAAG,IAAI;cACpC,MAAMC,aAAa,GAAGpB,MAAM,GACxB,GAAEP,IAAI,CAAC4B,wBAAyB,IAAG,GACpCnB,OAAO,GACN,IAAGT,IAAI,CAAC4B,wBAAyB,KAAI,GACtCnB,OAAO,KAAK,KAAK,GAChB,KAAIT,IAAI,CAAC4B,wBAAyB,KAAI,GACtC,GAAE5B,IAAI,CAAC4B,wBAAyB,IAAG;cACvC,OAAO;gBACN5B,IAAI;gBACJkB,OAAO,EAAES,aAAa;gBACtBP,GAAG,EAAEnB,UAAU;gBACfA;cACD,CAAC;YACF;UACA,KAAK,YAAY;YAChB,OAAO;cACND,IAAI;cACJkB,OAAO,EAAE,sBAAsB;cAC/BE,GAAG,EAAEnB,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;cACxBvB;YACD,CAAC;QACH;QACA;MACD;QACC,MAAM,IAAIsB,KAAK,CAAE,0BAAyBT,WAAY,EAAC,CAAC;IAC1D;EACD;EACA,IAAIb,UAAU,CAACW,MAAM,KAAK,CAAC,EAAE;IAC5B,QAAQZ,IAAI,CAAC6B,IAAI;MAChB,KAAK,cAAc;QAClBvB,sBAAsB,CAACwB,GAAG,CAAC9B,IAAI,CAAC;QAChC,OAAO;UACNA,IAAI;UACJkB,OAAO,EAAElB,IAAI,CAAC+B,mBAAmB;UACjCX,GAAG,EAAEnB,UAAU;UACfA;QACD,CAAC;MACF,KAAK,UAAU;QACd,OAAO;UAAED,IAAI;UAAEkB,OAAO,EAAElB,IAAI,CAACgC,IAAI;UAAEZ,GAAG,EAAEnB,UAAU;UAAEA;QAAW,CAAC;IAClE;EACD;EACA,MAAMgC,WAAW,GAAGlC,WAAW,CAACmC,cAAc,CAAClC,IAAI,CAACe,MAAM,CAAC;EAC3D,MAAMoB,UAAU,GAAGF,WAAW,CAACG,aAAa,CAACnC,UAAU,CAAC,CAAC,CAAC,CAAC;EAC3D,IAAIS,cAAc,CAAC2B,GAAG,CAACF,UAAU,CAAC,EAAE;IACnC,OAAO;MACNnC,IAAI;MACJkB,OAAO,EAAE,wDAAwD;MACjEE,GAAG,EAAE,EAAE;MACPnB;IACD,CAAC;EACF;EACAS,cAAc,CAACoB,GAAG,CAACK,UAAU,CAAC;EAC9B,QAAQnC,IAAI,CAAC6B,IAAI;IAChB,KAAK,cAAc;MAAE;QACpB,MAAMJ,QAAQ,GAAGxB,UAAU,CAAC,CAAC,CAAC;QAC9B,IAAIkC,UAAU,CAACG,QAAQ,KAAK,KAAK,EAAE;UAClC;UACAhC,sBAAsB,CAACwB,GAAG,CAAC9B,IAAI,CAAC;UAChC,OAAO;YACNA,IAAI;YACJkB,OAAO,EAAElB,IAAI,CAAC+B,mBAAmB;YACjCX,GAAG,EAAEnB,UAAU;YACfA;UACD,CAAC;QACF;QACA,MAAMsC,YAAY,GAAGvC,IAAI,CAACwC,SAAS,IAAIxC,IAAI,CAACwC,SAAS,CAACC,GAAG,CAAChB,QAAQ,CAAC;QACnE,IAAIc,YAAY,EAAE;UACjB,MAAMG,QAAQ,GAAG;UAChBT,WAAW,CAACU,WAAW,CAAC1C,UAAU,EAAEE,OAAO,CAC3C;UACD,IAAI,CAACuC,QAAQ,EAAE;YACd,OAAO;cACN1C,IAAI;cACJkB,OAAO,EAAE,+BAA+B;cACxCE,GAAG,EAAEnB,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;cACxBvB;YACD,CAAC;UACF;UACA,OAAO;YACND,IAAI;YACJgC,IAAI,EAAEO,YAAY;YAClBnB,GAAG,EAAEsB,QAAQ,CAAClB,KAAK,CAAC,CAAC,CAAC;YACtBvB;UACD,CAAC;QACF;QACA,MAAM2C,SAAS,GAAG5C,IAAI,CAAC6C,YAAY,IAAI7C,IAAI,CAAC6C,YAAY,CAACJ,GAAG,CAAChB,QAAQ,CAAC;QACtE,IAAImB,SAAS,EAAE;UACd,OAAO;YACN5C,IAAI;YACJkB,OAAO,EAAE0B,SAAS;YAClBxB,GAAG,EAAEnB,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;YACxBvB;UACD,CAAC;QACF;QACA,MAAM6C,QAAQ,GAAGX,UAAU,CAACY,UAAU,CAAChD,WAAW,EAAEgB,MAAM,IACzDb,eAAe,CAACmC,GAAG,CAACtB,MAAM,CAC3B,CAAC;QACD,IAAI+B,QAAQ,KAAK,KAAK,EAAE;UACvB,MAAM,IAAIvB,KAAK,CACb,mCAAkCvB,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAChE5C,gBACD,CAAE,+CAA8CqB,QAAS,sCAAqCwB,KAAK,CAACC,IAAI,CACvGhD,eAAe,EACfiD,IAAA;YAAA,IAAC,CAACC,CAAC,EAAEpD,IAAI,CAAC,GAAAmD,IAAA;YAAA,OACR,MAAKnD,IAAI,CAAC6B,IAAK,IAAGuB,CAAC,CAACJ,kBAAkB,CAAC5C,gBAAgB,CAAE,EAAC;UAAA,CAC7D,CAAC,CAACtB,IAAI,CAAC,IAAI,CAAE,EACd,CAAC;QACF;QACA,IAAIgE,QAAQ,EAAE;UACb,MAAMO,OAAO,GAAGnD,eAAe,CAACuC,GAAG,CAACK,QAAQ,CAAC/B,MAAM,CAAC;UACpD,OAAOjB,eAAe,CACrBC,WAAW,EACXsD,OAAO,EACPP,QAAQ,CAACQ,MAAM,GACZ,CAAC,GAAGR,QAAQ,CAACQ,MAAM,EAAE,GAAGrD,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC,CAAC,GAC5CvB,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC,EACtBtB,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtBC,MAAM,EACNP,IAAI,CAACe,MAAM,CAACwC,SAAS,CAAC/C,mBAAmB,EACzCC,OAAO,EACPC,cACD,CAAC;QACF;QACA,IAAIV,IAAI,CAACwD,qBAAqB,EAAE;UAC/B,MAAMd,QAAQ,GAAG;UAChBT,WAAW,CAACU,WAAW,CAAC1C,UAAU,EAAEE,OAAO,CAC3C;UACD,OAAO;YACNH,IAAI;YACJkB,OAAO,EAAElB,IAAI,CAAC+B,mBAAmB;YACjCX,GAAG,EAAEsB,QAAQ;YACbzC;UACD,CAAC;QACF;QACA,MAAM,IAAIsB,KAAK,CACb,qCAAoCtB,UAAU,CAACnB,IAAI,CACnD,GACD,CAAE,QAAOkB,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAAE,EAC3D,CAAC;MACF;IAEA,KAAK,UAAU;MAAE;QAChB,MAAMqD,IAAI,GAAG;QACZxB,WAAW,CAACU,WAAW,CAAC1C,UAAU,EAAEE,OAAO,CAC3C;QACD,IAAI,CAACsD,IAAI,EAAE;UACV,OAAO;YACNzD,IAAI;YACJkB,OAAO,EAAE,+BAA+B;YACxCE,GAAG,EAAEnB,UAAU,CAACuB,KAAK,CAAC,CAAC,CAAC;YACxBvB;UACD,CAAC;QACF;QACA,MAAMyD,OAAO,GAAGlG,MAAM,CAACiG,IAAI,EAAExD,UAAU,CAAC,GACrC,EAAE,GACF5C,QAAQ,CAACsG,eAAe,CAAE,GAAE1D,UAAU,CAACnB,IAAI,CAAC,GAAG,CAAE,EAAC,CAAC;QACtD,OAAO;UAAEkB,IAAI;UAAEkB,OAAO,EAAElB,IAAI,CAACgC,IAAI,GAAG0B,OAAO;UAAEtC,GAAG,EAAEqC,IAAI;UAAExD;QAAW,CAAC;MACrE;EACD;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2D,YAAY,GAAGA,CACpB7D,WAAW,EACXC,IAAI,EACJC,UAAU,EACVC,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtBC,MAAM,EACNsD,WAAW,EACXrD,mBAAmB,EACnBC,OAAO,KACH;EACJ,MAAMqD,OAAO,GAAGhE,eAAe,CAC9BC,WAAW,EACXC,IAAI,EACJC,UAAU,EACVC,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtBC,MAAM,EACNC,mBAAmB,EACnBC,OACD,CAAC;EACD;IACC,MAAM;MAAEW,GAAG;MAAEsC;IAAQ,CAAC,GAAGI,OAAO;IAChC,IAAIC,SAAS;IACb,IAAIC,gBAAgB;IACpB,IAAI,SAAS,IAAIF,OAAO,EAAE;MACzBC,SAAS,GAAI,GAAED,OAAO,CAAC5C,OAAQ,GAAEwC,OAAO,IAAI,EAAG,GAAE5F,cAAc,CAACsD,GAAG,CAAE,EAAC;MACtE4C,gBAAgB,GAAG5C,GAAG,CAACR,MAAM,GAAG,CAAC;IAClC,CAAC,MAAM;MACN,MAAM;QAAEZ,IAAI;QAAEgC,IAAI,EAAEP;MAAS,CAAC,GAAGqC,OAAO;MACxC,MAAM9B,IAAI,GAAGhC,IAAI,CAACiE,aAAa,CAACxB,GAAG,CAAChB,QAAQ,CAAC;MAC7C,IAAI,CAACO,IAAI,EAAE;QACV,MAAM,IAAIT,KAAK,CACb,eAAcE,QAAS,SAAQzB,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAC7D5C,gBACD,CAAE,2CACD6C,KAAK,CAACC,IAAI,CACTlD,IAAI,CAACiE,aAAa,EAClBC,KAAA;UAAA,IAAC,CAAClC,IAAI,EAAEmC,MAAM,CAAC,GAAAD,KAAA;UAAA,OAAM,GAAElC,IAAK,KAAImC,MAAO,EAAC;QAAA,CACzC,CAAC,CAACrF,IAAI,CAAC,IAAI,CAAC,IAAI,MAChB,GACF,CAAC;MACF;MACAiF,SAAS,GAAI,GAAE/B,IAAK,GAAE0B,OAAO,IAAI,EAAG,GAAE5F,cAAc,CAACsD,GAAG,CAAE,EAAC;MAC3D4C,gBAAgB,GAAG5C,GAAG,CAACR,MAAM,GAAG,CAAC;IAClC;IACA,IAAIoD,gBAAgB,IAAIzD,MAAM,IAAIsD,WAAW,KAAK,KAAK,EAAE;MACxD,OAAOpD,OAAO,GACV,MAAKsD,SAAU,GAAE,GAClBtD,OAAO,KAAK,KAAK,GAChB,OAAMsD,SAAU,GAAE,GAClB,uBAAsBA,SAAU,GAAE;IACvC;IACA,OAAOA,SAAS;EACjB;AACD,CAAC;AAED,MAAMK,eAAe,GAAGA,CAACC,CAAC,EAAEC,OAAO,EAAEC,SAAS,EAAEC,SAAS,KAAK;EAC7D,IAAIC,KAAK,GAAGJ,CAAC;EACb,OAAOI,KAAK,EAAE;IACb,IAAIF,SAAS,CAAClC,GAAG,CAACoC,KAAK,CAAC,EAAE;IAC1B,IAAID,SAAS,CAACnC,GAAG,CAACoC,KAAK,CAAC,EAAE;IAC1BF,SAAS,CAACzC,GAAG,CAAC2C,KAAK,CAAC;IACpB,KAAK,MAAMC,QAAQ,IAAID,KAAK,CAACE,SAAS,EAAE;MACvCL,OAAO,CAACxC,GAAG,CAAC4C,QAAQ,CAAC1C,IAAI,CAAC;IAC3B;IACAyC,KAAK,GAAGA,KAAK,CAACG,KAAK;EACpB;AACD,CAAC;AAED,MAAMC,gBAAgB,GAAGH,QAAQ,IAAI;EACpC,IAAII,GAAG,GAAGJ,QAAQ,CAACK,UAAU;EAC7B;EACA,MAAMC,WAAW,GAAG,IAAIrG,GAAG,CAAC+F,QAAQ,CAACM,WAAW,CAAC;EACjD,KAAK,MAAMP,KAAK,IAAIC,QAAQ,CAACD,KAAK,CAACQ,WAAW,EAAE;IAC/C,KAAK,MAAMC,QAAQ,IAAIT,KAAK,CAACE,SAAS,EAAE;MACvC,IAAIO,QAAQ,CAACF,WAAW,CAACG,IAAI,CAACC,EAAE,IAAIJ,WAAW,CAAC3C,GAAG,CAAC+C,EAAE,CAAC,CAAC,EAAE;QACzDN,GAAG,GAAGA,GAAG,CAACO,MAAM,CAACH,QAAQ,CAACH,UAAU,CAAC;QACrC;MACD;IACD;EACD;EACA,OAAOD,GAAG;AACX,CAAC;AAED,MAAMQ,YAAY,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAK;EACnC,IAAID,GAAG,KAAKC,IAAI,EAAE;IACjB,OAAO,EAAE;EACV;EAEA,MAAMC,EAAE,GAAGD,IAAI,CAACE,KAAK;EAErB,MAAMC,SAAS,GAAGC,CAAC,IAAI;IACtB,IAAI,CAACA,CAAC,EAAE,OAAO/E,SAAS;IACxB,MAAMgF,CAAC,GAAGD,CAAC,CAACF,KAAK;IACjB,IAAIG,CAAC,EAAE;MACN,IAAIA,CAAC,CAAC,CAAC,CAAC,IAAIJ,EAAE,CAAC,CAAC,CAAC,IAAII,CAAC,CAAC,CAAC,CAAC,IAAIJ,EAAE,CAAC,CAAC,CAAC,EAAE;QACnC,MAAMK,IAAI,GAAGR,YAAY,CAACM,CAAC,EAAEJ,IAAI,CAAC;QAClC,IAAIM,IAAI,EAAE;UACTA,IAAI,CAACC,IAAI,CAACH,CAAC,CAAC;UACZ,OAAOE,IAAI;QACZ;MACD;IACD;IACA,OAAOjF,SAAS;EACjB,CAAC;EAED,IAAIoC,KAAK,CAAC+C,OAAO,CAACT,GAAG,CAAC,EAAE;IACvB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,GAAG,CAAC3E,MAAM,EAAEqF,CAAC,EAAE,EAAE;MACpC,MAAMC,WAAW,GAAGP,SAAS,CAACJ,GAAG,CAACU,CAAC,CAAC,CAAC;MACrC,IAAIC,WAAW,KAAKrF,SAAS,EAAE,OAAOqF,WAAW;IAClD;EACD,CAAC,MAAM,IAAIX,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC1C,MAAMY,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACZ,GAAG,CAAC;IAC7B,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,IAAI,CAACvF,MAAM,EAAEqF,CAAC,EAAE,EAAE;MACrC,MAAMI,KAAK,GAAGd,GAAG,CAACY,IAAI,CAACF,CAAC,CAAC,CAAC;MAC1B,IAAIhD,KAAK,CAAC+C,OAAO,CAACK,KAAK,CAAC,EAAE;QACzB,MAAMC,UAAU,GAAGhB,YAAY,CAACe,KAAK,EAAEb,IAAI,CAAC;QAC5C,IAAIc,UAAU,KAAKzF,SAAS,EAAE,OAAOyF,UAAU;MAChD,CAAC,MAAM,IAAID,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC9C,MAAMH,WAAW,GAAGP,SAAS,CAACU,KAAK,CAAC;QACpC,IAAIH,WAAW,KAAKrF,SAAS,EAAE,OAAOqF,WAAW;MAClD;IACD;EACD;AACD,CAAC;AAED,MAAMK,KAAK,GAAG,IAAI5H,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;AAErC,MAAM6H,kBAAkB,SAAStJ,MAAM,CAAC;EACvC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAOuJ,MAAMA,CACZC,UAAU,EACVC,OAAO,EACPxG,OAAO,EACPyG,wBAAwB,EAEvB;IAAA,IADDC,YAAY,GAAAlG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAEpB,MAAMmG,UAAU,GAAGN,kBAAkB,CAACO,iBAAiB,CACtDL,UAAU,EACVC,OAAO,EACPC,wBAAwB,EACxBC,YACD,CAAC;IACD,OAAO,IAAIL,kBAAkB,CAAC;MAC7BM,UAAU;MACVJ,UAAU;MACVC,OAAO;MACPxG;IACD,CAAC,CAAC;EACH;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC6G,WAAWA,CAAAC,KAAA,EAA+C;IAAA,IAA9C;MAAEH,UAAU;MAAEJ,UAAU;MAAEC,OAAO;MAAExG;IAAQ,CAAC,GAAA8G,KAAA;IACvD,KAAK,CAAC9J,0BAA0B,EAAE,IAAI,EAAEuJ,UAAU,IAAIA,UAAU,CAACQ,KAAK,CAAC;;IAEvE;IACA;IACA,IAAI,CAACC,WAAW,GAAGL,UAAU;IAC7B;IACA,IAAI,CAACJ,UAAU,GAAGA,UAAU;IAC5B;IACA,IAAI,CAACU,QAAQ,GAAGT,OAAO;IACvB,IAAI,CAACU,QAAQ,GAAGlH,OAAO;IACvB,IAAI,CAACmH,WAAW,GAAGZ,UAAU,IAAIA,UAAU,CAACY,WAAW;EACxD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,iBAAiBA,CAACxG,MAAM,EAAE;IACzB,MAAM,IAAIQ,KAAK,CAAC,oBAAoB,CAAC;EACtC;;EAEA;AACD;AACA;EACCiG,cAAcA,CAAA,EAAG;IAChB,OAAOjB,KAAK;EACb;EAEA,IAAII,OAAOA,CAAA,EAAG;IACb,OAAO1D,KAAK,CAACC,IAAI,CAAC,IAAI,CAACkE,QAAQ,CAAC;EACjC;;EAEA;AACD;AACA;EACCN,UAAUA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACK,WAAW;EACxB;;EAEA;AACD;AACA;AACA;EACCnE,kBAAkBA,CAAC5C,gBAAgB,EAAE;IACpC,OACC,IAAI,CAACsG,UAAU,CAAC1D,kBAAkB,CAAC5C,gBAAgB,CAAC,GACnD,MAAK,IAAI,CAACgH,QAAQ,CAACK,IAAI,GAAG,CAAE,UAAS;EAExC;;EAEA;AACD;AACA;AACA;EACCC,QAAQA,CAACC,OAAO,EAAE;IACjB,OAAO,IAAI,CAACjB,UAAU,CAACgB,QAAQ,CAACC,OAAO,CAAC;EACzC;;EAEA;AACD;AACA;EACCC,gBAAgBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAClB,UAAU,CAACkB,gBAAgB,CAAC,CAAC;EAC1C;;EAEA;AACD;AACA;AACA;EACCC,6BAA6BA,CAAC9H,WAAW,EAAE;IAC1C,OAAO,IAAI,CAAC2G,UAAU,CAACmB,6BAA6B,CAAC9H,WAAW,CAAC;EAClE;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC+H,KAAKA,CAACH,OAAO,EAAEI,WAAW,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,QAAQ,EAAE;IACnD,MAAM;MAAExB;IAAW,CAAC,GAAG,IAAI;IAC3B,IAAI,CAACyB,SAAS,GAAG;MAChBC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAI;MACfC,cAAc,EAAE5B,UAAU,CAACyB,SAAS,CAACG,cAAc;MACnDC,eAAe,EAAE7B,UAAU,CAACyB,SAAS,CAACI,eAAe;MACrDC,gBAAgB,EAAE,IAAI/K,OAAO,CAAC,CAAC;MAC/BgL,mBAAmB,EAAE,IAAIhL,OAAO,CAAC,CAAC;MAClCiL,mBAAmB,EAAE,IAAIjL,OAAO,CAAC,CAAC;MAClCkL,oBAAoB,EAAE,IAAIhK,GAAG,CAAC,CAAC;MAC/BiK,MAAM,EAAE/H;IACT,CAAC;IACD,IAAI,CAAC0C,SAAS,GAAGmD,UAAU,CAACnD,SAAS;IACrC,IAAI,CAACsF,0BAA0B,CAAC,CAAC;IACjC,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAE7B,KAAK,MAAM1F,CAAC,IAAI,IAAI,CAACgE,QAAQ,EAAE;MAC9B;MACA,IAAI,CAAChE,CAAC,CAAC+E,SAAS,CAACE,SAAS,EAAE;QAC3B,IAAI,CAACF,SAAS,CAACE,SAAS,GAAG,KAAK;MACjC;;MAEA;MACA,KAAK,MAAMU,CAAC,IAAI3F,CAAC,CAAC4F,YAAY,CAACC,MAAM,CACpCC,GAAG,IACF,EAAEA,GAAG,YAAY5L,uBAAuB,CAAC,IACzC,CAAC,IAAI,CAAC8J,QAAQ,CAAC/E,GAAG,CAAC0F,WAAW,CAAChI,WAAW,CAACoJ,SAAS,CAACD,GAAG,CAAC,CAC3D,CAAC,EAAE;QACF,IAAI,CAACF,YAAY,CAACjD,IAAI,CAACgD,CAAC,CAAC;MAC1B;MACA;MACA,KAAK,MAAMA,CAAC,IAAI3F,CAAC,CAACgG,MAAM,EAAE;QACzB,IAAI,CAACA,MAAM,CAACrD,IAAI,CAACgD,CAAC,CAAC;MACpB;;MAEA;MACA,MAAMM,QAAQ,GAAGjG,CAAC,CAACkG,WAAW,CAAC,CAAC;MAChC,IAAID,QAAQ,KAAKxI,SAAS,EAAE;QAC3B,KAAK,MAAM0I,OAAO,IAAIF,QAAQ,EAAE;UAC/B,IAAI,CAACG,UAAU,CAACD,OAAO,CAAC;QACzB;MACD;;MAEA;MACA,MAAME,MAAM,GAAGrG,CAAC,CAACsG,SAAS,CAAC,CAAC;MAC5B,IAAID,MAAM,KAAK5I,SAAS,EAAE;QACzB,KAAK,MAAM8I,KAAK,IAAIF,MAAM,EAAE;UAC3B,IAAI,CAACG,QAAQ,CAACD,KAAK,CAAC;QACrB;MACD;;MAEA;MACA,IAAIvG,CAAC,CAAC+E,SAAS,CAACQ,oBAAoB,EAAE;QACrC,MAAMA,oBAAoB,GAAG,IAAI,CAACR,SAAS,CAACQ,oBAAoB;QAChE,IAAIA,oBAAoB,KAAK9H,SAAS,EAAE;UACvC,KAAK,MAAMgJ,IAAI,IAAIzG,CAAC,CAAC+E,SAAS,CAACQ,oBAAoB,EAAE;YACpDA,oBAAoB,CAAC7G,GAAG,CAAC+H,IAAI,CAAC;UAC/B;QACD;MACD,CAAC,MAAM;QACN,IAAI,CAAC1B,SAAS,CAACQ,oBAAoB,GAAG9H,SAAS;MAChD;;MAEA;MACA,IAAIuC,CAAC,CAAC+E,SAAS,CAACS,MAAM,EAAE;QACvB,IAAI,IAAI,CAACT,SAAS,CAACS,MAAM,KAAK/H,SAAS,EAAE;UACxC,IAAI,CAACsH,SAAS,CAACS,MAAM,GAAGxC,MAAM,CAACK,MAAM,CAAC,IAAI,CAAC;QAC5C;QACAL,MAAM,CAAC0D,MAAM,CAAC,IAAI,CAAC3B,SAAS,CAACS,MAAM,EAAExF,CAAC,CAAC+E,SAAS,CAACS,MAAM,CAAC;MACzD;MACA,IAAIxF,CAAC,CAAC+E,SAAS,CAAC4B,UAAU,EAAE;QAC3B,IAAI,IAAI,CAAC5B,SAAS,CAAC4B,UAAU,KAAKlJ,SAAS,EAAE;UAC5C,IAAI,CAACsH,SAAS,CAAC4B,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;QACtC;QACA,KAAK,MAAM,CAACC,GAAG,EAAE5D,KAAK,CAAC,IAAIjD,CAAC,CAAC+E,SAAS,CAAC4B,UAAU,EAAE;UAClD,IAAI,CAAC5B,SAAS,CAAC4B,UAAU,CAACjF,GAAG,CAACmF,GAAG,EAAE5D,KAAK,CAAC;QAC1C;MACD;IACD;IACA6B,QAAQ,CAAC,CAAC;EACX;;EAEA;AACD;AACA;AACA;EACCT,IAAIA,CAAC5F,IAAI,EAAE;IACV;IACA,IAAI4F,IAAI,GAAG,CAAC;IACZ,KAAK,MAAM1G,MAAM,IAAI,IAAI,CAACqG,QAAQ,EAAE;MACnCK,IAAI,IAAI1G,MAAM,CAAC0G,IAAI,CAAC5F,IAAI,CAAC;IAC1B;IACA,OAAO4F,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCyC,wBAAwBA,CAACxD,UAAU,EAAEyD,UAAU,EAAEhK,OAAO,EAAEJ,WAAW,EAAE;IACtE;IACA,MAAMqK,IAAI,GAAG,EAAE;IACf;IACA,MAAMC,eAAe,GAAG,IAAIL,GAAG,CAAC,CAAC;;IAEjC;AACF;AACA;AACA;IACE,MAAMM,sBAAsB,GAAGvJ,MAAM,IAAI;MACxC,IAAIwJ,WAAW,GAAGtH,KAAK,CAACC,IAAI,CAACnD,WAAW,CAACyK,sBAAsB,CAACzJ,MAAM,CAAC,CAAC;MACxE,IAAIA,MAAM,KAAK2F,UAAU,EAAE;QAC1B,KAAK,MAAM+D,CAAC,IAAI1K,WAAW,CAACyK,sBAAsB,CAAC,IAAI,CAAC,EACvDD,WAAW,CAACxE,IAAI,CAAC0E,CAAC,CAAC;MACrB;MACA;AACH;AACA;MACG,MAAM1F,UAAU,GAAGwF,WAAW,CAC5BtB,MAAM,CAACyB,UAAU,IAAI;QACrB,IAAI,EAAEA,UAAU,CAACC,UAAU,YAAYrN,uBAAuB,CAAC,EAC9D,OAAO,KAAK;QACb,OACCoN,UAAU,IACVA,UAAU,CAACE,oBAAoB,KAAK7J,MAAM,IAC1C2J,UAAU,CAAC3J,MAAM,IACjB2J,UAAU,CAACG,cAAc,CAAC1K,OAAO,CAAC;MAEpC,CAAC,CAAC,CACD2K,GAAG,CAACJ,UAAU,IAAI;QAClB,MAAMxB,GAAG,GAAG;QACXwB,UAAU,CAACC,UACX;QACD,OAAO;UACND,UAAU;UACVK,WAAW,EAAE7B,GAAG,CAAC6B,WAAW;UAC5BC,UAAU,EAAE9B,GAAG,CAACxD,KAAK,IAAIwD,GAAG,CAACxD,KAAK,CAAC,CAAC;QACrC,CAAC;MACF,CAAC,CAAC;MACH;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGX,UAAU,CAACkG,IAAI,CAACvN,iBAAiB,CAAC6B,aAAa,EAAEC,YAAY,CAAC,CAAC;MAC/D;MACA,MAAM0L,aAAa,GAAG,IAAIlB,GAAG,CAAC,CAAC;MAC/B,KAAK,MAAM;QAAEU;MAAW,CAAC,IAAI3F,UAAU,EAAE;QACxC,MAAMoG,gBAAgB,GAAGnN,aAAa,CAACmC,OAAO,EAAE0F,CAAC,IAChD6E,UAAU,CAACG,cAAc,CAAChF,CAAC,CAC5B,CAAC;QACD,IAAIsF,gBAAgB,KAAK,KAAK,EAAE;QAChC,MAAMpK,MAAM,GAAG2J,UAAU,CAAC3J,MAAM;QAChC,MAAMqK,KAAK,GAAGF,aAAa,CAACzI,GAAG,CAAC1B,MAAM,CAAC;QACvC,IAAIqK,KAAK,KAAKvK,SAAS,EAAE;UACxBqK,aAAa,CAACpG,GAAG,CAAC/D,MAAM,EAAE;YAAE2J,UAAU;YAAES;UAAiB,CAAC,CAAC;UAC3D;QACD;QACAC,KAAK,CAACD,gBAAgB,GAAGhN,6BAA6B,CACrDiN,KAAK,CAACD,gBAAgB,EACtBA,gBAAgB,EAChBhL,OACD,CAAC;MACF;MACA,OAAO+K,aAAa,CAACG,MAAM,CAAC,CAAC;IAC9B,CAAC;;IAED;AACF;AACA;AACA;AACA;IACE,MAAMC,WAAW,GAAGA,CAACZ,UAAU,EAAES,gBAAgB,KAAK;MACrD,MAAMpK,MAAM,GAAG2J,UAAU,CAAC3J,MAAM;MAChC,IAAI,CAACA,MAAM,EAAE;MACb,MAAMwK,aAAa,GAAGlB,eAAe,CAAC5H,GAAG,CAAC1B,MAAM,CAAC;MACjD,IAAIwK,aAAa,KAAK,IAAI,EAAE;QAC3B;MACD;MACA,IAAIpB,UAAU,CAAC9H,GAAG,CAACtB,MAAM,CAAC,EAAE;QAC3BsJ,eAAe,CAACvF,GAAG,CAAC/D,MAAM,EAAE,IAAI,CAAC;QACjC,IAAIoK,gBAAgB,KAAK,IAAI,EAAE;UAC9B,MAAM,IAAI5J,KAAK,CACb,oDAAmDR,MAAM,CAAC+F,UAAU,CAAC,CAAE,OAAM,IAAI,CAACJ,UAAU,CAACI,UAAU,CAAC,CAAE,KAAI1I,wBAAwB,CACtI+M,gBACD,CAAE,4BACH,CAAC;QACF;QACA,MAAMK,OAAO,GAAGlB,sBAAsB,CAACvJ,MAAM,CAAC;QAC9C,KAAK,MAAM;UAAE2J,UAAU;UAAES;QAAiB,CAAC,IAAIK,OAAO,EACrDF,WAAW,CAACZ,UAAU,EAAES,gBAAgB,CAAC;QAC1Cf,IAAI,CAACrE,IAAI,CAAC;UACTlE,IAAI,EAAE,cAAc;UACpBd,MAAM,EAAE2J,UAAU,CAAC3J,MAAM;UACzBoK;QACD,CAAC,CAAC;MACH,CAAC,MAAM;QACN,IAAII,aAAa,KAAK1K,SAAS,EAAE;UAChC,MAAM4K,uBAAuB,GAAGpN,wBAAwB,CACvD8M,gBAAgB,EAChBI,aAAa,EACbpL,OACD,CAAC;UACD,IAAIsL,uBAAuB,KAAK,KAAK,EAAE;UACvCN,gBAAgB,GAAGM,uBAAuB;UAC1CpB,eAAe,CAACvF,GAAG,CAClB4F,UAAU,CAAC3J,MAAM,EACjB5C,6BAA6B,CAC5BoN,aAAa,EACbJ,gBAAgB,EAChBhL,OACD,CACD,CAAC;QACF,CAAC,MAAM;UACNkK,eAAe,CAACvF,GAAG,CAAC4F,UAAU,CAAC3J,MAAM,EAAEoK,gBAAgB,CAAC;QACzD;QACA,IAAIf,IAAI,CAACxJ,MAAM,GAAG,CAAC,EAAE;UACpB,MAAM8K,QAAQ,GAAGtB,IAAI,CAACA,IAAI,CAACxJ,MAAM,GAAG,CAAC,CAAC;UACtC,IACC8K,QAAQ,CAAC7J,IAAI,KAAK,UAAU,IAC5B6J,QAAQ,CAAC3K,MAAM,KAAK2J,UAAU,CAAC3J,MAAM,EACpC;YACD2K,QAAQ,CAACP,gBAAgB,GAAGjN,qBAAqB,CAChDwN,QAAQ,CAACP,gBAAgB,EACzBA,gBAAgB,EAChBhL,OACD,CAAC;YACD;UACD;QACD;QACAiK,IAAI,CAACrE,IAAI,CAAC;UACTlE,IAAI,EAAE,UAAU;UAChB,IAAId,MAAMA,CAAA,EAAG;YACZ;YACA;YACA;YACA,OAAO2J,UAAU,CAAC3J,MAAM;UACzB,CAAC;UACDoK;QACD,CAAC,CAAC;MACH;IACD,CAAC;IAEDd,eAAe,CAACvF,GAAG,CAAC4B,UAAU,EAAE,IAAI,CAAC;IACrC,MAAM8E,OAAO,GAAGlB,sBAAsB,CAAC5D,UAAU,CAAC;IAClD,KAAK,MAAM;MAAEgE,UAAU;MAAES;IAAiB,CAAC,IAAIK,OAAO,EACrDF,WAAW,CAACZ,UAAU,EAAES,gBAAgB,CAAC;IAC1Cf,IAAI,CAACrE,IAAI,CAAC;MACTlE,IAAI,EAAE,cAAc;MACpBd,MAAM,EAAE2F,UAAU;MAClByE,gBAAgB,EAAE;IACnB,CAAC,CAAC;IAEF,OAAOf,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC,OAAOrD,iBAAiBA,CACvBL,UAAU,EACVC,OAAO,EACPC,wBAAwB,EAEvB;IAAA,IADDC,YAAY,GAAAlG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAEpB,MAAMgL,uBAAuB,GAAG/N,iBAAiB,CAACgO,gBAAgB,CACjElF,UAAU,CAACmF,OAAO,EAClBjF,wBACD,CAAC;IACD,IAAI5B,WAAW,GAAG,EAAE;IACpB,KAAK,MAAMjE,MAAM,IAAI4F,OAAO,EAAE;MAC7B3B,WAAW,CAACe,IAAI,CAAC4F,uBAAuB,CAAC5K,MAAM,CAAC+F,UAAU,CAAC,CAAC,CAAC,CAAC;IAC/D;IACA9B,WAAW,CAACiG,IAAI,CAAC,CAAC;IAClB,MAAMa,IAAI,GAAGnO,UAAU,CAACkJ,YAAY,CAAC;IACrCiF,IAAI,CAACC,MAAM,CAAC/G,WAAW,CAAClG,IAAI,CAAC,GAAG,CAAC,CAAC;IAClC,OAAO4H,UAAU,CAACI,UAAU,CAAC,CAAC,GAAG,GAAG,GAAGgF,IAAI,CAACE,MAAM,CAAC,KAAK,CAAC;EAC1D;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,oBAAoBA,CACnBzD,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBwD,iBAAiB,EAChB;IACD,KAAK,MAAMnL,MAAM,IAAI,IAAI,CAACqG,QAAQ,EAAE;MACnCrG,MAAM,CAACkL,oBAAoB,CAC1BzD,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBwD,iBACD,CAAC;IACF;EACD;;EAEA;AACD;AACA;AACA;EACCC,cAAcA,CAAAC,KAAA,EAOX;IAAA,IAPY;MACdC,mBAAmB;MACnBhM,eAAe;MACfN,WAAW;MACXuM,UAAU;MACVnM,OAAO,EAAEoM,iBAAiB;MAC1BC;IACD,CAAC,GAAAJ,KAAA;IACA;IACA,MAAMK,mBAAmB,GAAG,IAAI9N,GAAG,CAAC,CAAC;IACrC,MAAMwB,OAAO,GAAGlC,gBAAgB,CAACsO,iBAAiB,EAAE,IAAI,CAAClF,QAAQ,CAAC;IAElE,MAAMjH,gBAAgB,GAAGC,eAAe,CAACD,gBAAgB;IACzD;IACA,MAAM,CAACsM,eAAe,EAAExM,eAAe,CAAC,GAAG,IAAI,CAACyM,mBAAmB,CAClE5M,WAAW,EACXI,OACD,CAAC;;IAED;IACA;IACA,MAAMG,sBAAsB,GAAG,IAAI3B,GAAG,CAAC,CAAC;;IAExC;IACA;IACA,KAAK,MAAMqB,IAAI,IAAIE,eAAe,CAACmL,MAAM,CAAC,CAAC,EAAE;MAC5C,IAAI,CAACuB,cAAc,CAClB1M,eAAe,EACfF,IAAI,EACJqM,mBAAmB,EACnBhM,eAAe,EACfN,WAAW,EACXuM,UAAU,EACVnM,OAAO,EACPqM,qBACD,CAAC;IACF;;IAEA;IACA,MAAMK,YAAY,GAAG,IAAIlO,GAAG,CAACD,cAAc,CAAC;IAC5C;IACA,MAAMiK,oBAAoB,GAAG,IAAIhK,GAAG,CAAC,CAAC;;IAEtC;IACA;IACA,MAAMmO,oBAAoB,GAAG,IAAI9C,GAAG,CAAC,CAAC;IACtC;AACF;AACA;AACA;AACA;IACE,MAAM+C,uBAAuB,GAAGA,CAAChM,MAAM,EAAEqE,EAAE,KAAK;MAC/C,MAAM6E,GAAG,GAAI,GAAElJ,MAAO,IAAGqE,EAAG,EAAC;MAC7B,IAAIpF,IAAI,GAAG8M,oBAAoB,CAACrK,GAAG,CAACwH,GAAG,CAAC;MACxC,IAAIjK,IAAI,KAAKa,SAAS,EAAE;QACvBb,IAAI,GAAG;UACNgN,SAAS,EAAE,IAAIrO,GAAG,CAAC,CAAC;UACpBsO,oBAAoB,EAAE,IAAItO,GAAG,CAAC;QAC/B,CAAC;QACDmO,oBAAoB,CAAChI,GAAG,CAACmF,GAAG,EAAEjK,IAAI,CAAC;MACpC;MACA,OAAOA,IAAI;IACZ,CAAC;;IAED;IACA,MAAMkN,aAAa,GAAG,IAAIvO,GAAG,CAAC,CAAC;;IAE/B;IACA,KAAK,MAAMqB,IAAI,IAAI0M,eAAe,EAAE;MACnC,IAAI1M,IAAI,CAAC6B,IAAI,KAAK,cAAc,EAAE;QACjC;QACA,IAAI7B,IAAI,CAACmN,WAAW,EAAE;UACrBD,aAAa,CAACpL,GAAG,CAAC9B,IAAI,CAACmN,WAAW,CAAC;QACpC;;QAEA;QACA;QACA;QACA,MAAMC,eAAe,GAAG,IAAIC,OAAO,CAAC,CAAC;QACrC,MAAMC,wBAAwB,GAAG7I,KAAK,IAAI;UACzC,MAAM8I,UAAU,GAAGH,eAAe,CAAC3K,GAAG,CAACgC,KAAK,CAAC;UAC7C,IAAI8I,UAAU,KAAK1M,SAAS,EAAE,OAAO0M,UAAU;UAC/C,MAAMC,qBAAqB,GAAG,EAAE;UAChC,KAAK,MAAMC,UAAU,IAAIhJ,KAAK,CAACQ,WAAW,EAAE;YAC3C,IAAIwI,UAAU,CAAC5L,IAAI,KAAK,OAAO,EAAE;YACjC,MAAM6L,KAAK,GAAGD,UAAU,CAACC,KAAK;YAC9B,IACC,CAACA,KAAK,CAAC7L,IAAI,KAAK,kBAAkB,IACjC6L,KAAK,CAAC7L,IAAI,KAAK,iBAAiB,KACjC6L,KAAK,CAACC,UAAU,EACf;cACDH,qBAAqB,CAACzH,IAAI,CAAC;gBAC1BL,KAAK,EAAEgI,KAAK,CAACC,UAAU,CAACjI,KAAK;gBAC7Bf,SAAS,EAAE8I,UAAU,CAAC9I;cACvB,CAAC,CAAC;YACH;UACD;UACAyI,eAAe,CAACtI,GAAG,CAACL,KAAK,EAAE+I,qBAAqB,CAAC;UACjD,OAAOA,qBAAqB;QAC7B,CAAC;;QAED;QACA,IAAIxN,IAAI,CAAC4N,WAAW,EAAE;UACrB,KAAK,MAAM7J,SAAS,IAAI/D,IAAI,CAAC4N,WAAW,CAACC,OAAO,EAAE;YACjD,MAAM7L,IAAI,GAAG+B,SAAS,CAAC+C,UAAU,CAAC9E,IAAI;YACtC,IAAIhF,kBAAkB,CAAC8Q,iBAAiB,CAAC9L,IAAI,CAAC,EAAE;cAC/C,MAAM+L,KAAK,GAAG/Q,kBAAkB,CAACgR,oBAAoB,CAAChM,IAAI,CAAC;cAC3D,IAAI,CAAC+L,KAAK,EAAE;cACZ,MAAME,cAAc,GAAGvB,eAAe,CAACqB,KAAK,CAACG,KAAK,CAAC;cACnD,IAAID,cAAc,CAACpM,IAAI,KAAK,WAAW,EACtC,MAAM,IAAIN,KAAK,CAAC,6CAA6C,CAAC;cAC/D,MAAMuC,OAAO,GAAGhE,eAAe,CAC9BC,WAAW,EACXkO,cAAc,EACdF,KAAK,CAAC3M,GAAG,EACTlB,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtB,KAAK,EACLN,IAAI,CAACe,MAAM,CAACwC,SAAS,CAAC/C,mBAAmB,EACzC,IACD,CAAC;cACD,IAAI,CAACsD,OAAO,CAAC1C,GAAG,EAAE;cAClB,MAAM;gBAAE4L,SAAS;gBAAEC;cAAqB,CAAC,GACxCF,uBAAuB,CACtBjJ,OAAO,CAAC9D,IAAI,CAACe,MAAM,CAAC+F,UAAU,CAAC,CAAC,EAChC,MAAM,IAAIhD,OAAO,GAAGA,OAAO,CAAC9B,IAAI,GAAG,EACpC,CAAC;cACF,KAAK,MAAMmM,IAAI,IAAIb,wBAAwB,CAACvJ,SAAS,CAACb,IAAI,CAAC,EAAE;gBAC5D,IACCiL,IAAI,CAACzI,KAAK,CAAC,CAAC,CAAC,IAAI3B,SAAS,CAAC+C,UAAU,CAACpB,KAAK,CAAC,CAAC,CAAC,IAC9CyI,IAAI,CAACzI,KAAK,CAAC,CAAC,CAAC,IAAI3B,SAAS,CAAC+C,UAAU,CAACpB,KAAK,CAAC,CAAC,CAAC,EAC7C;kBACD,KAAK,MAAMhB,QAAQ,IAAIyJ,IAAI,CAACxJ,SAAS,EAAE;oBACtCqI,SAAS,CAAClL,GAAG,CAAC4C,QAAQ,CAAC1C,IAAI,CAAC;kBAC7B;gBACD;cACD;cACAoC,eAAe,CACdL,SAAS,CAACb,IAAI,EACd8J,SAAS,EACTC,oBAAoB,EACpBC,aACD,CAAC;YACF,CAAC,MAAM;cACNL,YAAY,CAAC/K,GAAG,CAACE,IAAI,CAAC;YACvB;UACD;QACD;MACD;IACD;;IAEA;IACA,KAAK,MAAMhC,IAAI,IAAIE,eAAe,CAACmL,MAAM,CAAC,CAAC,EAAE;MAC5C,MAAM;QAAE2B,SAAS,EAAEoB;MAAyB,CAAC,GAAGrB,uBAAuB,CACtE/M,IAAI,CAACe,MAAM,CAAC+F,UAAU,CAAC,CAAC,EACxB,EACD,CAAC;MACD,QAAQ9G,IAAI,CAAC6B,IAAI;QAChB,KAAK,cAAc;UAAE;YACpB,KAAK,MAAM6C,QAAQ,IAAI1E,IAAI,CAACmN,WAAW,CAACxI,SAAS,EAAE;cAClD,MAAM3C,IAAI,GAAG0C,QAAQ,CAAC1C,IAAI;cAC1B,MAAM;gBAAEgL,SAAS;gBAAEC;cAAqB,CAAC,GAAGF,uBAAuB,CAClE/M,IAAI,CAACe,MAAM,CAAC+F,UAAU,CAAC,CAAC,EACxB9E,IACD,CAAC;cACD,IAAI6K,YAAY,CAACxK,GAAG,CAACL,IAAI,CAAC,IAAIgL,SAAS,CAAC3K,GAAG,CAACL,IAAI,CAAC,EAAE;gBAClD,MAAM+C,UAAU,GAAGF,gBAAgB,CAACH,QAAQ,CAAC;gBAC7C,KAAK,MAAM2J,GAAG,IAAItJ,UAAU,EAAE;kBAC7BX,eAAe,CACdiK,GAAG,CAACnL,IAAI,EACR8J,SAAS,EACTC,oBAAoB,EACpBC,aACD,CAAC;gBACF;gBACA,MAAMoB,OAAO,GAAG,IAAI,CAACC,WAAW,CAC/BvM,IAAI,EACJ6K,YAAY,EACZG,SAAS,EACThN,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAChD,CAAC;gBACDyM,YAAY,CAAC/K,GAAG,CAACwM,OAAO,CAAC;gBACzBtO,IAAI,CAACiE,aAAa,CAACa,GAAG,CAAC9C,IAAI,EAAEsM,OAAO,CAAC;gBACrC3F,oBAAoB,CAAC7G,GAAG,CAACwM,OAAO,CAAC;gBACjC,MAAME,MAAM,GAAGxO,IAAI,CAACwO,MAAM;gBAC1B,MAAMC,cAAc,GAAG,IAAI9P,GAAG,CAC7BoG,UAAU,CAAC+F,GAAG,CAACjF,CAAC,IAAIA,CAAC,CAACiB,UAAU,CAAC,CAACzB,MAAM,CAACX,QAAQ,CAACM,WAAW,CAC9D,CAAC;gBACD,KAAK,MAAM8B,UAAU,IAAI2H,cAAc,EAAE;kBACxC,MAAM5I,CAAC,GAAGiB,UAAU,CAACpB,KAAK;kBAC1B,MAAMI,IAAI,GAAGR,YAAY,CAACtF,IAAI,CAACuF,GAAG,EAAEuB,UAAU,CAAC;kBAC/C,IAAIhB,IAAI,IAAIA,IAAI,CAAClF,MAAM,GAAG,CAAC,EAAE;oBAC5B,MAAM8N,aAAa,GAClB5I,IAAI,CAAC,CAAC,CAAC,CAACjE,IAAI,KAAK,mBAAmB,IACpCiE,IAAI,CAAC,CAAC,CAAC,CAAC6I,IAAI,KAAK7I,IAAI,CAAC,CAAC,CAAC,GACrBA,IAAI,CAAC,CAAC,CAAC,GACPA,IAAI,CAAC,CAAC,CAAC;oBACX,IACC4I,aAAa,CAAC7M,IAAI,KAAK,UAAU,IACjC6M,aAAa,CAACE,SAAS,EACtB;sBACDJ,MAAM,CAACK,MAAM,CAAChJ,CAAC,CAAC,CAAC,CAAC,EAAG,KAAIyI,OAAQ,EAAC,CAAC;sBACnC;oBACD;kBACD;kBACAE,MAAM,CAACM,OAAO,CAACjJ,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEyI,OAAO,CAAC;gBACxC;cACD,CAAC,MAAM;gBACNzB,YAAY,CAAC/K,GAAG,CAACE,IAAI,CAAC;gBACtBhC,IAAI,CAACiE,aAAa,CAACa,GAAG,CAAC9C,IAAI,EAAEA,IAAI,CAAC;gBAClC2G,oBAAoB,CAAC7G,GAAG,CAACE,IAAI,CAAC;cAC/B;YACD;YACA,IAAID,mBAAmB;YACvB,IAAI/B,IAAI,CAACwD,qBAAqB,EAAE;cAC/BzB,mBAAmB,GAAG/B,IAAI,CAACiE,aAAa,CAACxB,GAAG,CAC3CzC,IAAI,CAACwD,qBACN,CAAC;YACF,CAAC,MAAM;cACNzB,mBAAmB,GAAG,IAAI,CAACwM,WAAW,CACrC,iBAAiB,EACjB1B,YAAY,EACZuB,wBAAwB,EACxBpO,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAChD,CAAC;cACDyM,YAAY,CAAC/K,GAAG,CAACC,mBAAmB,CAAC;YACtC;YACA/B,IAAI,CAAC+B,mBAAmB,GAAGA,mBAAmB;YAC9C4G,oBAAoB,CAAC7G,GAAG,CAACC,mBAAmB,CAAC;YAC7C;UACD;QACA,KAAK,UAAU;UAAE;YAChB,MAAMgN,YAAY,GAAG,IAAI,CAACR,WAAW,CACpC,EAAE,EACF1B,YAAY,EACZuB,wBAAwB,EACxBpO,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAChD,CAAC;YACDyM,YAAY,CAAC/K,GAAG,CAACiN,YAAY,CAAC;YAC9B/O,IAAI,CAACgC,IAAI,GAAG+M,YAAY;YACxBpG,oBAAoB,CAAC7G,GAAG,CAACiN,YAAY,CAAC;YACtC;UACD;MACD;MACA,IAAI/O,IAAI,CAACe,MAAM,CAACwC,SAAS,CAACzC,WAAW,KAAK,WAAW,EAAE;QACtD,MAAMkO,mBAAmB,GAAG,IAAI,CAACT,WAAW,CAC3C,iBAAiB,EACjB1B,YAAY,EACZuB,wBAAwB,EACxBpO,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAChD,CAAC;QACDyM,YAAY,CAAC/K,GAAG,CAACkN,mBAAmB,CAAC;QACrChP,IAAI,CAACsB,0BAA0B,GAAG0N,mBAAmB;QACrDrG,oBAAoB,CAAC7G,GAAG,CAACkN,mBAAmB,CAAC;MAC9C;MACA,IACChP,IAAI,CAACe,MAAM,CAACwC,SAAS,CAACzC,WAAW,KAAK,SAAS,IAC/Cd,IAAI,CAACe,MAAM,CAACwC,SAAS,CAAC0L,aAAa,KAAK,UAAU,EACjD;QACD,MAAMD,mBAAmB,GAAG,IAAI,CAACT,WAAW,CAC3C,kBAAkB,EAClB1B,YAAY,EACZuB,wBAAwB,EACxBpO,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAChD,CAAC;QACDyM,YAAY,CAAC/K,GAAG,CAACkN,mBAAmB,CAAC;QACrChP,IAAI,CAACmB,2BAA2B,GAAG6N,mBAAmB;QACtDrG,oBAAoB,CAAC7G,GAAG,CAACkN,mBAAmB,CAAC;MAC9C;MACA,IACChP,IAAI,CAACe,MAAM,CAACwC,SAAS,CAACzC,WAAW,KAAK,SAAS,IAC/C,CAACd,IAAI,CAACe,MAAM,CAACwC,SAAS,CAACzC,WAAW,EACjC;QACD,MAAMkO,mBAAmB,GAAG,IAAI,CAACT,WAAW,CAC3C,SAAS,EACT1B,YAAY,EACZuB,wBAAwB,EACxBpO,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAChD,CAAC;QACDyM,YAAY,CAAC/K,GAAG,CAACkN,mBAAmB,CAAC;QACrChP,IAAI,CAAC4B,wBAAwB,GAAGoN,mBAAmB;QACnDrG,oBAAoB,CAAC7G,GAAG,CAACkN,mBAAmB,CAAC;MAC9C;IACD;;IAEA;IACA,KAAK,MAAMhP,IAAI,IAAIE,eAAe,CAACmL,MAAM,CAAC,CAAC,EAAE;MAC5C,IAAIrL,IAAI,CAAC6B,IAAI,KAAK,cAAc,EAAE;QACjC,KAAK,MAAMkC,SAAS,IAAI/D,IAAI,CAAC4N,WAAW,CAACC,OAAO,EAAE;UACjD,MAAM7L,IAAI,GAAG+B,SAAS,CAAC+C,UAAU,CAAC9E,IAAI;UACtC,MAAM+L,KAAK,GAAG/Q,kBAAkB,CAACgR,oBAAoB,CAAChM,IAAI,CAAC;UAC3D,IAAI+L,KAAK,EAAE;YACV,MAAME,cAAc,GAAGvB,eAAe,CAACqB,KAAK,CAACG,KAAK,CAAC;YACnD,IAAID,cAAc,CAACpM,IAAI,KAAK,WAAW,EACtC,MAAM,IAAIN,KAAK,CAAC,6CAA6C,CAAC;YAC/D,MAAM2N,SAAS,GAAGtL,YAAY,CAC7B7D,WAAW,EACXkO,cAAc,EACdF,KAAK,CAAC3M,GAAG,EACTlB,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtByN,KAAK,CAACoB,IAAI,EACV,CAACpB,KAAK,CAACqB,YAAY,EACnBpP,IAAI,CAACe,MAAM,CAACwC,SAAS,CAAC/C,mBAAmB,EACzCuN,KAAK,CAACtN,OACP,CAAC;YACD,MAAMoF,CAAC,GAAG9B,SAAS,CAAC+C,UAAU,CAACpB,KAAK;YACpC,MAAM8I,MAAM,GAAGxO,IAAI,CAACwO,MAAM;YAC1B;YACAA,MAAM,CAACM,OAAO,CAACjJ,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEqJ,SAAS,CAAC;UAC1C;QACD;MACD;IACD;;IAEA;IACA;IACA,MAAMG,UAAU,GAAG,IAAIrF,GAAG,CAAC,CAAC;;IAE5B;IACA;IACA,MAAMsF,aAAa,GAAG,IAAI3Q,GAAG,CAAC,CAAC;IAE/B,MAAM4Q,QAAQ,GAAG;IAChBrP,eAAe,CAACuC,GAAG,CAAC,IAAI,CAACiE,UAAU,CACnC;IACD,MAAMlG,mBAAmB,GAAG+O,QAAQ,CAACxO,MAAM,CAACwC,SAAS,CAAC/C,mBAAmB;IACzE,MAAMyB,WAAW,GAAGlC,WAAW,CAACmC,cAAc,CAACqN,QAAQ,CAACxO,MAAM,CAAC;IAC/D,KAAK,MAAMoB,UAAU,IAAIF,WAAW,CAACuN,cAAc,EAAE;MACpD,MAAMxN,IAAI,GAAGG,UAAU,CAACH,IAAI;MAC5B,IAAIG,UAAU,CAACG,QAAQ,KAAK,KAAK,EAAE;MACnC,MAAMmB,IAAI,GAAGtB,UAAU,CAACQ,WAAW,CAAC9B,SAAS,EAAEV,OAAO,CAAC;MACvD,IAAI,CAACsD,IAAI,EAAE;QACV6L,aAAa,CAACxN,GAAG,CAACE,IAAI,CAAC;QACvB;MACD;MACAqN,UAAU,CAACvK,GAAG,CAACrB,IAAI,EAAErD,gBAAgB,IAAI;QACxC,IAAI;UACH,MAAM8O,SAAS,GAAGtL,YAAY,CAC7B7D,WAAW,EACXwP,QAAQ,EACR,CAACvN,IAAI,CAAC,EACN9B,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtB,KAAK,EACL,KAAK,EACLE,mBAAmB,EACnB,IACD,CAAC;UACD,OAAQ,MACP2B,UAAU,CAACsN,UAAU,CAAC,CAAC,GAAG,UAAU,GAAG,SACvC,OAAMP,SAAU,EAAC;QACnB,CAAC,CAAC,OAAOQ,CAAC,EAAE;UACXA,CAAC,CAACC,OAAO,IAAK,uCAAsC3N,IAAK,kBAAiByB,IAAK,IAAG;UAClF,MAAMiM,CAAC;QACR;MACD,CAAC,CAAC;IACH;IAEA,MAAME,MAAM,GAAG,IAAI9S,YAAY,CAAC,CAAC;;IAEjC;IACA,IACCiD,WAAW,CAACmC,cAAc,CAAC,IAAI,CAAC,CAAC2N,gBAAgB,CAACC,OAAO,CAAC3P,OAAO,CAAC,KAClElD,UAAU,CAAC8S,MAAM,EAChB;MACDH,MAAM,CAAC9N,GAAG,CAAE,sBAAqB,CAAC;MAClC8N,MAAM,CAAC9N,GAAG,CACTzB,eAAe,CAAC2P,2BAA2B,CAAC;QAC3CzH,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCkE;MACD,CAAC,CACF,CAAC;IACF;;IAEA;IACA,IAAI4C,UAAU,CAAC5H,IAAI,GAAG,CAAC,EAAE;MACxBgF,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAAC6S,OAAO,CAAC;MAC/CxD,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAAC8S,qBAAqB,CAAC;MAC7D,MAAMC,WAAW,GAAG,EAAE;MACtB,KAAK,MAAM,CAAClG,GAAG,EAAE5D,KAAK,CAAC,IAAIgJ,UAAU,EAAE;QACtCc,WAAW,CAACpK,IAAI,CACd,OAAMhI,YAAY,CAACkM,GAAG,CAAE,KAAI5J,eAAe,CAAC+P,iBAAiB,CAC7D/J,KAAK,CAACjG,gBAAgB,CACvB,CAAE,EACH,CAAC;MACF;MACAwP,MAAM,CAAC9N,GAAG,CAAE,gBAAe,CAAC;MAC5B8N,MAAM,CAAC9N,GAAG,CACR,GAAE1E,cAAc,CAAC8S,qBAAsB,IACvC,IAAI,CAAC3H,eACL,MAAK4H,WAAW,CAACrR,IAAI,CAAC,GAAG,CAAE,SAC7B,CAAC;IACF;;IAEA;IACA,IAAIwQ,aAAa,CAAC7H,IAAI,GAAG,CAAC,EAAE;MAC3BmI,MAAM,CAAC9N,GAAG,CACR,wBAAuBrC,qBAAqB,CAAC6P,aAAa,CAAE,IAC9D,CAAC;IACF;;IAEA;IACA,MAAMe,sBAAsB,GAAG,IAAIrG,GAAG,CAAC,CAAC;IACxC,KAAK,MAAMhK,IAAI,IAAIM,sBAAsB,EAAE;MAC1C,IAAIN,IAAI,CAACwD,qBAAqB,EAAE;MAChC,MAAM8M,KAAK,GAAG,EAAE;MAChB,MAAMrO,WAAW,GAAGlC,WAAW,CAACmC,cAAc,CAAClC,IAAI,CAACe,MAAM,CAAC;MAC3D,KAAK,MAAMoB,UAAU,IAAIF,WAAW,CAACuN,cAAc,EAAE;QACpD,IAAIrN,UAAU,CAACG,QAAQ,KAAK,KAAK,EAAE;QACnC,MAAMI,QAAQ,GAAGP,UAAU,CAACQ,WAAW,CAAC9B,SAAS,EAAEV,OAAO,CAAC;QAC3D,IAAIuC,QAAQ,EAAE;UACb,MAAMwM,SAAS,GAAGtL,YAAY,CAC7B7D,WAAW,EACXC,IAAI,EACJ,CAACmC,UAAU,CAACH,IAAI,CAAC,EACjB9B,eAAe,EACfC,OAAO,EACPC,gBAAgB,EAChBC,eAAe,EACfC,sBAAsB,EACtB,KAAK,EACLO,SAAS,EACTb,IAAI,CAACe,MAAM,CAACwC,SAAS,CAAC/C,mBAAmB,EACzC,IACD,CAAC;UACD8P,KAAK,CAACvK,IAAI,CACR,OAAMhI,YAAY,CAAC2E,QAAQ,CAAE,KAAIrC,eAAe,CAAC+P,iBAAiB,CAClElB,SACD,CAAE,EACH,CAAC;QACF;MACD;MACA,MAAMlN,IAAI,GAAGhC,IAAI,CAAC+B,mBAAmB;MACrC,MAAMwO,aAAa,GAClBD,KAAK,CAAC1P,MAAM,GAAG,CAAC,GACZ,GAAExD,cAAc,CAAC8S,qBAAsB,IAAGlO,IAAK,MAAKsO,KAAK,CAACxR,IAAI,CAC/D,GACA,CAAE,SAAQ,GACV,EAAE;MACN,IAAIwR,KAAK,CAAC1P,MAAM,GAAG,CAAC,EACnB6L,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAAC8S,qBAAqB,CAAC;MAC9DG,sBAAsB,CAACvL,GAAG,CACzB9E,IAAI,EACH;AACL,uBAAuBA,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAAC5C,gBAAgB,CAAE;AACxE,MAAM4B,IAAK;AACX,EAAE5E,cAAc,CAACoT,mBAAoB,IAAGxO,IAAK;AAC7C,EAAEuO,aAAc,EACb,CAAC;MACD9D,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAACoT,mBAAmB,CAAC;IAC5D;;IAEA;IACA,KAAK,MAAMxQ,IAAI,IAAI0M,eAAe,EAAE;MACnC,IAAI1M,IAAI,CAAC6B,IAAI,KAAK,cAAc,EAAE;QACjC,MAAM2M,MAAM,GAAG6B,sBAAsB,CAAC5N,GAAG,CAACzC,IAAI,CAAC;QAC/C,IAAI,CAACwO,MAAM,EAAE;QACboB,MAAM,CAAC9N,GAAG,CAAC0M,MAAM,CAAC;MACnB;IACD;IAEA,MAAMiC,kBAAkB,GAAG,EAAE;;IAE7B;IACA,KAAK,MAAMC,OAAO,IAAIhE,eAAe,EAAE;MACtC,IAAI1K,IAAI;MACR,IAAI2O,aAAa,GAAG,KAAK;MACzB,MAAM3Q,IAAI,GAAG0Q,OAAO,CAAC7O,IAAI,KAAK,WAAW,GAAG6O,OAAO,CAACE,MAAM,GAAGF,OAAO;MACpE,QAAQ1Q,IAAI,CAAC6B,IAAI;QAChB,KAAK,cAAc;UAAE;YACpB+N,MAAM,CAAC9N,GAAG,CACR,8BAA6B9B,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CAC3D5C,gBACD,CAAE,IACH,CAAC;YACDwP,MAAM,CAAC9N,GAAG,CAAC9B,IAAI,CAACwO,MAAM,CAAC;YACvB,IAAIxO,IAAI,CAACyQ,kBAAkB,EAAE;cAC5B,KAAK,MAAMI,CAAC,IAAI7Q,IAAI,CAACyQ,kBAAkB,EAAEA,kBAAkB,CAAC1K,IAAI,CAAC8K,CAAC,CAAC;YACpE;YACA,IAAI7Q,IAAI,CAACyM,mBAAmB,EAAE;cAC7B,KAAK,MAAM5G,CAAC,IAAI7F,IAAI,CAACyM,mBAAmB,EAAE;gBACzCA,mBAAmB,CAAC3K,GAAG,CAAC+D,CAAC,CAAC;cAC3B;YACD;YACA7D,IAAI,GAAGhC,IAAI,CAAC+B,mBAAmB;YAC/B;UACD;QACA,KAAK,UAAU;UAAE;YAChB6N,MAAM,CAAC9N,GAAG,CACR,yBAAwB9B,IAAI,CAACe,MAAM,CAACiC,kBAAkB,CACtD5C,gBACD,CAAE,IACH,CAAC;YACDqM,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAACT,OAAO,CAAC;YAC/C,MAAM;cAAEwO;YAAiB,CAAC,GACzB,yDAA2DuF,OAAQ;YACpE,MAAMI,SAAS,GAAGzQ,eAAe,CAAC0Q,0BAA0B,CAAC;cAC5DzE,UAAU;cACVnB,gBAAgB;cAChBhL,OAAO;cACPsM;YACD,CAAC,CAAC;YACF,IAAIqE,SAAS,KAAK,MAAM,EAAE;cACzBH,aAAa,GAAG,IAAI;cACpBf,MAAM,CAAC9N,GAAG,CAAE,OAAMgP,SAAU,OAAM,CAAC;YACpC;YACAlB,MAAM,CAAC9N,GAAG,CACR,OAAM9B,IAAI,CAACgC,IAAK,MAAK5E,cAAc,CAACT,OAAQ,IAAGqU,IAAI,CAACC,SAAS,CAC7D3E,UAAU,CAAC4E,WAAW,CAAClR,IAAI,CAACe,MAAM,CACnC,CAAE,IACH,CAAC;YACDiB,IAAI,GAAGhC,IAAI,CAACgC,IAAI;YAChB;UACD;QACA;UACC;UACA,MAAM,IAAIT,KAAK,CAAE,wCAAuCvB,IAAI,CAAC6B,IAAK,EAAC,CAAC;MACtE;MACA,IAAI7B,IAAI,CAACqB,0BAA0B,EAAE;QACpCoL,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAAC+T,yBAAyB,CAAC;QACjEvB,MAAM,CAAC9N,GAAG,CACR,SAAQ9B,IAAI,CAACsB,0BAA2B,mBAAkBlE,cAAc,CAAC+T,yBAA0B,IAAGnP,IAAK,OAC7G,CAAC;MACF;MACA,IAAIhC,IAAI,CAACiB,2BAA2B,EAAE;QACrCwL,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAAC+T,yBAAyB,CAAC;QACjEvB,MAAM,CAAC9N,GAAG,CACR,SAAQ9B,IAAI,CAACmB,2BAA4B,mBAAkB/D,cAAc,CAAC+T,yBAA0B,IAAGnP,IAAK,IAC9G,CAAC;MACF;MACA,IAAIhC,IAAI,CAAC0B,wBAAwB,EAAE;QAClC+K,mBAAmB,CAAC3K,GAAG,CAAC1E,cAAc,CAACgU,sBAAsB,CAAC;QAC9DxB,MAAM,CAAC9N,GAAG,CACR,SAAQ9B,IAAI,CAAC4B,wBAAyB,mBAAkBxE,cAAc,CAACgU,sBAAuB,IAAGpP,IAAK,IACxG,CAAC;MACF;MACA,IAAI2O,aAAa,EAAE;QAClBf,MAAM,CAAC9N,GAAG,CAAC,KAAK,CAAC;MAClB;IACD;IAEA,MAAMuP,IAAI,GAAG,IAAIrH,GAAG,CAAC,CAAC;IACtB,IAAIyG,kBAAkB,CAAC7P,MAAM,GAAG,CAAC,EAChCyQ,IAAI,CAACvM,GAAG,CAAC,oBAAoB,EAAE2L,kBAAkB,CAAC;IACnDY,IAAI,CAACvM,GAAG,CAAC,sBAAsB,EAAE6D,oBAAoB,CAAC;;IAEtD;IACA,MAAM2I,WAAW,GAAG;MACnBC,OAAO,EAAE,IAAIvH,GAAG,CAAC,CAAC,CAAC,YAAY,EAAE,IAAInN,YAAY,CAAC+S,MAAM,CAAC,CAAC,CAAC,CAAC;MAC5DyB,IAAI;MACJ5E;IACD,CAAC;IAED,OAAO6E,WAAW;EACnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC1E,cAAcA,CACb4E,UAAU,EACVxR,IAAI,EACJqM,mBAAmB,EACnBhM,eAAe,EACfN,WAAW,EACXuM,UAAU,EACVnM,OAAO,EACPqM,qBAAqB,EACpB;IACD,IAAIxM,IAAI,CAAC6B,IAAI,KAAK,cAAc,EAAE;MACjC,MAAMuB,CAAC,GAAGpD,IAAI,CAACe,MAAM;MACrB,IAAI;QACH;QACA,MAAM0Q,kBAAkB,GAAG,IAAIzU,kBAAkB,CAACwU,UAAU,EAAExR,IAAI,CAAC;;QAEnE;QACA,MAAM0R,aAAa,GAAGtO,CAAC,CAAC+I,cAAc,CAAC;UACtCE,mBAAmB;UACnBhM,eAAe;UACfN,WAAW;UACXuM,UAAU;UACVnM,OAAO;UACPsR,kBAAkB;UAClBjF,qBAAqB;UACrBmF,WAAW,EAAEpL;QACd,CAAC,CAAC;QACF,MAAMiI,MAAM,GAAGkD,aAAa,CAACH,OAAO,CAAC9O,GAAG,CAAC,YAAY,CAAC;QACtD,MAAM4O,IAAI,GAAGK,aAAa,CAACL,IAAI;QAC/B,MAAMZ,kBAAkB,GAAGY,IAAI,IAAIA,IAAI,CAAC5O,GAAG,CAAC,oBAAoB,CAAC;QACjE,MAAMmP,IAAI,GAAGpD,MAAM,CAACA,MAAM,CAAC,CAAC,CAACqD,QAAQ,CAAC,CAAC;QACvC,IAAItM,GAAG;QACP,IAAI;UACHA,GAAG,GAAGhI,gBAAgB,CAACuU,MAAM,CAACF,IAAI,EAAE;YACnCG,UAAU,EAAE;UACb,CAAC,CAAC;QACH,CAAC,CAAC,OAAOC,GAAG,EAAE;UACb,IACCA,GAAG,CAACC,GAAG,IACP,OAAOD,GAAG,CAACC,GAAG,KAAK,QAAQ,IAC3B,OAAOD,GAAG,CAACC,GAAG,CAACC,IAAI,KAAK,QAAQ,EAC/B;YACD,MAAMC,UAAU,GAAGH,GAAG,CAACC,GAAG,CAACC,IAAI;YAC/B,MAAME,KAAK,GAAGR,IAAI,CAAC7S,KAAK,CAAC,IAAI,CAAC;YAC9BiT,GAAG,CAACrC,OAAO,IACV,MAAM,GACNyC,KAAK,CACH5Q,KAAK,CAAC6Q,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,UAAU,GAAG,CAAC,CAAC,EAAEA,UAAU,GAAG,CAAC,CAAC,CAClDrT,IAAI,CAAC,MAAM,CAAC;UAChB;UACA,MAAMkT,GAAG;QACV;QACA,MAAMO,YAAY,GAAG7V,WAAW,CAAC8V,OAAO,CAACjN,GAAG,EAAE;UAC7CkN,WAAW,EAAE,CAAC;UACdV,UAAU,EAAE,QAAQ;UACpBW,UAAU,EAAE,IAAI;UAChBC,UAAU,EAAE,IAAI;UAChBC,aAAa,EAAE;QAChB,CAAC,CAAC;QACF,MAAMhF,WAAW,GAAG2E,YAAY,CAACM,OAAO,CAACtN,GAAG,CAAC;QAC7C,MAAM4H,WAAW,GAAGS,WAAW,CAAC3I,WAAW,CAAC,CAAC,CAAC;QAC9C,MAAM6N,YAAY,GAAG,IAAI/V,aAAa,CAACyR,MAAM,CAAC;QAC9CxO,IAAI,CAACyM,mBAAmB,GAAGiF,aAAa,CAACjF,mBAAmB;QAC5DzM,IAAI,CAACuF,GAAG,GAAGA,GAAG;QACdvF,IAAI,CAAC+S,cAAc,GAAGvE,MAAM;QAC5BxO,IAAI,CAACwO,MAAM,GAAGsE,YAAY;QAC1B9S,IAAI,CAACyQ,kBAAkB,GAAGA,kBAAkB;QAC5CzQ,IAAI,CAAC4N,WAAW,GAAGA,WAAW;QAC9B5N,IAAI,CAACmN,WAAW,GAAGA,WAAW;MAC/B,CAAC,CAAC,OAAO6E,GAAG,EAAE;QACbA,GAAG,CAACrC,OAAO,IAAK,4BAA2BvM,CAAC,CAAC0D,UAAU,CAAC,CAAE,oBAAmB;QAC7E,MAAMkL,GAAG;MACV;IACD;EACD;;EAEA;AACD;AACA;AACA;AACA;EACCrF,mBAAmBA,CAAC5M,WAAW,EAAEI,OAAO,EAAE;IACzC,MAAM6S,wBAAwB,GAAG,IAAI,CAAC9I,wBAAwB,CAC7D,IAAI,CAACxD,UAAU,EACf,IAAI,CAACU,QAAQ,EACbjH,OAAO,EACPJ,WACD,CAAC;IACD;IACA,MAAM+K,GAAG,GAAG,IAAId,GAAG,CAAC,CAAC;IACrB,MAAMI,IAAI,GAAG4I,wBAAwB,CAAClI,GAAG,CAAC,CAAC9K,IAAI,EAAEkO,KAAK,KAAK;MAC1D,IAAIrO,IAAI,GAAGiL,GAAG,CAACrI,GAAG,CAACzC,IAAI,CAACe,MAAM,CAAC;MAC/B,IAAIlB,IAAI,KAAKgB,SAAS,EAAE;QACvB,QAAQb,IAAI,CAAC6B,IAAI;UAChB,KAAK,cAAc;YAClBhC,IAAI,GAAG;cACNgC,IAAI,EAAE,cAAc;cACpBd,MAAM,EAAEf,IAAI,CAACe,MAAM;cACnBmN,KAAK;cACL3I,GAAG,EAAE1E,SAAS;cACdkS,cAAc,EAAElS,SAAS;cACzB4L,mBAAmB,EAAE5L,SAAS;cAC9B2N,MAAM,EAAE3N,SAAS;cACjB+M,WAAW,EAAE/M,SAAS;cACtBsM,WAAW,EAAEtM,SAAS;cACtBoD,aAAa,EAAE,IAAI+F,GAAG,CAAC,CAAC;cACxBxH,SAAS,EAAE3B,SAAS;cACpBgC,YAAY,EAAEhC,SAAS;cACvB2C,qBAAqB,EAAE3C,SAAS;cAChCkB,mBAAmB,EAAElB,SAAS;cAC9BQ,0BAA0B,EAAE,KAAK;cACjCC,0BAA0B,EAAET,SAAS;cACrCI,2BAA2B,EAAE,KAAK;cAClCE,2BAA2B,EAAEN,SAAS;cACtCa,wBAAwB,EAAE,KAAK;cAC/BE,wBAAwB,EAAEf;YAC3B,CAAC;YACD;UACD,KAAK,UAAU;YACdhB,IAAI,GAAG;cACNgC,IAAI,EAAE,UAAU;cAChBd,MAAM,EAAEf,IAAI,CAACe,MAAM;cACnBoK,gBAAgB,EAAEnL,IAAI,CAACmL,gBAAgB;cACvC+C,KAAK;cACLlM,IAAI,EAAEnB,SAAS;cACfQ,0BAA0B,EAAE,KAAK;cACjCC,0BAA0B,EAAET,SAAS;cACrCI,2BAA2B,EAAE,KAAK;cAClCE,2BAA2B,EAAEN,SAAS;cACtCa,wBAAwB,EAAE,KAAK;cAC/BE,wBAAwB,EAAEf;YAC3B,CAAC;YACD;UACD;YACC,MAAM,IAAIU,KAAK,CACb,wCAAuCvB,IAAI,CAAC6B,IAAK,EACnD,CAAC;QACH;QACAiJ,GAAG,CAAChG,GAAG,CAACjF,IAAI,CAACkB,MAAM,EAAElB,IAAI,CAAC;QAC1B,OAAOA,IAAI;MACZ,CAAC,MAAM;QACN;QACA,MAAMwO,GAAG,GAAG;UACXxM,IAAI,EAAE,WAAW;UACjBsJ,gBAAgB,EAAEnL,IAAI,CAACmL,gBAAgB;UACvCyF,MAAM,EAAE/Q;QACT,CAAC;QACD,OAAOwO,GAAG;MACX;IACD,CAAC,CAAC;IACF,OAAO,CAACjE,IAAI,EAAEU,GAAG,CAAC;EACnB;EAEAyD,WAAWA,CAAC0E,OAAO,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,EAAE;IACvD,IAAIpR,IAAI,GAAGiR,OAAO;IAElB,IAAIjR,IAAI,KAAKhF,kBAAkB,CAAC4B,cAAc,EAAE;MAC/CoD,IAAI,GAAG,EAAE;IACV;IACA,IAAIA,IAAI,KAAKhF,kBAAkB,CAAC6B,uBAAuB,EAAE;MACxDmD,IAAI,GAAG,iBAAiB;IACzB;;IAEA;IACAoR,SAAS,GAAGA,SAAS,CAACtE,OAAO,CAC5B,sEAAsE,EACtE,EACD,CAAC;IAED,MAAMuE,YAAY,GAAGD,SAAS,CAACrU,KAAK,CAAC,GAAG,CAAC;IACzC,OAAOsU,YAAY,CAACzS,MAAM,EAAE;MAC3BoB,IAAI,GAAGqR,YAAY,CAACC,GAAG,CAAC,CAAC,IAAItR,IAAI,GAAG,GAAG,GAAGA,IAAI,GAAG,EAAE,CAAC;MACpD,MAAMuR,SAAS,GAAGlW,QAAQ,CAACmW,YAAY,CAACxR,IAAI,CAAC;MAC7C,IACC,CAACkR,UAAU,CAAC7Q,GAAG,CAACkR,SAAS,CAAC,KACzB,CAACJ,UAAU,IAAI,CAACA,UAAU,CAAC9Q,GAAG,CAACkR,SAAS,CAAC,CAAC,EAE3C,OAAOA,SAAS;IAClB;IAEA,IAAItN,CAAC,GAAG,CAAC;IACT,IAAIwN,cAAc,GAAGpW,QAAQ,CAACmW,YAAY,CAAE,GAAExR,IAAK,IAAGiE,CAAE,EAAC,CAAC;IAC1D,OACCiN,UAAU,CAAC7Q,GAAG,CAACoR,cAAc,CAAC,IAC7BN,UAAU,IAAIA,UAAU,CAAC9Q,GAAG,CAACoR,cAAc,CAAE,EAC7C;MACDxN,CAAC,EAAE;MACHwN,cAAc,GAAGpW,QAAQ,CAACmW,YAAY,CAAE,GAAExR,IAAK,IAAGiE,CAAE,EAAC,CAAC;IACvD;IACA,OAAOwN,cAAc;EACtB;;EAEA;AACD;AACA;AACA;AACA;EACCC,UAAUA,CAAC5H,IAAI,EAAED,OAAO,EAAE;IACzB,MAAM;MAAES,UAAU;MAAEnM;IAAQ,CAAC,GAAG0L,OAAO;IACvC,KAAK,MAAM7L,IAAI,IAAI,IAAI,CAACkK,wBAAwB,CAC/C,IAAI,CAACxD,UAAU,EACf,IAAI,CAACU,QAAQ,EACbnJ,gBAAgB,CAACkC,OAAO,EAAE,IAAI,CAACkH,QAAQ,CAAC,EACxCiF,UAAU,CAACvM,WACZ,CAAC,EAAE;MACF,QAAQC,IAAI,CAAC6B,IAAI;QAChB,KAAK,cAAc;UAClB7B,IAAI,CAACe,MAAM,CAAC2S,UAAU,CAAC5H,IAAI,EAAED,OAAO,CAAC;UACrC;QACD,KAAK,UAAU;UACdC,IAAI,CAACC,MAAM,CAAE,GAAEO,UAAU,CAAC4E,WAAW,CAAClR,IAAI,CAACe,MAAM,CAAE,EAAC,CAAC;UACrD;UACA;MACF;IACD;IACA,KAAK,CAAC2S,UAAU,CAAC5H,IAAI,EAAED,OAAO,CAAC;EAChC;EAEA,OAAO8H,WAAWA,CAAC9H,OAAO,EAAE;IAC3B,MAAM+H,GAAG,GAAG,IAAIpN,kBAAkB,CAAC;MAClCM,UAAU,EAAEjG,SAAS;MACrB6F,UAAU,EAAE7F,SAAS;MACrB8F,OAAO,EAAE9F,SAAS;MAClBV,OAAO,EAAEU;IACV,CAAC,CAAC;IACF+S,GAAG,CAACD,WAAW,CAAC9H,OAAO,CAAC;IACxB,OAAO+H,GAAG;EACX;AACD;AAEA/V,gBAAgB,CAAC2I,kBAAkB,EAAE,yCAAyC,CAAC;AAE/EzF,MAAM,CAACkP,OAAO,GAAGzJ,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}