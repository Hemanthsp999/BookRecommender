{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Maël Nison @arcanis\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/**\n * @typedef {Object} PnpApiImpl\n * @property {function(string, string, object): string} resolveToUnqualified\n */\nmodule.exports = class PnpPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {PnpApiImpl} pnpApi pnpApi\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, pnpApi, target) {\n    this.source = source;\n    this.pnpApi = pnpApi;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    /** @type {ResolveStepHook} */\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"PnpPlugin\", (request, resolveContext, callback) => {\n      const req = request.request;\n      if (!req) return callback();\n\n      // The trailing slash indicates to PnP that this value is a folder rather than a file\n      const issuer = `${request.path}/`;\n      const packageMatch = /^(@[^/]+\\/)?[^/]+/.exec(req);\n      if (!packageMatch) return callback();\n      const packageName = packageMatch[0];\n      const innerRequest = `.${req.slice(packageName.length)}`;\n\n      /** @type {string|undefined} */\n      let resolution;\n      /** @type {string|undefined} */\n      let apiResolution;\n      try {\n        resolution = this.pnpApi.resolveToUnqualified(packageName, issuer, {\n          considerBuiltins: false\n        });\n        if (resolveContext.fileDependencies) {\n          apiResolution = this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\n            considerBuiltins: false\n          });\n        }\n      } catch ( /** @type {unknown} */error) {\n        if ( /** @type {Error & { code: string }} */\n        error.code === \"MODULE_NOT_FOUND\" && /** @type {Error & { pnpCode: string }} */\n        error.pnpCode === \"UNDECLARED_DEPENDENCY\") {\n          // This is not a PnP managed dependency.\n          // Try to continue resolving with our alternatives\n          if (resolveContext.log) {\n            resolveContext.log(`request is not managed by the pnpapi`);\n            for (const line of /** @type {Error} */error.message.split(\"\\n\").filter(Boolean)) resolveContext.log(`  ${line}`);\n          }\n          return callback();\n        }\n        return callback( /** @type {Error} */error);\n      }\n      if (resolution === packageName) return callback();\n      if (apiResolution && resolveContext.fileDependencies) {\n        resolveContext.fileDependencies.add(apiResolution);\n      }\n      /** @type {ResolveRequest} */\n      const obj = {\n        ...request,\n        path: resolution,\n        request: innerRequest,\n        ignoreSymlinks: true,\n        fullySpecified: request.fullySpecified && innerRequest !== \".\"\n      };\n      resolver.doResolve(target, obj, `resolved by pnp to ${resolution}`, resolveContext, (err, result) => {\n        if (err) return callback(err);\n        if (result) return callback(null, result);\n        // Skip alternatives\n        return callback(null, null);\n      });\n    });\n  }\n};","map":{"version":3,"names":["module","exports","PnpPlugin","constructor","source","pnpApi","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","issuer","path","packageMatch","exec","packageName","innerRequest","slice","length","resolution","apiResolution","resolveToUnqualified","considerBuiltins","fileDependencies","error","code","pnpCode","log","line","message","split","filter","Boolean","add","obj","ignoreSymlinks","fullySpecified","doResolve","err","result"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/PnpPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Maël Nison @arcanis\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/**\n * @typedef {Object} PnpApiImpl\n * @property {function(string, string, object): string} resolveToUnqualified\n */\n\nmodule.exports = class PnpPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {PnpApiImpl} pnpApi pnpApi\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, pnpApi, target) {\n\t\tthis.source = source;\n\t\tthis.pnpApi = pnpApi;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\t/** @type {ResolveStepHook} */\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"PnpPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst req = request.request;\n\t\t\t\tif (!req) return callback();\n\n\t\t\t\t// The trailing slash indicates to PnP that this value is a folder rather than a file\n\t\t\t\tconst issuer = `${request.path}/`;\n\n\t\t\t\tconst packageMatch = /^(@[^/]+\\/)?[^/]+/.exec(req);\n\t\t\t\tif (!packageMatch) return callback();\n\n\t\t\t\tconst packageName = packageMatch[0];\n\t\t\t\tconst innerRequest = `.${req.slice(packageName.length)}`;\n\n\t\t\t\t/** @type {string|undefined} */\n\t\t\t\tlet resolution;\n\t\t\t\t/** @type {string|undefined} */\n\t\t\t\tlet apiResolution;\n\t\t\t\ttry {\n\t\t\t\t\tresolution = this.pnpApi.resolveToUnqualified(packageName, issuer, {\n\t\t\t\t\t\tconsiderBuiltins: false\n\t\t\t\t\t});\n\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\tapiResolution = this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\n\t\t\t\t\t\t\tconsiderBuiltins: false\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (/** @type {unknown} */ error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t/** @type {Error & { code: string }} */\n\t\t\t\t\t\t(error).code === \"MODULE_NOT_FOUND\" &&\n\t\t\t\t\t\t/** @type {Error & { pnpCode: string }} */\n\t\t\t\t\t\t(error).pnpCode === \"UNDECLARED_DEPENDENCY\"\n\t\t\t\t\t) {\n\t\t\t\t\t\t// This is not a PnP managed dependency.\n\t\t\t\t\t\t// Try to continue resolving with our alternatives\n\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\tresolveContext.log(`request is not managed by the pnpapi`);\n\t\t\t\t\t\t\tfor (const line of /** @type {Error} */ (error).message\n\t\t\t\t\t\t\t\t.split(\"\\n\")\n\t\t\t\t\t\t\t\t.filter(Boolean))\n\t\t\t\t\t\t\t\tresolveContext.log(`  ${line}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(/** @type {Error} */ (error));\n\t\t\t\t}\n\n\t\t\t\tif (resolution === packageName) return callback();\n\n\t\t\t\tif (apiResolution && resolveContext.fileDependencies) {\n\t\t\t\t\tresolveContext.fileDependencies.add(apiResolution);\n\t\t\t\t}\n\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: resolution,\n\t\t\t\t\trequest: innerRequest,\n\t\t\t\t\tignoreSymlinks: true,\n\t\t\t\t\tfullySpecified: request.fullySpecified && innerRequest !== \".\"\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t`resolved by pnp to ${resolution}`,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t// Skip alternatives\n\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}