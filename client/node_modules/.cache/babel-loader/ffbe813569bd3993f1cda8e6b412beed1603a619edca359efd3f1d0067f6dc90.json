{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/**\n * DependenciesBlock is the base class for all Module classes in webpack. It describes a\n * \"block\" of dependencies which are pointers to other DependenciesBlock instances. For example\n * when a Module has a CommonJs require statement, the DependencyBlock for the CommonJs module\n * would be added as a dependency to the Module. DependenciesBlock is inherited by two types of classes:\n * Module subclasses and AsyncDependenciesBlock subclasses. The only difference between the two is that\n * AsyncDependenciesBlock subclasses are used for code-splitting (async boundary) and Module subclasses are not.\n */\nclass DependenciesBlock {\n  constructor() {\n    /** @type {Dependency[]} */\n    this.dependencies = [];\n    /** @type {AsyncDependenciesBlock[]} */\n    this.blocks = [];\n    /** @type {DependenciesBlock} */\n    this.parent = undefined;\n  }\n  getRootBlock() {\n    /** @type {DependenciesBlock} */\n    let current = this;\n    while (current.parent) current = current.parent;\n    return current;\n  }\n\n  /**\n   * Adds a DependencyBlock to DependencyBlock relationship.\n   * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n   *\n   * @param {AsyncDependenciesBlock} block block being added\n   * @returns {void}\n   */\n  addBlock(block) {\n    this.blocks.push(block);\n    block.parent = this;\n  }\n\n  /**\n   * @param {Dependency} dependency dependency being tied to block.\n   * This is an \"edge\" pointing to another \"node\" on module graph.\n   * @returns {void}\n   */\n  addDependency(dependency) {\n    this.dependencies.push(dependency);\n  }\n\n  /**\n   * @param {Dependency} dependency dependency being removed\n   * @returns {void}\n   */\n  removeDependency(dependency) {\n    const idx = this.dependencies.indexOf(dependency);\n    if (idx >= 0) {\n      this.dependencies.splice(idx, 1);\n    }\n  }\n\n  /**\n   * Removes all dependencies and blocks\n   * @returns {void}\n   */\n  clearDependenciesAndBlocks() {\n    this.dependencies.length = 0;\n    this.blocks.length = 0;\n  }\n\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n  updateHash(hash, context) {\n    for (const dep of this.dependencies) {\n      dep.updateHash(hash, context);\n    }\n    for (const block of this.blocks) {\n      block.updateHash(hash, context);\n    }\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(_ref) {\n    let {\n      write\n    } = _ref;\n    write(this.dependencies);\n    write(this.blocks);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(_ref2) {\n    let {\n      read\n    } = _ref2;\n    this.dependencies = read();\n    this.blocks = read();\n    for (const block of this.blocks) {\n      block.parent = this;\n    }\n  }\n}\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\nmodule.exports = DependenciesBlock;","map":{"version":3,"names":["makeSerializable","require","DependenciesBlock","constructor","dependencies","blocks","parent","undefined","getRootBlock","current","addBlock","block","push","addDependency","dependency","removeDependency","idx","indexOf","splice","clearDependenciesAndBlocks","length","updateHash","hash","context","dep","serialize","_ref","write","deserialize","_ref2","read","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/DependenciesBlock.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"./serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/**\n * DependenciesBlock is the base class for all Module classes in webpack. It describes a\n * \"block\" of dependencies which are pointers to other DependenciesBlock instances. For example\n * when a Module has a CommonJs require statement, the DependencyBlock for the CommonJs module\n * would be added as a dependency to the Module. DependenciesBlock is inherited by two types of classes:\n * Module subclasses and AsyncDependenciesBlock subclasses. The only difference between the two is that\n * AsyncDependenciesBlock subclasses are used for code-splitting (async boundary) and Module subclasses are not.\n */\nclass DependenciesBlock {\n\tconstructor() {\n\t\t/** @type {Dependency[]} */\n\t\tthis.dependencies = [];\n\t\t/** @type {AsyncDependenciesBlock[]} */\n\t\tthis.blocks = [];\n\t\t/** @type {DependenciesBlock} */\n\t\tthis.parent = undefined;\n\t}\n\n\tgetRootBlock() {\n\t\t/** @type {DependenciesBlock} */\n\t\tlet current = this;\n\t\twhile (current.parent) current = current.parent;\n\t\treturn current;\n\t}\n\n\t/**\n\t * Adds a DependencyBlock to DependencyBlock relationship.\n\t * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n\t *\n\t * @param {AsyncDependenciesBlock} block block being added\n\t * @returns {void}\n\t */\n\taddBlock(block) {\n\t\tthis.blocks.push(block);\n\t\tblock.parent = this;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being tied to block.\n\t * This is an \"edge\" pointing to another \"node\" on module graph.\n\t * @returns {void}\n\t */\n\taddDependency(dependency) {\n\t\tthis.dependencies.push(dependency);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being removed\n\t * @returns {void}\n\t */\n\tremoveDependency(dependency) {\n\t\tconst idx = this.dependencies.indexOf(dependency);\n\t\tif (idx >= 0) {\n\t\t\tthis.dependencies.splice(idx, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all dependencies and blocks\n\t * @returns {void}\n\t */\n\tclearDependenciesAndBlocks() {\n\t\tthis.dependencies.length = 0;\n\t\tthis.blocks.length = 0;\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tfor (const dep of this.dependencies) {\n\t\t\tdep.updateHash(hash, context);\n\t\t}\n\t\tfor (const block of this.blocks) {\n\t\t\tblock.updateHash(hash, context);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize({ write }) {\n\t\twrite(this.dependencies);\n\t\twrite(this.blocks);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize({ read }) {\n\t\tthis.dependencies = read();\n\t\tthis.blocks = read();\n\t\tfor (const block of this.blocks) {\n\t\t\tblock.parent = this;\n\t\t}\n\t}\n}\n\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\n\nmodule.exports = DependenciesBlock;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACvBC,WAAWA,CAAA,EAAG;IACb;IACA,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB;IACA,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB;IACA,IAAI,CAACC,MAAM,GAAGC,SAAS;EACxB;EAEAC,YAAYA,CAAA,EAAG;IACd;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,OAAOA,OAAO,CAACH,MAAM,EAAEG,OAAO,GAAGA,OAAO,CAACH,MAAM;IAC/C,OAAOG,OAAO;EACf;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,QAAQA,CAACC,KAAK,EAAE;IACf,IAAI,CAACN,MAAM,CAACO,IAAI,CAACD,KAAK,CAAC;IACvBA,KAAK,CAACL,MAAM,GAAG,IAAI;EACpB;;EAEA;AACD;AACA;AACA;AACA;EACCO,aAAaA,CAACC,UAAU,EAAE;IACzB,IAAI,CAACV,YAAY,CAACQ,IAAI,CAACE,UAAU,CAAC;EACnC;;EAEA;AACD;AACA;AACA;EACCC,gBAAgBA,CAACD,UAAU,EAAE;IAC5B,MAAME,GAAG,GAAG,IAAI,CAACZ,YAAY,CAACa,OAAO,CAACH,UAAU,CAAC;IACjD,IAAIE,GAAG,IAAI,CAAC,EAAE;MACb,IAAI,CAACZ,YAAY,CAACc,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IACjC;EACD;;EAEA;AACD;AACA;AACA;EACCG,0BAA0BA,CAAA,EAAG;IAC5B,IAAI,CAACf,YAAY,CAACgB,MAAM,GAAG,CAAC;IAC5B,IAAI,CAACf,MAAM,CAACe,MAAM,GAAG,CAAC;EACvB;;EAEA;AACD;AACA;AACA;AACA;EACCC,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAE;IACzB,KAAK,MAAMC,GAAG,IAAI,IAAI,CAACpB,YAAY,EAAE;MACpCoB,GAAG,CAACH,UAAU,CAACC,IAAI,EAAEC,OAAO,CAAC;IAC9B;IACA,KAAK,MAAMZ,KAAK,IAAI,IAAI,CAACN,MAAM,EAAE;MAChCM,KAAK,CAACU,UAAU,CAACC,IAAI,EAAEC,OAAO,CAAC;IAChC;EACD;;EAEA;AACD;AACA;EACCE,SAASA,CAAAC,IAAA,EAAY;IAAA,IAAX;MAAEC;IAAM,CAAC,GAAAD,IAAA;IAClBC,KAAK,CAAC,IAAI,CAACvB,YAAY,CAAC;IACxBuB,KAAK,CAAC,IAAI,CAACtB,MAAM,CAAC;EACnB;;EAEA;AACD;AACA;EACCuB,WAAWA,CAAAC,KAAA,EAAW;IAAA,IAAV;MAAEC;IAAK,CAAC,GAAAD,KAAA;IACnB,IAAI,CAACzB,YAAY,GAAG0B,IAAI,CAAC,CAAC;IAC1B,IAAI,CAACzB,MAAM,GAAGyB,IAAI,CAAC,CAAC;IACpB,KAAK,MAAMnB,KAAK,IAAI,IAAI,CAACN,MAAM,EAAE;MAChCM,KAAK,CAACL,MAAM,GAAG,IAAI;IACpB;EACD;AACD;AAEAN,gBAAgB,CAACE,iBAAiB,EAAE,+BAA+B,CAAC;AAEpE6B,MAAM,CAACC,OAAO,GAAG9B,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}