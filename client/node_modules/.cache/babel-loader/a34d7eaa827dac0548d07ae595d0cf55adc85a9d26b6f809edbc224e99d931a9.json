{"ast":null,"code":"const path = require('path');\n\n// normalize file/line numbers into command line args for specific editors\nmodule.exports = function getArgumentsForPosition(editor, fileName, lineNumber) {\n  let columnNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const editorBasename = path.basename(editor).replace(/\\.(exe|cmd|bat)$/i, '');\n  switch (editorBasename) {\n    case 'atom':\n    case 'Atom':\n    case 'Atom Beta':\n    case 'subl':\n    case 'sublime':\n    case 'sublime_text':\n    case 'wstorm':\n    case 'charm':\n      return [`${fileName}:${lineNumber}:${columnNumber}`];\n    case 'notepad++':\n      return ['-n' + lineNumber, '-c' + columnNumber, fileName];\n    case 'vim':\n    case 'mvim':\n      return [`+call cursor(${lineNumber}, ${columnNumber})`, fileName];\n    case 'joe':\n    case 'gvim':\n      return ['+' + `${lineNumber}`, fileName];\n    case 'emacs':\n    case 'emacsclient':\n      return [`+${lineNumber}:${columnNumber}`, fileName];\n    case 'rmate':\n    case 'mate':\n    case 'mine':\n      return ['--line', lineNumber, fileName];\n    case 'code':\n    case 'Code':\n    case 'code-insiders':\n    case 'Code - Insiders':\n    case 'codium':\n    case 'vscodium':\n    case 'VSCodium':\n      return ['-r', '-g', `${fileName}:${lineNumber}:${columnNumber}`];\n    case 'appcode':\n    case 'clion':\n    case 'clion64':\n    case 'idea':\n    case 'idea64':\n    case 'phpstorm':\n    case 'phpstorm64':\n    case 'pycharm':\n    case 'pycharm64':\n    case 'rubymine':\n    case 'rubymine64':\n    case 'webstorm':\n    case 'webstorm64':\n    case 'goland':\n    case 'goland64':\n    case 'rider':\n    case 'rider64':\n      return ['--line', lineNumber, '--column', columnNumber, fileName];\n  }\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber];\n  }\n\n  // For all others, drop the lineNumber until we have\n  // a mapping above, since providing the lineNumber incorrectly\n  // can result in errors or confusing behavior.\n  return [fileName];\n};","map":{"version":3,"names":["path","require","module","exports","getArgumentsForPosition","editor","fileName","lineNumber","columnNumber","arguments","length","undefined","editorBasename","basename","replace","process","env","LAUNCH_EDITOR"],"sources":["/home/hemanth/react-project/client/node_modules/launch-editor/get-args.js"],"sourcesContent":["const path = require('path')\n\n// normalize file/line numbers into command line args for specific editors\nmodule.exports = function getArgumentsForPosition (\n  editor,\n  fileName,\n  lineNumber,\n  columnNumber = 1\n) {\n  const editorBasename = path.basename(editor).replace(/\\.(exe|cmd|bat)$/i, '')\n  switch (editorBasename) {\n    case 'atom':\n    case 'Atom':\n    case 'Atom Beta':\n    case 'subl':\n    case 'sublime':\n    case 'sublime_text':\n    case 'wstorm':\n    case 'charm':\n      return [`${fileName}:${lineNumber}:${columnNumber}`]\n    case 'notepad++':\n      return ['-n' + lineNumber, '-c' + columnNumber, fileName]\n    case 'vim':\n    case 'mvim':\n      return [`+call cursor(${lineNumber}, ${columnNumber})`, fileName]\n    case 'joe':\n    case 'gvim':\n      return ['+' + `${lineNumber}`, fileName]\n    case 'emacs':\n    case 'emacsclient':\n      return [`+${lineNumber}:${columnNumber}`, fileName]\n    case 'rmate':\n    case 'mate':\n    case 'mine':\n      return ['--line', lineNumber, fileName]\n    case 'code':\n    case 'Code':\n    case 'code-insiders':\n    case 'Code - Insiders':\n    case 'codium':\n    case 'vscodium':\n    case 'VSCodium':\n      return ['-r', '-g', `${fileName}:${lineNumber}:${columnNumber}`]\n    case 'appcode':\n    case 'clion':\n    case 'clion64':\n    case 'idea':\n    case 'idea64':\n    case 'phpstorm':\n    case 'phpstorm64':\n    case 'pycharm':\n    case 'pycharm64':\n    case 'rubymine':\n    case 'rubymine64':\n    case 'webstorm':\n    case 'webstorm64':\n    case 'goland':\n    case 'goland64':\n    case 'rider':\n    case 'rider64':\n      return ['--line', lineNumber, '--column', columnNumber, fileName]\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber]\n  }\n\n  // For all others, drop the lineNumber until we have\n  // a mapping above, since providing the lineNumber incorrectly\n  // can result in errors or confusing behavior.\n  return [fileName]\n}\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,uBAAuBA,CAC/CC,MAAM,EACNC,QAAQ,EACRC,UAAU,EAEV;EAAA,IADAC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAEhB,MAAMG,cAAc,GAAGZ,IAAI,CAACa,QAAQ,CAACR,MAAM,CAAC,CAACS,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC;EAC7E,QAAQF,cAAc;IACpB,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,WAAW;IAChB,KAAK,MAAM;IACX,KAAK,SAAS;IACd,KAAK,cAAc;IACnB,KAAK,QAAQ;IACb,KAAK,OAAO;MACV,OAAO,CAAE,GAAEN,QAAS,IAAGC,UAAW,IAAGC,YAAa,EAAC,CAAC;IACtD,KAAK,WAAW;MACd,OAAO,CAAC,IAAI,GAAGD,UAAU,EAAE,IAAI,GAAGC,YAAY,EAAEF,QAAQ,CAAC;IAC3D,KAAK,KAAK;IACV,KAAK,MAAM;MACT,OAAO,CAAE,gBAAeC,UAAW,KAAIC,YAAa,GAAE,EAAEF,QAAQ,CAAC;IACnE,KAAK,KAAK;IACV,KAAK,MAAM;MACT,OAAO,CAAC,GAAG,GAAI,GAAEC,UAAW,EAAC,EAAED,QAAQ,CAAC;IAC1C,KAAK,OAAO;IACZ,KAAK,aAAa;MAChB,OAAO,CAAE,IAAGC,UAAW,IAAGC,YAAa,EAAC,EAAEF,QAAQ,CAAC;IACrD,KAAK,OAAO;IACZ,KAAK,MAAM;IACX,KAAK,MAAM;MACT,OAAO,CAAC,QAAQ,EAAEC,UAAU,EAAED,QAAQ,CAAC;IACzC,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,eAAe;IACpB,KAAK,iBAAiB;IACtB,KAAK,QAAQ;IACb,KAAK,UAAU;IACf,KAAK,UAAU;MACb,OAAO,CAAC,IAAI,EAAE,IAAI,EAAG,GAAEA,QAAS,IAAGC,UAAW,IAAGC,YAAa,EAAC,CAAC;IAClE,KAAK,SAAS;IACd,KAAK,OAAO;IACZ,KAAK,SAAS;IACd,KAAK,MAAM;IACX,KAAK,QAAQ;IACb,KAAK,UAAU;IACf,KAAK,YAAY;IACjB,KAAK,SAAS;IACd,KAAK,WAAW;IAChB,KAAK,UAAU;IACf,KAAK,YAAY;IACjB,KAAK,UAAU;IACf,KAAK,YAAY;IACjB,KAAK,QAAQ;IACb,KAAK,UAAU;IACf,KAAK,OAAO;IACZ,KAAK,SAAS;MACZ,OAAO,CAAC,QAAQ,EAAED,UAAU,EAAE,UAAU,EAAEC,YAAY,EAAEF,QAAQ,CAAC;EACrE;EAEA,IAAIS,OAAO,CAACC,GAAG,CAACC,aAAa,EAAE;IAC7B,OAAO,CAACX,QAAQ,EAAEC,UAAU,EAAEC,YAAY,CAAC;EAC7C;;EAEA;EACA;EACA;EACA,OAAO,CAACF,QAAQ,CAAC;AACnB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}