{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy\n*/\n\n\"use strict\";\n\nconst ExternalsPlugin = require(\"../ExternalsPlugin\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst FallbackDependency = require(\"./FallbackDependency\");\nconst FallbackItemDependency = require(\"./FallbackItemDependency\");\nconst FallbackModuleFactory = require(\"./FallbackModuleFactory\");\nconst RemoteModule = require(\"./RemoteModule\");\nconst RemoteRuntimeModule = require(\"./RemoteRuntimeModule\");\nconst RemoteToExternalDependency = require(\"./RemoteToExternalDependency\");\nconst {\n  parseOptions\n} = require(\"./options\");\n\n/** @typedef {import(\"../../declarations/plugins/container/ContainerReferencePlugin\").ContainerReferencePluginOptions} ContainerReferencePluginOptions */\n/** @typedef {import(\"../../declarations/plugins/container/ContainerReferencePlugin\").RemotesConfig} RemotesConfig */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/container/ContainerReferencePlugin.check.js\"), () => require(\"../../schemas/plugins/container/ContainerReferencePlugin.json\"), {\n  name: \"Container Reference Plugin\",\n  baseDataPath: \"options\"\n});\nconst slashCode = \"/\".charCodeAt(0);\nclass ContainerReferencePlugin {\n  /**\n   * @param {ContainerReferencePluginOptions} options options\n   */\n  constructor(options) {\n    validate(options);\n    this._remoteType = options.remoteType;\n    this._remotes = parseOptions(options.remotes, item => ({\n      external: Array.isArray(item) ? item : [item],\n      shareScope: options.shareScope || \"default\"\n    }), item => ({\n      external: Array.isArray(item.external) ? item.external : [item.external],\n      shareScope: item.shareScope || options.shareScope || \"default\"\n    }));\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const {\n      _remotes: remotes,\n      _remoteType: remoteType\n    } = this;\n\n    /** @type {Record<string, string>} */\n    const remoteExternals = {};\n    for (const [key, config] of remotes) {\n      let i = 0;\n      for (const external of config.external) {\n        if (external.startsWith(\"internal \")) continue;\n        remoteExternals[`webpack/container/reference/${key}${i ? `/fallback-${i}` : \"\"}`] = external;\n        i++;\n      }\n    }\n    new ExternalsPlugin(remoteType, remoteExternals).apply(compiler);\n    compiler.hooks.compilation.tap(\"ContainerReferencePlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(RemoteToExternalDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(FallbackItemDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(FallbackDependency, new FallbackModuleFactory());\n      normalModuleFactory.hooks.factorize.tap(\"ContainerReferencePlugin\", data => {\n        if (!data.request.includes(\"!\")) {\n          for (const [key, config] of remotes) {\n            if (data.request.startsWith(`${key}`) && (data.request.length === key.length || data.request.charCodeAt(key.length) === slashCode)) {\n              return new RemoteModule(data.request, config.external.map((external, i) => external.startsWith(\"internal \") ? external.slice(9) : `webpack/container/reference/${key}${i ? `/fallback-${i}` : \"\"}`), `.${data.request.slice(key.length)}`, config.shareScope);\n            }\n          }\n        }\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ContainerReferencePlugin\", (chunk, set) => {\n        set.add(RuntimeGlobals.module);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        set.add(RuntimeGlobals.initializeSharing);\n        set.add(RuntimeGlobals.shareScopeMap);\n        compilation.addRuntimeModule(chunk, new RemoteRuntimeModule());\n      });\n    });\n  }\n}\nmodule.exports = ContainerReferencePlugin;","map":{"version":3,"names":["ExternalsPlugin","require","RuntimeGlobals","createSchemaValidation","FallbackDependency","FallbackItemDependency","FallbackModuleFactory","RemoteModule","RemoteRuntimeModule","RemoteToExternalDependency","parseOptions","validate","name","baseDataPath","slashCode","charCodeAt","ContainerReferencePlugin","constructor","options","_remoteType","remoteType","_remotes","remotes","item","external","Array","isArray","shareScope","apply","compiler","remoteExternals","key","config","i","startsWith","hooks","compilation","tap","_ref","normalModuleFactory","dependencyFactories","set","factorize","data","request","includes","length","map","slice","runtimeRequirementInTree","for","ensureChunkHandlers","chunk","add","module","moduleFactoriesAddOnly","hasOwnProperty","initializeSharing","shareScopeMap","addRuntimeModule","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/container/ContainerReferencePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy\n*/\n\n\"use strict\";\n\nconst ExternalsPlugin = require(\"../ExternalsPlugin\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst FallbackDependency = require(\"./FallbackDependency\");\nconst FallbackItemDependency = require(\"./FallbackItemDependency\");\nconst FallbackModuleFactory = require(\"./FallbackModuleFactory\");\nconst RemoteModule = require(\"./RemoteModule\");\nconst RemoteRuntimeModule = require(\"./RemoteRuntimeModule\");\nconst RemoteToExternalDependency = require(\"./RemoteToExternalDependency\");\nconst { parseOptions } = require(\"./options\");\n\n/** @typedef {import(\"../../declarations/plugins/container/ContainerReferencePlugin\").ContainerReferencePluginOptions} ContainerReferencePluginOptions */\n/** @typedef {import(\"../../declarations/plugins/container/ContainerReferencePlugin\").RemotesConfig} RemotesConfig */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/container/ContainerReferencePlugin.check.js\"),\n\t() =>\n\t\trequire(\"../../schemas/plugins/container/ContainerReferencePlugin.json\"),\n\t{\n\t\tname: \"Container Reference Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nconst slashCode = \"/\".charCodeAt(0);\n\nclass ContainerReferencePlugin {\n\t/**\n\t * @param {ContainerReferencePluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\n\t\tthis._remoteType = options.remoteType;\n\t\tthis._remotes = parseOptions(\n\t\t\toptions.remotes,\n\t\t\titem => ({\n\t\t\t\texternal: Array.isArray(item) ? item : [item],\n\t\t\t\tshareScope: options.shareScope || \"default\"\n\t\t\t}),\n\t\t\titem => ({\n\t\t\t\texternal: Array.isArray(item.external)\n\t\t\t\t\t? item.external\n\t\t\t\t\t: [item.external],\n\t\t\t\tshareScope: item.shareScope || options.shareScope || \"default\"\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { _remotes: remotes, _remoteType: remoteType } = this;\n\n\t\t/** @type {Record<string, string>} */\n\t\tconst remoteExternals = {};\n\t\tfor (const [key, config] of remotes) {\n\t\t\tlet i = 0;\n\t\t\tfor (const external of config.external) {\n\t\t\t\tif (external.startsWith(\"internal \")) continue;\n\t\t\t\tremoteExternals[\n\t\t\t\t\t`webpack/container/reference/${key}${i ? `/fallback-${i}` : \"\"}`\n\t\t\t\t] = external;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\tnew ExternalsPlugin(remoteType, remoteExternals).apply(compiler);\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ContainerReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tRemoteToExternalDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tFallbackItemDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tFallbackDependency,\n\t\t\t\t\tnew FallbackModuleFactory()\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.factorize.tap(\n\t\t\t\t\t\"ContainerReferencePlugin\",\n\t\t\t\t\tdata => {\n\t\t\t\t\t\tif (!data.request.includes(\"!\")) {\n\t\t\t\t\t\t\tfor (const [key, config] of remotes) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tdata.request.startsWith(`${key}`) &&\n\t\t\t\t\t\t\t\t\t(data.request.length === key.length ||\n\t\t\t\t\t\t\t\t\t\tdata.request.charCodeAt(key.length) === slashCode)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn new RemoteModule(\n\t\t\t\t\t\t\t\t\t\tdata.request,\n\t\t\t\t\t\t\t\t\t\tconfig.external.map((external, i) =>\n\t\t\t\t\t\t\t\t\t\t\texternal.startsWith(\"internal \")\n\t\t\t\t\t\t\t\t\t\t\t\t? external.slice(9)\n\t\t\t\t\t\t\t\t\t\t\t\t: `webpack/container/reference/${key}${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ti ? `/fallback-${i}` : \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t  }`\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t`.${data.request.slice(key.length)}`,\n\t\t\t\t\t\t\t\t\t\tconfig.shareScope\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ContainerReferencePlugin\", (chunk, set) => {\n\t\t\t\t\t\tset.add(RuntimeGlobals.module);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\t\tset.add(RuntimeGlobals.initializeSharing);\n\t\t\t\t\t\tset.add(RuntimeGlobals.shareScopeMap);\n\t\t\t\t\t\tcompilation.addRuntimeModule(chunk, new RemoteRuntimeModule());\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ContainerReferencePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}