{"ast":null,"code":"const parse = require('./parse.js');\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true);\n  const v2 = parse(version2, null, true);\n  const comparison = v1.compare(v2);\n  if (comparison === 0) {\n    return null;\n  }\n  const v1Higher = comparison > 0;\n  const highVersion = v1Higher ? v1 : v2;\n  const lowVersion = v1Higher ? v2 : v1;\n  const highHasPre = !!highVersion.prerelease.length;\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : '';\n  if (v1.major !== v2.major) {\n    return prefix + 'major';\n  }\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor';\n  }\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch';\n  }\n\n  // at this point we know stable versions match but overall versions are not equal,\n  // so either they are both prereleases, or the lower version is a prerelease\n\n  if (highHasPre) {\n    // high and low are preleases\n    return 'prerelease';\n  }\n  if (lowVersion.patch) {\n    // anything higher than a patch bump would result in the wrong version\n    return 'patch';\n  }\n  if (lowVersion.minor) {\n    // anything higher than a minor bump would result in the wrong version\n    return 'minor';\n  }\n\n  // bumping major/minor/patch all have same result\n  return 'major';\n};\nmodule.exports = diff;","map":{"version":3,"names":["parse","require","diff","version1","version2","v1","v2","comparison","compare","v1Higher","highVersion","lowVersion","highHasPre","prerelease","length","prefix","major","minor","patch","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/semver/functions/diff.js"],"sourcesContent":["const parse = require('./parse.js')\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true)\n  const v2 = parse(version2, null, true)\n  const comparison = v1.compare(v2)\n\n  if (comparison === 0) {\n    return null\n  }\n\n  const v1Higher = comparison > 0\n  const highVersion = v1Higher ? v1 : v2\n  const lowVersion = v1Higher ? v2 : v1\n  const highHasPre = !!highVersion.prerelease.length\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : ''\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major'\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor'\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch'\n  }\n\n  // at this point we know stable versions match but overall versions are not equal,\n  // so either they are both prereleases, or the lower version is a prerelease\n\n  if (highHasPre) {\n    // high and low are preleases\n    return 'prerelease'\n  }\n\n  if (lowVersion.patch) {\n    // anything higher than a patch bump would result in the wrong version\n    return 'patch'\n  }\n\n  if (lowVersion.minor) {\n    // anything higher than a minor bump would result in the wrong version\n    return 'minor'\n  }\n\n  // bumping major/minor/patch all have same result\n  return 'major'\n}\n\nmodule.exports = diff\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEnC,MAAMC,IAAI,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACnC,MAAMC,EAAE,GAAGL,KAAK,CAACG,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC;EACtC,MAAMG,EAAE,GAAGN,KAAK,CAACI,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC;EACtC,MAAMG,UAAU,GAAGF,EAAE,CAACG,OAAO,CAACF,EAAE,CAAC;EAEjC,IAAIC,UAAU,KAAK,CAAC,EAAE;IACpB,OAAO,IAAI;EACb;EAEA,MAAME,QAAQ,GAAGF,UAAU,GAAG,CAAC;EAC/B,MAAMG,WAAW,GAAGD,QAAQ,GAAGJ,EAAE,GAAGC,EAAE;EACtC,MAAMK,UAAU,GAAGF,QAAQ,GAAGH,EAAE,GAAGD,EAAE;EACrC,MAAMO,UAAU,GAAG,CAAC,CAACF,WAAW,CAACG,UAAU,CAACC,MAAM;;EAElD;EACA,MAAMC,MAAM,GAAGH,UAAU,GAAG,KAAK,GAAG,EAAE;EAEtC,IAAIP,EAAE,CAACW,KAAK,KAAKV,EAAE,CAACU,KAAK,EAAE;IACzB,OAAOD,MAAM,GAAG,OAAO;EACzB;EAEA,IAAIV,EAAE,CAACY,KAAK,KAAKX,EAAE,CAACW,KAAK,EAAE;IACzB,OAAOF,MAAM,GAAG,OAAO;EACzB;EAEA,IAAIV,EAAE,CAACa,KAAK,KAAKZ,EAAE,CAACY,KAAK,EAAE;IACzB,OAAOH,MAAM,GAAG,OAAO;EACzB;;EAEA;EACA;;EAEA,IAAIH,UAAU,EAAE;IACd;IACA,OAAO,YAAY;EACrB;EAEA,IAAID,UAAU,CAACO,KAAK,EAAE;IACpB;IACA,OAAO,OAAO;EAChB;EAEA,IAAIP,UAAU,CAACM,KAAK,EAAE;IACpB;IACA,OAAO,OAAO;EAChB;;EAEA;EACA,OAAO,OAAO;AAChB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGlB,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}