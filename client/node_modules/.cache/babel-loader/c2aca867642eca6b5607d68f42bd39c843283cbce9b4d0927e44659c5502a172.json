{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\nclass PriorityQueue {\n  constructor(_computePriority) {\n    _defineProperty(this, '_queue', []);\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n    this._computePriority = _computePriority;\n  }\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._enqueue(task, this._sharedQueue);\n    } else {\n      const queue = this._getWorkerQueue(workerId);\n      this._enqueue(task, queue);\n    }\n  }\n  _enqueue(task, queue) {\n    const item = {\n      priority: this._computePriority(task.request[2], ...task.request[3]),\n      task\n    };\n    queue.add(item);\n  }\n  dequeue(workerId) {\n    const workerQueue = this._getWorkerQueue(workerId);\n    const workerTop = workerQueue.peek();\n    const sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n    // or if the priority of the worker queue is smaller or equal to the\n    // priority of the top task in the shared queue. The tasks of the\n    // worker specific queue are preferred because no other worker can pick this\n    // specific task up.\n\n    if (sharedTop == null || workerTop != null && workerTop.priority <= sharedTop.priority) {\n      var _workerQueue$poll$tas, _workerQueue$poll;\n      return (_workerQueue$poll$tas = (_workerQueue$poll = workerQueue.poll()) === null || _workerQueue$poll === void 0 ? void 0 : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0 ? _workerQueue$poll$tas : null;\n    }\n    return this._sharedQueue.poll().task;\n  }\n  _getWorkerQueue(workerId) {\n    let queue = this._queue[workerId];\n    if (queue == null) {\n      queue = this._queue[workerId] = new MinHeap();\n    }\n    return queue;\n  }\n}\nexports.default = PriorityQueue;\nclass MinHeap {\n  constructor() {\n    _defineProperty(this, '_heap', []);\n  }\n  peek() {\n    var _this$_heap$;\n    return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0 ? _this$_heap$ : null;\n  }\n  add(item) {\n    const nodes = this._heap;\n    nodes.push(item);\n    if (nodes.length === 1) {\n      return;\n    }\n    let currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n    while (currentIndex > 0) {\n      const parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n      const parent = nodes[parentIndex];\n      if (parent.priority <= item.priority) {\n        break;\n      }\n      nodes[currentIndex] = parent;\n      nodes[parentIndex] = item;\n      currentIndex = parentIndex;\n    }\n  }\n  poll() {\n    const nodes = this._heap;\n    const result = nodes[0];\n    const lastElement = nodes.pop(); // heap was empty or removed the last element\n\n    if (result == null || nodes.length === 0) {\n      return result !== null && result !== void 0 ? result : null;\n    }\n    let index = 0;\n    nodes[0] = lastElement !== null && lastElement !== void 0 ? lastElement : null;\n    const element = nodes[0];\n    while (true) {\n      let swapIndex = null;\n      const rightChildIndex = (index + 1) * 2;\n      const leftChildIndex = rightChildIndex - 1;\n      const rightChild = nodes[rightChildIndex];\n      const leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n      if (leftChild != null && leftChild.priority < element.priority) {\n        swapIndex = leftChildIndex;\n      } // If the right child is smaller or the right child is smaller than the left\n      // then swap with the right child\n\n      if (rightChild != null && rightChild.priority < (swapIndex == null ? element : leftChild).priority) {\n        swapIndex = rightChildIndex;\n      }\n      if (swapIndex == null) {\n        break;\n      }\n      nodes[index] = nodes[swapIndex];\n      nodes[swapIndex] = element;\n      index = swapIndex;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_defineProperty","obj","key","enumerable","configurable","writable","PriorityQueue","constructor","_computePriority","MinHeap","enqueue","task","workerId","_enqueue","_sharedQueue","queue","_getWorkerQueue","item","priority","request","add","dequeue","workerQueue","workerTop","peek","sharedTop","_workerQueue$poll$tas","_workerQueue$poll","poll","_queue","_this$_heap$","_heap","nodes","push","length","currentIndex","parentIndex","Math","floor","parent","result","lastElement","pop","index","element","swapIndex","rightChildIndex","leftChildIndex","rightChild","leftChild"],"sources":["/home/hemanth/react-project/client/node_modules/jest-worker/build/PriorityQueue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\nclass PriorityQueue {\n  constructor(_computePriority) {\n    _defineProperty(this, '_queue', []);\n\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n\n    this._computePriority = _computePriority;\n  }\n\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._enqueue(task, this._sharedQueue);\n    } else {\n      const queue = this._getWorkerQueue(workerId);\n\n      this._enqueue(task, queue);\n    }\n  }\n\n  _enqueue(task, queue) {\n    const item = {\n      priority: this._computePriority(task.request[2], ...task.request[3]),\n      task\n    };\n    queue.add(item);\n  }\n\n  dequeue(workerId) {\n    const workerQueue = this._getWorkerQueue(workerId);\n\n    const workerTop = workerQueue.peek();\n\n    const sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n    // or if the priority of the worker queue is smaller or equal to the\n    // priority of the top task in the shared queue. The tasks of the\n    // worker specific queue are preferred because no other worker can pick this\n    // specific task up.\n\n    if (\n      sharedTop == null ||\n      (workerTop != null && workerTop.priority <= sharedTop.priority)\n    ) {\n      var _workerQueue$poll$tas, _workerQueue$poll;\n\n      return (_workerQueue$poll$tas =\n        (_workerQueue$poll = workerQueue.poll()) === null ||\n        _workerQueue$poll === void 0\n          ? void 0\n          : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0\n        ? _workerQueue$poll$tas\n        : null;\n    }\n\n    return this._sharedQueue.poll().task;\n  }\n\n  _getWorkerQueue(workerId) {\n    let queue = this._queue[workerId];\n\n    if (queue == null) {\n      queue = this._queue[workerId] = new MinHeap();\n    }\n\n    return queue;\n  }\n}\n\nexports.default = PriorityQueue;\n\nclass MinHeap {\n  constructor() {\n    _defineProperty(this, '_heap', []);\n  }\n\n  peek() {\n    var _this$_heap$;\n\n    return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0\n      ? _this$_heap$\n      : null;\n  }\n\n  add(item) {\n    const nodes = this._heap;\n    nodes.push(item);\n\n    if (nodes.length === 1) {\n      return;\n    }\n\n    let currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n    while (currentIndex > 0) {\n      const parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n      const parent = nodes[parentIndex];\n\n      if (parent.priority <= item.priority) {\n        break;\n      }\n\n      nodes[currentIndex] = parent;\n      nodes[parentIndex] = item;\n      currentIndex = parentIndex;\n    }\n  }\n\n  poll() {\n    const nodes = this._heap;\n    const result = nodes[0];\n    const lastElement = nodes.pop(); // heap was empty or removed the last element\n\n    if (result == null || nodes.length === 0) {\n      return result !== null && result !== void 0 ? result : null;\n    }\n\n    let index = 0;\n    nodes[0] =\n      lastElement !== null && lastElement !== void 0 ? lastElement : null;\n    const element = nodes[0];\n\n    while (true) {\n      let swapIndex = null;\n      const rightChildIndex = (index + 1) * 2;\n      const leftChildIndex = rightChildIndex - 1;\n      const rightChild = nodes[rightChildIndex];\n      const leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n      if (leftChild != null && leftChild.priority < element.priority) {\n        swapIndex = leftChildIndex;\n      } // If the right child is smaller or the right child is smaller than the left\n      // then swap with the right child\n\n      if (\n        rightChild != null &&\n        rightChild.priority < (swapIndex == null ? element : leftChild).priority\n      ) {\n        swapIndex = rightChildIndex;\n      }\n\n      if (swapIndex == null) {\n        break;\n      }\n\n      nodes[index] = nodes[swapIndex];\n      nodes[swapIndex] = element;\n      index = swapIndex;\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}