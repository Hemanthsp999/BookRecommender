{"ast":null,"code":"\"use strict\";\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n/** @typedef {import(\"terser\").CompressOptions} TerserCompressOptions */\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n/** @typedef {import(\"./index.js\").Input} Input */\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\nconst notSettled = Symbol(`not-settled`);\n\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurrency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve( /** @type{T[]} **/result);\n        return;\n      }\n      const [index, task] = value;\n\n      /**\n       * @param {T} x\n       */\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n      task().then(onFulfilled, reject);\n    };\n    Array(limit).fill(0).forEach(next);\n  });\n}\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\nasync function terserMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n\n  /**\n   * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n  const buildComments = (terserOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    let comments;\n    if (terserOptions.format) {\n      ({\n        comments\n      } = terserOptions.format);\n    } else if (terserOptions.output) {\n      ({\n        comments\n      } = terserOptions.output);\n    }\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    }\n\n    // Ensure that both conditions are functions\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n      let regex;\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n        case \"function\":\n          break;\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n            break;\n          }\n          if (condition[key] === \"some\") {\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n            break;\n          }\n          regexStr = /** @type {string} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp( /** @type {string} */regexStr).test(comment.value);\n          break;\n        default:\n          regex = /** @type {RegExp} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => /** @type {RegExp} */regex.test(comment.value);\n      }\n    });\n\n    // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n    return (astNode, comment) => {\n      if ( /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`;\n\n        // Don't include duplicate comments\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n      return (/** @type {{ preserve: ExtractCommentsFunction }} */condition.preserve(astNode, comment)\n      );\n    };\n  };\n\n  /**\n   * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n   * @returns {TerserOptions & { sourceMap: undefined } & { compress: TerserCompressOptions } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n   */\n  const buildTerserOptions = function () {\n    let terserOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      ...terserOptions,\n      compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress ? {} : false : {\n        ...terserOptions.compress\n      },\n      // ecma: terserOptions.ecma,\n      // ie8: terserOptions.ie8,\n      // keep_classnames: terserOptions.keep_classnames,\n      // keep_fnames: terserOptions.keep_fnames,\n      mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : {\n        ...terserOptions.mangle\n      },\n      // module: terserOptions.module,\n      // nameCache: { ...terserOptions.toplevel },\n      // the `output` option is deprecated\n      ...(terserOptions.format ? {\n        format: {\n          beautify: false,\n          ...terserOptions.format\n        }\n      } : {\n        output: {\n          beautify: false,\n          ...terserOptions.output\n        }\n      }),\n      parse: {\n        ...terserOptions.parse\n      },\n      // safari10: terserOptions.safari10,\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n      // toplevel: terserOptions.toplevel\n    };\n  };\n\n  // eslint-disable-next-line global-require\n  const {\n    minify\n  } = require(\"terser\");\n  // Copy `terser` options\n  const terserOptions = buildTerserOptions(minimizerOptions);\n\n  // Let terser generate a SourceMap\n  if (sourceMap) {\n    // @ts-ignore\n    terserOptions.sourceMap = {\n      asObject: true\n    };\n  }\n\n  /** @type {ExtractedComments} */\n  const extractedComments = [];\n  if (terserOptions.output) {\n    terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n  } else if (terserOptions.format) {\n    terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n  }\n  if (terserOptions.compress) {\n    // More optimizations\n    if (typeof terserOptions.compress.ecma === \"undefined\") {\n      terserOptions.compress.ecma = terserOptions.ecma;\n    }\n\n    // https://github.com/webpack/webpack/issues/16135\n    if (terserOptions.ecma === 5 && typeof terserOptions.compress.arrows === \"undefined\") {\n      terserOptions.compress.arrows = false;\n    }\n  }\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, terserOptions);\n  return {\n    code: /** @type {string} **/result.code,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    map: result.map ? /** @type {SourceMapInput} **/result.map : undefined,\n    extractedComments\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\nasync function uglifyJsMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n\n  /**\n   * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n  const buildComments = (uglifyJsOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    const {\n      comments\n    } = uglifyJsOptions.output;\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    }\n\n    // Ensure that both conditions are functions\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n      let regex;\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n        case \"function\":\n          break;\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n            break;\n          }\n          if (condition[key] === \"some\") {\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n            break;\n          }\n          regexStr = /** @type {string} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp( /** @type {string} */regexStr).test(comment.value);\n          break;\n        default:\n          regex = /** @type {RegExp} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => /** @type {RegExp} */regex.test(comment.value);\n      }\n    });\n\n    // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n    return (astNode, comment) => {\n      if ( /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`;\n\n        // Don't include duplicate comments\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n      return (/** @type {{ preserve: ExtractCommentsFunction }} */condition.preserve(astNode, comment)\n      );\n    };\n  };\n\n  /**\n   * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n   * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n   */\n  const buildUglifyJsOptions = function () {\n    let uglifyJsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.ecma;\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.module;\n\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      ...uglifyJsOptions,\n      // warnings: uglifyJsOptions.warnings,\n      parse: {\n        ...uglifyJsOptions.parse\n      },\n      compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : {\n        ...uglifyJsOptions.compress\n      },\n      mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : {\n        ...uglifyJsOptions.mangle\n      },\n      output: {\n        beautify: false,\n        ...uglifyJsOptions.output\n      },\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n      // toplevel: uglifyJsOptions.toplevel\n      // nameCache: { ...uglifyJsOptions.toplevel },\n      // ie8: uglifyJsOptions.ie8,\n      // keep_fnames: uglifyJsOptions.keep_fnames,\n    };\n  };\n\n  // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n  const {\n    minify\n  } = require(\"uglify-js\");\n\n  // Copy `uglify-js` options\n  const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions);\n\n  // Let terser generate a SourceMap\n  if (sourceMap) {\n    // @ts-ignore\n    uglifyJsOptions.sourceMap = true;\n  }\n\n  /** @type {ExtractedComments} */\n  const extractedComments = [];\n\n  // @ts-ignore\n  uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, uglifyJsOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    errors: result.error ? [result.error] : [],\n    warnings: result.warnings || [],\n    extractedComments\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\nasync function swcMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n   * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined } & { compress: import(\"@swc/core\").TerserCompressOptions }}\n   */\n  const buildSwcOptions = function () {\n    let swcOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      ...swcOptions,\n      compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress ? {} : false : {\n        ...swcOptions.compress\n      },\n      mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : {\n        ...swcOptions.mangle\n      },\n      // ecma: swcOptions.ecma,\n      // keep_classnames: swcOptions.keep_classnames,\n      // keep_fnames: swcOptions.keep_fnames,\n      // module: swcOptions.module,\n      // safari10: swcOptions.safari10,\n      // toplevel: swcOptions.toplevel\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n    };\n  };\n\n  // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n  const swc = require(\"@swc/core\");\n  // Copy `swc` options\n  const swcOptions = buildSwcOptions(minimizerOptions);\n\n  // Let `swc` generate a SourceMap\n  if (sourceMap) {\n    // @ts-ignore\n    swcOptions.sourceMap = true;\n  }\n  if (swcOptions.compress) {\n    // More optimizations\n    if (typeof swcOptions.compress.ecma === \"undefined\") {\n      swcOptions.compress.ecma = swcOptions.ecma;\n    }\n\n    // https://github.com/webpack/webpack/issues/16135\n    if (swcOptions.ecma === 5 && typeof swcOptions.compress.arrows === \"undefined\") {\n      swcOptions.compress.arrows = false;\n    }\n  }\n  const [[filename, code]] = Object.entries(input);\n  const result = await swc.minify(code, swcOptions);\n  let map;\n  if (result.map) {\n    map = JSON.parse(result.map);\n\n    // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n    map.sources = [filename];\n    delete map.sourcesContent;\n  }\n  return {\n    code: result.code,\n    map\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = function () {\n    let esbuildOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.ecma;\n    if (esbuildOptions.module) {\n      // eslint-disable-next-line no-param-reassign\n      esbuildOptions.format = \"esm\";\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.module;\n\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  };\n\n  // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n  const esbuild = require(\"esbuild\");\n\n  // Copy `esbuild` options\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions);\n\n  // Let `esbuild` generate a SourceMap\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      const plugin = item.pluginName ? `\\nPlugin Name: ${item.pluginName}` : \"\";\n      const location = item.location ? `\\n\\n${item.location.file}:${item.location.line}:${item.location.column}:\\n  ${item.location.line} | ${item.location.lineText}\\n\\nSuggestion: ${item.location.suggestion}` : \"\";\n      const notes = item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\";\n      return `${item.text} [${item.id}]${plugin}${location}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${notes}`;\n    }) : []\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};","map":{"version":3,"names":["notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","Promise","resolve","reject","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","terserMinify","input","sourceMap","minimizerOptions","extractComments","isObject","type","buildComments","terserOptions","extractedComments","condition","comments","format","output","preserve","extract","RegExp","key","regexStr","regex","astNode","comment","test","commentText","push","buildTerserOptions","arguments","undefined","compress","mangle","beautify","parse","minify","require","asObject","ecma","arrows","filename","code","Object","map","getMinimizerVersion","packageJson","error","version","uglifyJsMinify","uglifyJsOptions","buildUglifyJsOptions","module","JSON","errors","warnings","swcMinify","buildSwcOptions","swcOptions","swc","sources","sourcesContent","esbuildMinify","buildEsbuildOptions","esbuildOptions","legalComments","sourcemap","esbuild","sourcefile","transform","item","plugin","pluginName","location","file","line","column","lineText","suggestion","notes","note","text","join","id","detail","exports"],"sources":["/home/hemanth/react-project/client/node_modules/terser-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n/** @typedef {import(\"terser\").CompressOptions} TerserCompressOptions */\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n/** @typedef {import(\"./index.js\").Input} Input */\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\n\nconst notSettled = Symbol(`not-settled`);\n\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurrency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve( /** @type{T[]} **/result);\n        return;\n      }\n      const [index, task] = value;\n\n      /**\n       * @param {T} x\n       */\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n      task().then(onFulfilled, reject);\n    };\n    Array(limit).fill(0).forEach(next);\n  });\n}\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\nasync function terserMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n\n  /**\n   * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n  const buildComments = (terserOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    let comments;\n    if (terserOptions.format) {\n      ({\n        comments\n      } = terserOptions.format);\n    } else if (terserOptions.output) {\n      ({\n        comments\n      } = terserOptions.output);\n    }\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    }\n\n    // Ensure that both conditions are functions\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n      let regex;\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n        case \"function\":\n          break;\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n            break;\n          }\n          if (condition[key] === \"some\") {\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n            break;\n          }\n          regexStr = /** @type {string} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp( /** @type {string} */regexStr).test(comment.value);\n          break;\n        default:\n          regex = /** @type {RegExp} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => /** @type {RegExp} */regex.test(comment.value);\n      }\n    });\n\n    // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n    return (astNode, comment) => {\n      if ( /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`;\n\n        // Don't include duplicate comments\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n      return (/** @type {{ preserve: ExtractCommentsFunction }} */condition.preserve(astNode, comment)\n      );\n    };\n  };\n\n  /**\n   * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n   * @returns {TerserOptions & { sourceMap: undefined } & { compress: TerserCompressOptions } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n   */\n  const buildTerserOptions = (terserOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      ...terserOptions,\n      compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress ? {} : false : {\n        ...terserOptions.compress\n      },\n      // ecma: terserOptions.ecma,\n      // ie8: terserOptions.ie8,\n      // keep_classnames: terserOptions.keep_classnames,\n      // keep_fnames: terserOptions.keep_fnames,\n      mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : {\n        ...terserOptions.mangle\n      },\n      // module: terserOptions.module,\n      // nameCache: { ...terserOptions.toplevel },\n      // the `output` option is deprecated\n      ...(terserOptions.format ? {\n        format: {\n          beautify: false,\n          ...terserOptions.format\n        }\n      } : {\n        output: {\n          beautify: false,\n          ...terserOptions.output\n        }\n      }),\n      parse: {\n        ...terserOptions.parse\n      },\n      // safari10: terserOptions.safari10,\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n      // toplevel: terserOptions.toplevel\n    };\n  };\n\n  // eslint-disable-next-line global-require\n  const {\n    minify\n  } = require(\"terser\");\n  // Copy `terser` options\n  const terserOptions = buildTerserOptions(minimizerOptions);\n\n  // Let terser generate a SourceMap\n  if (sourceMap) {\n    // @ts-ignore\n    terserOptions.sourceMap = {\n      asObject: true\n    };\n  }\n\n  /** @type {ExtractedComments} */\n  const extractedComments = [];\n  if (terserOptions.output) {\n    terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n  } else if (terserOptions.format) {\n    terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n  }\n  if (terserOptions.compress) {\n    // More optimizations\n    if (typeof terserOptions.compress.ecma === \"undefined\") {\n      terserOptions.compress.ecma = terserOptions.ecma;\n    }\n\n    // https://github.com/webpack/webpack/issues/16135\n    if (terserOptions.ecma === 5 && typeof terserOptions.compress.arrows === \"undefined\") {\n      terserOptions.compress.arrows = false;\n    }\n  }\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, terserOptions);\n  return {\n    code: /** @type {string} **/result.code,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    map: result.map ? /** @type {SourceMapInput} **/result.map : undefined,\n    extractedComments\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\nasync function uglifyJsMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n\n  /**\n   * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n  const buildComments = (uglifyJsOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    const {\n      comments\n    } = uglifyJsOptions.output;\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    }\n\n    // Ensure that both conditions are functions\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n      let regex;\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n        case \"function\":\n          break;\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n            break;\n          }\n          if (condition[key] === \"some\") {\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n            break;\n          }\n          regexStr = /** @type {string} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp( /** @type {string} */regexStr).test(comment.value);\n          break;\n        default:\n          regex = /** @type {RegExp} */condition[key];\n          condition[key] = /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => /** @type {RegExp} */regex.test(comment.value);\n      }\n    });\n\n    // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n    return (astNode, comment) => {\n      if ( /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`;\n\n        // Don't include duplicate comments\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n      return (/** @type {{ preserve: ExtractCommentsFunction }} */condition.preserve(astNode, comment)\n      );\n    };\n  };\n\n  /**\n   * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n   * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n   */\n  const buildUglifyJsOptions = (uglifyJsOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.ecma;\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.module;\n\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      ...uglifyJsOptions,\n      // warnings: uglifyJsOptions.warnings,\n      parse: {\n        ...uglifyJsOptions.parse\n      },\n      compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : {\n        ...uglifyJsOptions.compress\n      },\n      mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : {\n        ...uglifyJsOptions.mangle\n      },\n      output: {\n        beautify: false,\n        ...uglifyJsOptions.output\n      },\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n      // toplevel: uglifyJsOptions.toplevel\n      // nameCache: { ...uglifyJsOptions.toplevel },\n      // ie8: uglifyJsOptions.ie8,\n      // keep_fnames: uglifyJsOptions.keep_fnames,\n    };\n  };\n\n  // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n  const {\n    minify\n  } = require(\"uglify-js\");\n\n  // Copy `uglify-js` options\n  const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions);\n\n  // Let terser generate a SourceMap\n  if (sourceMap) {\n    // @ts-ignore\n    uglifyJsOptions.sourceMap = true;\n  }\n\n  /** @type {ExtractedComments} */\n  const extractedComments = [];\n\n  // @ts-ignore\n  uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, uglifyJsOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    errors: result.error ? [result.error] : [],\n    warnings: result.warnings || [],\n    extractedComments\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\nasync function swcMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n   * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined } & { compress: import(\"@swc/core\").TerserCompressOptions }}\n   */\n  const buildSwcOptions = (swcOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      ...swcOptions,\n      compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress ? {} : false : {\n        ...swcOptions.compress\n      },\n      mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : {\n        ...swcOptions.mangle\n      },\n      // ecma: swcOptions.ecma,\n      // keep_classnames: swcOptions.keep_classnames,\n      // keep_fnames: swcOptions.keep_fnames,\n      // module: swcOptions.module,\n      // safari10: swcOptions.safari10,\n      // toplevel: swcOptions.toplevel\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n    };\n  };\n\n  // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n  const swc = require(\"@swc/core\");\n  // Copy `swc` options\n  const swcOptions = buildSwcOptions(minimizerOptions);\n\n  // Let `swc` generate a SourceMap\n  if (sourceMap) {\n    // @ts-ignore\n    swcOptions.sourceMap = true;\n  }\n  if (swcOptions.compress) {\n    // More optimizations\n    if (typeof swcOptions.compress.ecma === \"undefined\") {\n      swcOptions.compress.ecma = swcOptions.ecma;\n    }\n\n    // https://github.com/webpack/webpack/issues/16135\n    if (swcOptions.ecma === 5 && typeof swcOptions.compress.arrows === \"undefined\") {\n      swcOptions.compress.arrows = false;\n    }\n  }\n  const [[filename, code]] = Object.entries(input);\n  const result = await swc.minify(code, swcOptions);\n  let map;\n  if (result.map) {\n    map = JSON.parse(result.map);\n\n    // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n    map.sources = [filename];\n    delete map.sourcesContent;\n  }\n  return {\n    code: result.code,\n    map\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\n\n/* istanbul ignore next */\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = (esbuildOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.ecma;\n    if (esbuildOptions.module) {\n      // eslint-disable-next-line no-param-reassign\n      esbuildOptions.format = \"esm\";\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.module;\n\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  };\n\n  // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n  const esbuild = require(\"esbuild\");\n\n  // Copy `esbuild` options\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions);\n\n  // Let `esbuild` generate a SourceMap\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      const plugin = item.pluginName ? `\\nPlugin Name: ${item.pluginName}` : \"\";\n      const location = item.location ? `\\n\\n${item.location.file}:${item.location.line}:${item.location.column}:\\n  ${item.location.line} | ${item.location.lineText}\\n\\nSuggestion: ${item.location.suggestion}` : \"\";\n      const notes = item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\";\n      return `${item.text} [${item.id}]${plugin}${location}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${notes}`;\n    }) : []\n  };\n}\n\n/**\n * @returns {string | undefined}\n */\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n  return packageJson && packageJson.version;\n};\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}