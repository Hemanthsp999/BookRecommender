{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DllEntryPlugin = require(\"./DllEntryPlugin\");\nconst FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\nconst LibManifestPlugin = require(\"./LibManifestPlugin\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/DllPlugin.check.js\"), () => require(\"../schemas/plugins/DllPlugin.json\"), {\n  name: \"Dll Plugin\",\n  baseDataPath: \"options\"\n});\nclass DllPlugin {\n  /**\n   * @param {DllPluginOptions} options options object\n   */\n  constructor(options) {\n    validate(options);\n    this.options = {\n      ...options,\n      entryOnly: options.entryOnly !== false\n    };\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.entryOption.tap(\"DllPlugin\", (context, entry) => {\n      if (typeof entry !== \"function\") {\n        for (const name of Object.keys(entry)) {\n          const options = {\n            name,\n            filename: entry.filename\n          };\n          new DllEntryPlugin(context, entry[name].import, options).apply(compiler);\n        }\n      } else {\n        throw new Error(\"DllPlugin doesn't support dynamic entry (function) yet\");\n      }\n      return true;\n    });\n    new LibManifestPlugin(this.options).apply(compiler);\n    if (!this.options.entryOnly) {\n      new FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n    }\n  }\n}\nmodule.exports = DllPlugin;","map":{"version":3,"names":["DllEntryPlugin","require","FlagAllModulesAsUsedPlugin","LibManifestPlugin","createSchemaValidation","validate","name","baseDataPath","DllPlugin","constructor","options","entryOnly","apply","compiler","hooks","entryOption","tap","context","entry","Object","keys","filename","import","Error","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/DllPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DllEntryPlugin = require(\"./DllEntryPlugin\");\nconst FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\nconst LibManifestPlugin = require(\"./LibManifestPlugin\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/DllPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/DllPlugin.json\"),\n\t{\n\t\tname: \"Dll Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass DllPlugin {\n\t/**\n\t * @param {DllPluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = {\n\t\t\t...options,\n\t\t\tentryOnly: options.entryOnly !== false\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"DllPlugin\", (context, entry) => {\n\t\t\tif (typeof entry !== \"function\") {\n\t\t\t\tfor (const name of Object.keys(entry)) {\n\t\t\t\t\tconst options = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tfilename: entry.filename\n\t\t\t\t\t};\n\t\t\t\t\tnew DllEntryPlugin(context, entry[name].import, options).apply(\n\t\t\t\t\t\tcompiler\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"DllPlugin doesn't support dynamic entry (function) yet\"\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\tnew LibManifestPlugin(this.options).apply(compiler);\n\t\tif (!this.options.entryOnly) {\n\t\t\tnew FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n\t\t}\n\t}\n}\n\nmodule.exports = DllPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMC,0BAA0B,GAAGD,OAAO,CAAC,8BAA8B,CAAC;AAC1E,MAAME,iBAAiB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AACxD,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,iCAAiC,CAAC;;AAEzE;AACA;;AAEA,MAAMI,QAAQ,GAAGD,sBAAsB,CACtCH,OAAO,CAAC,uCAAuC,CAAC,EAChD,MAAMA,OAAO,CAAC,mCAAmC,CAAC,EAClD;EACCK,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAE;AACf,CACD,CAAC;AAED,MAAMC,SAAS,CAAC;EACf;AACD;AACA;EACCC,WAAWA,CAACC,OAAO,EAAE;IACpBL,QAAQ,CAACK,OAAO,CAAC;IACjB,IAAI,CAACA,OAAO,GAAG;MACd,GAAGA,OAAO;MACVC,SAAS,EAAED,OAAO,CAACC,SAAS,KAAK;IAClC,CAAC;EACF;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAAC,WAAW,EAAE,CAACC,OAAO,EAAEC,KAAK,KAAK;MAC/D,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;QAChC,KAAK,MAAMZ,IAAI,IAAIa,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,EAAE;UACtC,MAAMR,OAAO,GAAG;YACfJ,IAAI;YACJe,QAAQ,EAAEH,KAAK,CAACG;UACjB,CAAC;UACD,IAAIrB,cAAc,CAACiB,OAAO,EAAEC,KAAK,CAACZ,IAAI,CAAC,CAACgB,MAAM,EAAEZ,OAAO,CAAC,CAACE,KAAK,CAC7DC,QACD,CAAC;QACF;MACD,CAAC,MAAM;QACN,MAAM,IAAIU,KAAK,CACd,wDACD,CAAC;MACF;MACA,OAAO,IAAI;IACZ,CAAC,CAAC;IACF,IAAIpB,iBAAiB,CAAC,IAAI,CAACO,OAAO,CAAC,CAACE,KAAK,CAACC,QAAQ,CAAC;IACnD,IAAI,CAAC,IAAI,CAACH,OAAO,CAACC,SAAS,EAAE;MAC5B,IAAIT,0BAA0B,CAAC,WAAW,CAAC,CAACU,KAAK,CAACC,QAAQ,CAAC;IAC5D;EACD;AACD;AAEAW,MAAM,CAACC,OAAO,GAAGjB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}