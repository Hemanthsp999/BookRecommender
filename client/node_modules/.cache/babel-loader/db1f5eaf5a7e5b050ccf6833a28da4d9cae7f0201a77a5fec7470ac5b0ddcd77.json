{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nmodule.exports = class AppendPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string} appending appending\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, appending, target) {\n    this.source = source;\n    this.appending = appending;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"AppendPlugin\", (request, resolveContext, callback) => {\n      /** @type {ResolveRequest} */\n      const obj = {\n        ...request,\n        path: request.path + this.appending,\n        relativePath: request.relativePath && request.relativePath + this.appending\n      };\n      resolver.doResolve(target, obj, this.appending, resolveContext, callback);\n    });\n  }\n};","map":{"version":3,"names":["module","exports","AppendPlugin","constructor","source","appending","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","obj","path","relativePath","doResolve"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/AppendPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class AppendPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string} appending appending\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, appending, target) {\n\t\tthis.source = source;\n\t\tthis.appending = appending;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"AppendPlugin\", (request, resolveContext, callback) => {\n\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: request.path + this.appending,\n\t\t\t\t\trelativePath:\n\t\t\t\t\t\trequest.relativePath && request.relativePath + this.appending\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\tthis.appending,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG,MAAMC,YAAY,CAAC;EACnC;AACD;AACA;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAE;IACtC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/CE,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACN,MAAM,CAAC,CACpBO,QAAQ,CAAC,cAAc,EAAE,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MAChE;MACA,MAAMC,GAAG,GAAG;QACX,GAAGH,OAAO;QACVI,IAAI,EAAEJ,OAAO,CAACI,IAAI,GAAG,IAAI,CAACX,SAAS;QACnCY,YAAY,EACXL,OAAO,CAACK,YAAY,IAAIL,OAAO,CAACK,YAAY,GAAG,IAAI,CAACZ;MACtD,CAAC;MACDG,QAAQ,CAACU,SAAS,CACjBZ,MAAM,EACNS,GAAG,EACH,IAAI,CAACV,SAAS,EACdQ,cAAc,EACdC,QACD,CAAC;IACF,CAAC,CAAC;EACJ;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}