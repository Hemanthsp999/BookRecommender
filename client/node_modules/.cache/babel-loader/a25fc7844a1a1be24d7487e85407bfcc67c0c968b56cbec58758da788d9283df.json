{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  WEBASSEMBLY_MODULE_TYPE_ASYNC\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass FetchCompileAsyncWasmPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"FetchCompileAsyncWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"fetch\";\n      };\n      const generateLoadBinaryCode = path => `fetch(${RuntimeGlobals.publicPath} + ${path})`;\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.instantiateWasm).tap(\"FetchCompileAsyncWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === WEBASSEMBLY_MODULE_TYPE_ASYNC)) {\n          return;\n        }\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new AsyncWasmLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: true\n        }));\n      });\n    });\n  }\n}\nmodule.exports = FetchCompileAsyncWasmPlugin;","map":{"version":3,"names":["WEBASSEMBLY_MODULE_TYPE_ASYNC","require","RuntimeGlobals","AsyncWasmLoadingRuntimeModule","FetchCompileAsyncWasmPlugin","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","options","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","instantiateWasm","set","chunkGraph","hasModuleInGraph","m","type","add","addRuntimeModule","supportsStreaming","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/web/FetchCompileAsyncWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { WEBASSEMBLY_MODULE_TYPE_ASYNC } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass FetchCompileAsyncWasmPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileAsyncWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.instantiateWasm)\n\t\t\t\t\t.tap(\"FetchCompileAsyncWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === WEBASSEMBLY_MODULE_TYPE_ASYNC\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AsyncWasmLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileAsyncWasmPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAA8B,CAAC,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAC3E,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAME,6BAA6B,GAAGF,OAAO,CAAC,6CAA6C,CAAC;;AAE5F;;AAEA,MAAMG,2BAA2B,CAAC;EACjC;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,6BAA6B,EAC7BC,WAAW,IAAI;MACd,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAa,CAACC,WAAW;MAC/D,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;QAClC,MAAMC,OAAO,GAAGD,KAAK,CAACE,eAAe,CAAC,CAAC;QACvC,MAAMJ,WAAW,GAChBG,OAAO,IAAIA,OAAO,CAACH,WAAW,KAAKK,SAAS,GACzCF,OAAO,CAACH,WAAW,GACnBF,iBAAiB;QACrB,OAAOE,WAAW,KAAK,OAAO;MAC/B,CAAC;MACD,MAAMM,sBAAsB,GAAGC,IAAI,IACjC,SAAQlB,cAAc,CAACmB,UAAW,MAAKD,IAAK,GAAE;MAEhDV,WAAW,CAACH,KAAK,CAACe,wBAAwB,CACxCC,GAAG,CAACrB,cAAc,CAACsB,eAAe,CAAC,CACnCf,GAAG,CAAC,6BAA6B,EAAE,CAACM,KAAK,EAAEU,GAAG,KAAK;QACnD,IAAI,CAACX,iBAAiB,CAACC,KAAK,CAAC,EAAE;QAC/B,MAAMW,UAAU,GAAGhB,WAAW,CAACgB,UAAU;QACzC,IACC,CAACA,UAAU,CAACC,gBAAgB,CAC3BZ,KAAK,EACLa,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK7B,6BACjB,CAAC,EACA;UACD;QACD;QACAyB,GAAG,CAACK,GAAG,CAAC5B,cAAc,CAACmB,UAAU,CAAC;QAClCX,WAAW,CAACqB,gBAAgB,CAC3BhB,KAAK,EACL,IAAIZ,6BAA6B,CAAC;UACjCgB,sBAAsB;UACtBa,iBAAiB,EAAE;QACpB,CAAC,CACF,CAAC;MACF,CAAC,CAAC;IACJ,CACD,CAAC;EACF;AACD;AAEAC,MAAM,CAACC,OAAO,GAAG9B,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}