{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst NormalModule = require(\"./NormalModule\");\nconst createHash = require(\"./util/createHash\");\nconst memoize = require(\"./util/memoize\");\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n\n/** @typedef {string | RegExp | (string | RegExp)[]} Matcher */\n/** @typedef {{test?: Matcher, include?: Matcher, exclude?: Matcher }} MatchObject */\n\nconst ModuleFilenameHelpers = exports;\n\n// TODO webpack 6: consider removing these\nModuleFilenameHelpers.ALL_LOADERS_RESOURCE = \"[all-loaders][resource]\";\nModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE = /\\[all-?loaders\\]\\[resource\\]/gi;\nModuleFilenameHelpers.LOADERS_RESOURCE = \"[loaders][resource]\";\nModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE = /\\[loaders\\]\\[resource\\]/gi;\nModuleFilenameHelpers.RESOURCE = \"[resource]\";\nModuleFilenameHelpers.REGEXP_RESOURCE = /\\[resource\\]/gi;\nModuleFilenameHelpers.ABSOLUTE_RESOURCE_PATH = \"[absolute-resource-path]\";\n// cSpell:words olute\nModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH = /\\[abs(olute)?-?resource-?path\\]/gi;\nModuleFilenameHelpers.RESOURCE_PATH = \"[resource-path]\";\nModuleFilenameHelpers.REGEXP_RESOURCE_PATH = /\\[resource-?path\\]/gi;\nModuleFilenameHelpers.ALL_LOADERS = \"[all-loaders]\";\nModuleFilenameHelpers.REGEXP_ALL_LOADERS = /\\[all-?loaders\\]/gi;\nModuleFilenameHelpers.LOADERS = \"[loaders]\";\nModuleFilenameHelpers.REGEXP_LOADERS = /\\[loaders\\]/gi;\nModuleFilenameHelpers.QUERY = \"[query]\";\nModuleFilenameHelpers.REGEXP_QUERY = /\\[query\\]/gi;\nModuleFilenameHelpers.ID = \"[id]\";\nModuleFilenameHelpers.REGEXP_ID = /\\[id\\]/gi;\nModuleFilenameHelpers.HASH = \"[hash]\";\nModuleFilenameHelpers.REGEXP_HASH = /\\[hash\\]/gi;\nModuleFilenameHelpers.NAMESPACE = \"[namespace]\";\nModuleFilenameHelpers.REGEXP_NAMESPACE = /\\[namespace\\]/gi;\n\n/**\n * Returns a function that returns the part of the string after the token\n * @param {() => string} strFn the function to get the string\n * @param {string} token the token to search for\n * @returns {() => string} a function that returns the part of the string after the token\n */\nconst getAfter = (strFn, token) => {\n  return () => {\n    const str = strFn();\n    const idx = str.indexOf(token);\n    return idx < 0 ? \"\" : str.slice(idx);\n  };\n};\n\n/**\n * Returns a function that returns the part of the string before the token\n * @param {() => string} strFn the function to get the string\n * @param {string} token the token to search for\n * @returns {() => string} a function that returns the part of the string before the token\n */\nconst getBefore = (strFn, token) => {\n  return () => {\n    const str = strFn();\n    const idx = str.lastIndexOf(token);\n    return idx < 0 ? \"\" : str.slice(0, idx);\n  };\n};\n\n/**\n * Returns a function that returns a hash of the string\n * @param {() => string} strFn the function to get the string\n * @param {string | Hash} hashFunction the hash function to use\n * @returns {() => string} a function that returns the hash of the string\n */\nconst getHash = (strFn, hashFunction) => {\n  return () => {\n    const hash = createHash(hashFunction);\n    hash.update(strFn());\n    const digest = /** @type {string} */hash.digest(\"hex\");\n    return digest.slice(0, 4);\n  };\n};\n\n/**\n * Returns a function that returns the string with the token replaced with the replacement\n * @param {string|RegExp} test A regular expression string or Regular Expression object\n * @returns\t{RegExp} A regular expression object\n * @example\n * ```js\n * const test = asRegExp(\"test\");\n * test.test(\"test\"); // true\n *\n * const test2 = asRegExp(/test/);\n * test2.test(\"test\"); // true\n * ```\n */\nconst asRegExp = test => {\n  if (typeof test === \"string\") {\n    // Escape special characters in the string to prevent them from being interpreted as special characters in a regular expression. Do this by\n    // adding a backslash before each special character\n    test = new RegExp(\"^\" + test.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\"));\n  }\n  return test;\n};\n\n/**\n * @template T\n * Returns a lazy object. The object is lazy in the sense that the properties are\n * only evaluated when they are accessed. This is only obtained by setting a function as the value for each key.\n * @param {Record<string, () => T>} obj the object to covert to a lazy access object\n * @returns {Object} the lazy access object\n */\nconst lazyObject = obj => {\n  const newObj = {};\n  for (const key of Object.keys(obj)) {\n    const fn = obj[key];\n    Object.defineProperty(newObj, key, {\n      get: () => fn(),\n      set: v => {\n        Object.defineProperty(newObj, key, {\n          value: v,\n          enumerable: true,\n          writable: true\n        });\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return newObj;\n};\nconst SQUARE_BRACKET_TAG_REGEXP = /\\[\\\\*([\\w-]+)\\\\*\\]/gi;\n\n/**\n *\n * @param {Module | string} module the module\n * @param {TODO} options options\n * @param {Object} contextInfo context info\n * @param {RequestShortener} contextInfo.requestShortener requestShortener\n * @param {ChunkGraph} contextInfo.chunkGraph chunk graph\n * @param {string | Hash} contextInfo.hashFunction the hash function to use\n * @returns {string} the filename\n */\nModuleFilenameHelpers.createFilename = function () {\n  let module = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  let {\n    requestShortener,\n    chunkGraph,\n    hashFunction = \"md4\"\n  } = arguments.length > 2 ? arguments[2] : undefined;\n  const opts = {\n    namespace: \"\",\n    moduleFilenameTemplate: \"\",\n    ...(typeof options === \"object\" ? options : {\n      moduleFilenameTemplate: options\n    })\n  };\n  let absoluteResourcePath;\n  let hash;\n  let identifier;\n  let moduleId;\n  let shortIdentifier;\n  if (typeof module === \"string\") {\n    shortIdentifier = memoize(() => requestShortener.shorten(module));\n    identifier = shortIdentifier;\n    moduleId = () => \"\";\n    absoluteResourcePath = () => module.split(\"!\").pop();\n    hash = getHash(identifier, hashFunction);\n  } else {\n    shortIdentifier = memoize(() => module.readableIdentifier(requestShortener));\n    identifier = memoize(() => requestShortener.shorten(module.identifier()));\n    moduleId = () => chunkGraph.getModuleId(module);\n    absoluteResourcePath = () => module instanceof NormalModule ? module.resource : module.identifier().split(\"!\").pop();\n    hash = getHash(identifier, hashFunction);\n  }\n  const resource = memoize(() => shortIdentifier().split(\"!\").pop());\n  const loaders = getBefore(shortIdentifier, \"!\");\n  const allLoaders = getBefore(identifier, \"!\");\n  const query = getAfter(resource, \"?\");\n  const resourcePath = () => {\n    const q = query().length;\n    return q === 0 ? resource() : resource().slice(0, -q);\n  };\n  if (typeof opts.moduleFilenameTemplate === \"function\") {\n    return opts.moduleFilenameTemplate(lazyObject({\n      identifier: identifier,\n      shortIdentifier: shortIdentifier,\n      resource: resource,\n      resourcePath: memoize(resourcePath),\n      absoluteResourcePath: memoize(absoluteResourcePath),\n      loaders: memoize(loaders),\n      allLoaders: memoize(allLoaders),\n      query: memoize(query),\n      moduleId: memoize(moduleId),\n      hash: memoize(hash),\n      namespace: () => opts.namespace\n    }));\n  }\n\n  // TODO webpack 6: consider removing alternatives without dashes\n  /** @type {Map<string, function(): string>} */\n  const replacements = new Map([[\"identifier\", identifier], [\"short-identifier\", shortIdentifier], [\"resource\", resource], [\"resource-path\", resourcePath],\n  // cSpell:words resourcepath\n  [\"resourcepath\", resourcePath], [\"absolute-resource-path\", absoluteResourcePath], [\"abs-resource-path\", absoluteResourcePath],\n  // cSpell:words absoluteresource\n  [\"absoluteresource-path\", absoluteResourcePath],\n  // cSpell:words absresource\n  [\"absresource-path\", absoluteResourcePath],\n  // cSpell:words resourcepath\n  [\"absolute-resourcepath\", absoluteResourcePath],\n  // cSpell:words resourcepath\n  [\"abs-resourcepath\", absoluteResourcePath],\n  // cSpell:words absoluteresourcepath\n  [\"absoluteresourcepath\", absoluteResourcePath],\n  // cSpell:words absresourcepath\n  [\"absresourcepath\", absoluteResourcePath], [\"all-loaders\", allLoaders],\n  // cSpell:words allloaders\n  [\"allloaders\", allLoaders], [\"loaders\", loaders], [\"query\", query], [\"id\", moduleId], [\"hash\", hash], [\"namespace\", () => opts.namespace]]);\n\n  // TODO webpack 6: consider removing weird double placeholders\n  return opts.moduleFilenameTemplate.replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE, \"[identifier]\").replace(ModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE, \"[short-identifier]\").replace(SQUARE_BRACKET_TAG_REGEXP, (match, content) => {\n    if (content.length + 2 === match.length) {\n      const replacement = replacements.get(content.toLowerCase());\n      if (replacement !== undefined) {\n        return replacement();\n      }\n    } else if (match.startsWith(\"[\\\\\") && match.endsWith(\"\\\\]\")) {\n      return `[${match.slice(2, -2)}]`;\n    }\n    return match;\n  });\n};\n\n/**\n * Replaces duplicate items in an array with new values generated by a callback function.\n * The callback function is called with the duplicate item, the index of the duplicate item, and the number of times the item has been replaced.\n * The callback function should return the new value for the duplicate item.\n *\n * @template T\n * @param {T[]} array the array with duplicates to be replaced\n * @param {(duplicateItem: T, duplicateItemIndex: number, numberOfTimesReplaced: number) => T} fn callback function to generate new values for the duplicate items\n * @param {(firstElement:T, nextElement:T) => -1 | 0 | 1} [comparator] optional comparator function to sort the duplicate items\n * @returns {T[]} the array with duplicates replaced\n *\n * @example\n * ```js\n * const array = [\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"];\n * const result = ModuleFilenameHelpers.replaceDuplicates(array, (item, index, count) => `${item}-${count}`);\n * // result: [\"a-1\", \"b-1\", \"c\", \"a-2\", \"b-2\", \"a-3\"]\n * ```\n */\nModuleFilenameHelpers.replaceDuplicates = (array, fn, comparator) => {\n  const countMap = Object.create(null);\n  const posMap = Object.create(null);\n  array.forEach((item, idx) => {\n    countMap[item] = countMap[item] || [];\n    countMap[item].push(idx);\n    posMap[item] = 0;\n  });\n  if (comparator) {\n    Object.keys(countMap).forEach(item => {\n      countMap[item].sort(comparator);\n    });\n  }\n  return array.map((item, i) => {\n    if (countMap[item].length > 1) {\n      if (comparator && countMap[item][0] === i) return item;\n      return fn(item, i, posMap[item]++);\n    } else {\n      return item;\n    }\n  });\n};\n\n/**\n * Tests if a string matches a RegExp or an array of RegExp.\n *\n * @param {string} str string to test\n * @param {Matcher} test value which will be used to match against the string\n * @returns {boolean} true, when the RegExp matches\n *\n * @example\n * ```js\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo\"); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo.js\"); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo.\"); // false\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo*\"); // false\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo.*\"); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", /^foo/); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^foo/, \"bar\"]); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^foo/, \"bar\"]); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^foo/, /^bar/]); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^baz/, /^bar/]); // false\n * ```\n */\nModuleFilenameHelpers.matchPart = (str, test) => {\n  if (!test) return true;\n  if (Array.isArray(test)) {\n    return test.map(asRegExp).some(regExp => regExp.test(str));\n  } else {\n    return asRegExp(test).test(str);\n  }\n};\n\n/**\n * Tests if a string matches a match object. The match object can have the following properties:\n * - `test`: a RegExp or an array of RegExp\n * - `include`: a RegExp or an array of RegExp\n * - `exclude`: a RegExp or an array of RegExp\n *\n * The `test` property is tested first, then `include` and then `exclude`.\n *\n * @param {MatchObject} obj a match object to test against the string\n * @param {string} str string to test against the matching object\n * @returns {boolean} true, when the object matches\n * @example\n * ```js\n * ModuleFilenameHelpers.matchObject({ test: \"foo.js\" }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ test: /^foo/ }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ test: [/^foo/, \"bar\"] }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ test: [/^foo/, \"bar\"] }, \"baz.js\"); // false\n * ModuleFilenameHelpers.matchObject({ include: \"foo.js\" }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ include: \"foo.js\" }, \"bar.js\"); // false\n * ModuleFilenameHelpers.matchObject({ include: /^foo/ }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ include: [/^foo/, \"bar\"] }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ include: [/^foo/, \"bar\"] }, \"baz.js\"); // false\n * ModuleFilenameHelpers.matchObject({ exclude: \"foo.js\" }, \"foo.js\"); // false\n * ModuleFilenameHelpers.matchObject({ exclude: [/^foo/, \"bar\"] }, \"foo.js\"); // false\n * ```\n */\nModuleFilenameHelpers.matchObject = (obj, str) => {\n  if (obj.test) {\n    if (!ModuleFilenameHelpers.matchPart(str, obj.test)) {\n      return false;\n    }\n  }\n  if (obj.include) {\n    if (!ModuleFilenameHelpers.matchPart(str, obj.include)) {\n      return false;\n    }\n  }\n  if (obj.exclude) {\n    if (ModuleFilenameHelpers.matchPart(str, obj.exclude)) {\n      return false;\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["NormalModule","require","createHash","memoize","ModuleFilenameHelpers","exports","ALL_LOADERS_RESOURCE","REGEXP_ALL_LOADERS_RESOURCE","LOADERS_RESOURCE","REGEXP_LOADERS_RESOURCE","RESOURCE","REGEXP_RESOURCE","ABSOLUTE_RESOURCE_PATH","REGEXP_ABSOLUTE_RESOURCE_PATH","RESOURCE_PATH","REGEXP_RESOURCE_PATH","ALL_LOADERS","REGEXP_ALL_LOADERS","LOADERS","REGEXP_LOADERS","QUERY","REGEXP_QUERY","ID","REGEXP_ID","HASH","REGEXP_HASH","NAMESPACE","REGEXP_NAMESPACE","getAfter","strFn","token","str","idx","indexOf","slice","getBefore","lastIndexOf","getHash","hashFunction","hash","update","digest","asRegExp","test","RegExp","replace","lazyObject","obj","newObj","key","Object","keys","fn","defineProperty","get","set","v","value","enumerable","writable","configurable","SQUARE_BRACKET_TAG_REGEXP","createFilename","module","arguments","length","undefined","options","requestShortener","chunkGraph","opts","namespace","moduleFilenameTemplate","absoluteResourcePath","identifier","moduleId","shortIdentifier","shorten","split","pop","readableIdentifier","getModuleId","resource","loaders","allLoaders","query","resourcePath","q","replacements","Map","match","content","replacement","toLowerCase","startsWith","endsWith","replaceDuplicates","array","comparator","countMap","create","posMap","forEach","item","push","sort","map","i","matchPart","Array","isArray","some","regExp","matchObject","include","exclude"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/ModuleFilenameHelpers.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst NormalModule = require(\"./NormalModule\");\nconst createHash = require(\"./util/createHash\");\nconst memoize = require(\"./util/memoize\");\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n\n/** @typedef {string | RegExp | (string | RegExp)[]} Matcher */\n/** @typedef {{test?: Matcher, include?: Matcher, exclude?: Matcher }} MatchObject */\n\nconst ModuleFilenameHelpers = exports;\n\n// TODO webpack 6: consider removing these\nModuleFilenameHelpers.ALL_LOADERS_RESOURCE = \"[all-loaders][resource]\";\nModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE =\n\t/\\[all-?loaders\\]\\[resource\\]/gi;\nModuleFilenameHelpers.LOADERS_RESOURCE = \"[loaders][resource]\";\nModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE = /\\[loaders\\]\\[resource\\]/gi;\nModuleFilenameHelpers.RESOURCE = \"[resource]\";\nModuleFilenameHelpers.REGEXP_RESOURCE = /\\[resource\\]/gi;\nModuleFilenameHelpers.ABSOLUTE_RESOURCE_PATH = \"[absolute-resource-path]\";\n// cSpell:words olute\nModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH =\n\t/\\[abs(olute)?-?resource-?path\\]/gi;\nModuleFilenameHelpers.RESOURCE_PATH = \"[resource-path]\";\nModuleFilenameHelpers.REGEXP_RESOURCE_PATH = /\\[resource-?path\\]/gi;\nModuleFilenameHelpers.ALL_LOADERS = \"[all-loaders]\";\nModuleFilenameHelpers.REGEXP_ALL_LOADERS = /\\[all-?loaders\\]/gi;\nModuleFilenameHelpers.LOADERS = \"[loaders]\";\nModuleFilenameHelpers.REGEXP_LOADERS = /\\[loaders\\]/gi;\nModuleFilenameHelpers.QUERY = \"[query]\";\nModuleFilenameHelpers.REGEXP_QUERY = /\\[query\\]/gi;\nModuleFilenameHelpers.ID = \"[id]\";\nModuleFilenameHelpers.REGEXP_ID = /\\[id\\]/gi;\nModuleFilenameHelpers.HASH = \"[hash]\";\nModuleFilenameHelpers.REGEXP_HASH = /\\[hash\\]/gi;\nModuleFilenameHelpers.NAMESPACE = \"[namespace]\";\nModuleFilenameHelpers.REGEXP_NAMESPACE = /\\[namespace\\]/gi;\n\n/**\n * Returns a function that returns the part of the string after the token\n * @param {() => string} strFn the function to get the string\n * @param {string} token the token to search for\n * @returns {() => string} a function that returns the part of the string after the token\n */\nconst getAfter = (strFn, token) => {\n\treturn () => {\n\t\tconst str = strFn();\n\t\tconst idx = str.indexOf(token);\n\t\treturn idx < 0 ? \"\" : str.slice(idx);\n\t};\n};\n\n/**\n * Returns a function that returns the part of the string before the token\n * @param {() => string} strFn the function to get the string\n * @param {string} token the token to search for\n * @returns {() => string} a function that returns the part of the string before the token\n */\nconst getBefore = (strFn, token) => {\n\treturn () => {\n\t\tconst str = strFn();\n\t\tconst idx = str.lastIndexOf(token);\n\t\treturn idx < 0 ? \"\" : str.slice(0, idx);\n\t};\n};\n\n/**\n * Returns a function that returns a hash of the string\n * @param {() => string} strFn the function to get the string\n * @param {string | Hash} hashFunction the hash function to use\n * @returns {() => string} a function that returns the hash of the string\n */\nconst getHash = (strFn, hashFunction) => {\n\treturn () => {\n\t\tconst hash = createHash(hashFunction);\n\t\thash.update(strFn());\n\t\tconst digest = /** @type {string} */ (hash.digest(\"hex\"));\n\t\treturn digest.slice(0, 4);\n\t};\n};\n\n/**\n * Returns a function that returns the string with the token replaced with the replacement\n * @param {string|RegExp} test A regular expression string or Regular Expression object\n * @returns\t{RegExp} A regular expression object\n * @example\n * ```js\n * const test = asRegExp(\"test\");\n * test.test(\"test\"); // true\n *\n * const test2 = asRegExp(/test/);\n * test2.test(\"test\"); // true\n * ```\n */\nconst asRegExp = test => {\n\tif (typeof test === \"string\") {\n\t\t// Escape special characters in the string to prevent them from being interpreted as special characters in a regular expression. Do this by\n\t\t// adding a backslash before each special character\n\t\ttest = new RegExp(\"^\" + test.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\"));\n\t}\n\treturn test;\n};\n\n/**\n * @template T\n * Returns a lazy object. The object is lazy in the sense that the properties are\n * only evaluated when they are accessed. This is only obtained by setting a function as the value for each key.\n * @param {Record<string, () => T>} obj the object to covert to a lazy access object\n * @returns {Object} the lazy access object\n */\nconst lazyObject = obj => {\n\tconst newObj = {};\n\tfor (const key of Object.keys(obj)) {\n\t\tconst fn = obj[key];\n\t\tObject.defineProperty(newObj, key, {\n\t\t\tget: () => fn(),\n\t\t\tset: v => {\n\t\t\t\tObject.defineProperty(newObj, key, {\n\t\t\t\t\tvalue: v,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\twritable: true\n\t\t\t\t});\n\t\t\t},\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\treturn newObj;\n};\n\nconst SQUARE_BRACKET_TAG_REGEXP = /\\[\\\\*([\\w-]+)\\\\*\\]/gi;\n\n/**\n *\n * @param {Module | string} module the module\n * @param {TODO} options options\n * @param {Object} contextInfo context info\n * @param {RequestShortener} contextInfo.requestShortener requestShortener\n * @param {ChunkGraph} contextInfo.chunkGraph chunk graph\n * @param {string | Hash} contextInfo.hashFunction the hash function to use\n * @returns {string} the filename\n */\nModuleFilenameHelpers.createFilename = (\n\tmodule = \"\",\n\toptions,\n\t{ requestShortener, chunkGraph, hashFunction = \"md4\" }\n) => {\n\tconst opts = {\n\t\tnamespace: \"\",\n\t\tmoduleFilenameTemplate: \"\",\n\t\t...(typeof options === \"object\"\n\t\t\t? options\n\t\t\t: {\n\t\t\t\t\tmoduleFilenameTemplate: options\n\t\t\t  })\n\t};\n\n\tlet absoluteResourcePath;\n\tlet hash;\n\tlet identifier;\n\tlet moduleId;\n\tlet shortIdentifier;\n\tif (typeof module === \"string\") {\n\t\tshortIdentifier = memoize(() => requestShortener.shorten(module));\n\t\tidentifier = shortIdentifier;\n\t\tmoduleId = () => \"\";\n\t\tabsoluteResourcePath = () => module.split(\"!\").pop();\n\t\thash = getHash(identifier, hashFunction);\n\t} else {\n\t\tshortIdentifier = memoize(() =>\n\t\t\tmodule.readableIdentifier(requestShortener)\n\t\t);\n\t\tidentifier = memoize(() => requestShortener.shorten(module.identifier()));\n\t\tmoduleId = () => chunkGraph.getModuleId(module);\n\t\tabsoluteResourcePath = () =>\n\t\t\tmodule instanceof NormalModule\n\t\t\t\t? module.resource\n\t\t\t\t: module.identifier().split(\"!\").pop();\n\t\thash = getHash(identifier, hashFunction);\n\t}\n\tconst resource = memoize(() => shortIdentifier().split(\"!\").pop());\n\n\tconst loaders = getBefore(shortIdentifier, \"!\");\n\tconst allLoaders = getBefore(identifier, \"!\");\n\tconst query = getAfter(resource, \"?\");\n\tconst resourcePath = () => {\n\t\tconst q = query().length;\n\t\treturn q === 0 ? resource() : resource().slice(0, -q);\n\t};\n\tif (typeof opts.moduleFilenameTemplate === \"function\") {\n\t\treturn opts.moduleFilenameTemplate(\n\t\t\tlazyObject({\n\t\t\t\tidentifier: identifier,\n\t\t\t\tshortIdentifier: shortIdentifier,\n\t\t\t\tresource: resource,\n\t\t\t\tresourcePath: memoize(resourcePath),\n\t\t\t\tabsoluteResourcePath: memoize(absoluteResourcePath),\n\t\t\t\tloaders: memoize(loaders),\n\t\t\t\tallLoaders: memoize(allLoaders),\n\t\t\t\tquery: memoize(query),\n\t\t\t\tmoduleId: memoize(moduleId),\n\t\t\t\thash: memoize(hash),\n\t\t\t\tnamespace: () => opts.namespace\n\t\t\t})\n\t\t);\n\t}\n\n\t// TODO webpack 6: consider removing alternatives without dashes\n\t/** @type {Map<string, function(): string>} */\n\tconst replacements = new Map([\n\t\t[\"identifier\", identifier],\n\t\t[\"short-identifier\", shortIdentifier],\n\t\t[\"resource\", resource],\n\t\t[\"resource-path\", resourcePath],\n\t\t// cSpell:words resourcepath\n\t\t[\"resourcepath\", resourcePath],\n\t\t[\"absolute-resource-path\", absoluteResourcePath],\n\t\t[\"abs-resource-path\", absoluteResourcePath],\n\t\t// cSpell:words absoluteresource\n\t\t[\"absoluteresource-path\", absoluteResourcePath],\n\t\t// cSpell:words absresource\n\t\t[\"absresource-path\", absoluteResourcePath],\n\t\t// cSpell:words resourcepath\n\t\t[\"absolute-resourcepath\", absoluteResourcePath],\n\t\t// cSpell:words resourcepath\n\t\t[\"abs-resourcepath\", absoluteResourcePath],\n\t\t// cSpell:words absoluteresourcepath\n\t\t[\"absoluteresourcepath\", absoluteResourcePath],\n\t\t// cSpell:words absresourcepath\n\t\t[\"absresourcepath\", absoluteResourcePath],\n\t\t[\"all-loaders\", allLoaders],\n\t\t// cSpell:words allloaders\n\t\t[\"allloaders\", allLoaders],\n\t\t[\"loaders\", loaders],\n\t\t[\"query\", query],\n\t\t[\"id\", moduleId],\n\t\t[\"hash\", hash],\n\t\t[\"namespace\", () => opts.namespace]\n\t]);\n\n\t// TODO webpack 6: consider removing weird double placeholders\n\treturn opts.moduleFilenameTemplate\n\t\t.replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE, \"[identifier]\")\n\t\t.replace(\n\t\t\tModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE,\n\t\t\t\"[short-identifier]\"\n\t\t)\n\t\t.replace(SQUARE_BRACKET_TAG_REGEXP, (match, content) => {\n\t\t\tif (content.length + 2 === match.length) {\n\t\t\t\tconst replacement = replacements.get(content.toLowerCase());\n\t\t\t\tif (replacement !== undefined) {\n\t\t\t\t\treturn replacement();\n\t\t\t\t}\n\t\t\t} else if (match.startsWith(\"[\\\\\") && match.endsWith(\"\\\\]\")) {\n\t\t\t\treturn `[${match.slice(2, -2)}]`;\n\t\t\t}\n\t\t\treturn match;\n\t\t});\n};\n\n/**\n * Replaces duplicate items in an array with new values generated by a callback function.\n * The callback function is called with the duplicate item, the index of the duplicate item, and the number of times the item has been replaced.\n * The callback function should return the new value for the duplicate item.\n *\n * @template T\n * @param {T[]} array the array with duplicates to be replaced\n * @param {(duplicateItem: T, duplicateItemIndex: number, numberOfTimesReplaced: number) => T} fn callback function to generate new values for the duplicate items\n * @param {(firstElement:T, nextElement:T) => -1 | 0 | 1} [comparator] optional comparator function to sort the duplicate items\n * @returns {T[]} the array with duplicates replaced\n *\n * @example\n * ```js\n * const array = [\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"];\n * const result = ModuleFilenameHelpers.replaceDuplicates(array, (item, index, count) => `${item}-${count}`);\n * // result: [\"a-1\", \"b-1\", \"c\", \"a-2\", \"b-2\", \"a-3\"]\n * ```\n */\nModuleFilenameHelpers.replaceDuplicates = (array, fn, comparator) => {\n\tconst countMap = Object.create(null);\n\tconst posMap = Object.create(null);\n\n\tarray.forEach((item, idx) => {\n\t\tcountMap[item] = countMap[item] || [];\n\t\tcountMap[item].push(idx);\n\t\tposMap[item] = 0;\n\t});\n\tif (comparator) {\n\t\tObject.keys(countMap).forEach(item => {\n\t\t\tcountMap[item].sort(comparator);\n\t\t});\n\t}\n\treturn array.map((item, i) => {\n\t\tif (countMap[item].length > 1) {\n\t\t\tif (comparator && countMap[item][0] === i) return item;\n\t\t\treturn fn(item, i, posMap[item]++);\n\t\t} else {\n\t\t\treturn item;\n\t\t}\n\t});\n};\n\n/**\n * Tests if a string matches a RegExp or an array of RegExp.\n *\n * @param {string} str string to test\n * @param {Matcher} test value which will be used to match against the string\n * @returns {boolean} true, when the RegExp matches\n *\n * @example\n * ```js\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo\"); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo.js\"); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo.\"); // false\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo*\"); // false\n * ModuleFilenameHelpers.matchPart(\"foo.js\", \"foo.*\"); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", /^foo/); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^foo/, \"bar\"]); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^foo/, \"bar\"]); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^foo/, /^bar/]); // true\n * ModuleFilenameHelpers.matchPart(\"foo.js\", [/^baz/, /^bar/]); // false\n * ```\n */\nModuleFilenameHelpers.matchPart = (str, test) => {\n\tif (!test) return true;\n\n\tif (Array.isArray(test)) {\n\t\treturn test.map(asRegExp).some(regExp => regExp.test(str));\n\t} else {\n\t\treturn asRegExp(test).test(str);\n\t}\n};\n\n/**\n * Tests if a string matches a match object. The match object can have the following properties:\n * - `test`: a RegExp or an array of RegExp\n * - `include`: a RegExp or an array of RegExp\n * - `exclude`: a RegExp or an array of RegExp\n *\n * The `test` property is tested first, then `include` and then `exclude`.\n *\n * @param {MatchObject} obj a match object to test against the string\n * @param {string} str string to test against the matching object\n * @returns {boolean} true, when the object matches\n * @example\n * ```js\n * ModuleFilenameHelpers.matchObject({ test: \"foo.js\" }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ test: /^foo/ }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ test: [/^foo/, \"bar\"] }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ test: [/^foo/, \"bar\"] }, \"baz.js\"); // false\n * ModuleFilenameHelpers.matchObject({ include: \"foo.js\" }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ include: \"foo.js\" }, \"bar.js\"); // false\n * ModuleFilenameHelpers.matchObject({ include: /^foo/ }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ include: [/^foo/, \"bar\"] }, \"foo.js\"); // true\n * ModuleFilenameHelpers.matchObject({ include: [/^foo/, \"bar\"] }, \"baz.js\"); // false\n * ModuleFilenameHelpers.matchObject({ exclude: \"foo.js\" }, \"foo.js\"); // false\n * ModuleFilenameHelpers.matchObject({ exclude: [/^foo/, \"bar\"] }, \"foo.js\"); // false\n * ```\n */\nModuleFilenameHelpers.matchObject = (obj, str) => {\n\tif (obj.test) {\n\t\tif (!ModuleFilenameHelpers.matchPart(str, obj.test)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (obj.include) {\n\t\tif (!ModuleFilenameHelpers.matchPart(str, obj.include)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (obj.exclude) {\n\t\tif (ModuleFilenameHelpers.matchPart(str, obj.exclude)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMC,UAAU,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC/C,MAAME,OAAO,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAMG,qBAAqB,GAAGC,OAAO;;AAErC;AACAD,qBAAqB,CAACE,oBAAoB,GAAG,yBAAyB;AACtEF,qBAAqB,CAACG,2BAA2B,GAChD,gCAAgC;AACjCH,qBAAqB,CAACI,gBAAgB,GAAG,qBAAqB;AAC9DJ,qBAAqB,CAACK,uBAAuB,GAAG,2BAA2B;AAC3EL,qBAAqB,CAACM,QAAQ,GAAG,YAAY;AAC7CN,qBAAqB,CAACO,eAAe,GAAG,gBAAgB;AACxDP,qBAAqB,CAACQ,sBAAsB,GAAG,0BAA0B;AACzE;AACAR,qBAAqB,CAACS,6BAA6B,GAClD,mCAAmC;AACpCT,qBAAqB,CAACU,aAAa,GAAG,iBAAiB;AACvDV,qBAAqB,CAACW,oBAAoB,GAAG,sBAAsB;AACnEX,qBAAqB,CAACY,WAAW,GAAG,eAAe;AACnDZ,qBAAqB,CAACa,kBAAkB,GAAG,oBAAoB;AAC/Db,qBAAqB,CAACc,OAAO,GAAG,WAAW;AAC3Cd,qBAAqB,CAACe,cAAc,GAAG,eAAe;AACtDf,qBAAqB,CAACgB,KAAK,GAAG,SAAS;AACvChB,qBAAqB,CAACiB,YAAY,GAAG,aAAa;AAClDjB,qBAAqB,CAACkB,EAAE,GAAG,MAAM;AACjClB,qBAAqB,CAACmB,SAAS,GAAG,UAAU;AAC5CnB,qBAAqB,CAACoB,IAAI,GAAG,QAAQ;AACrCpB,qBAAqB,CAACqB,WAAW,GAAG,YAAY;AAChDrB,qBAAqB,CAACsB,SAAS,GAAG,aAAa;AAC/CtB,qBAAqB,CAACuB,gBAAgB,GAAG,iBAAiB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EAClC,OAAO,MAAM;IACZ,MAAMC,GAAG,GAAGF,KAAK,CAAC,CAAC;IACnB,MAAMG,GAAG,GAAGD,GAAG,CAACE,OAAO,CAACH,KAAK,CAAC;IAC9B,OAAOE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAGD,GAAG,CAACG,KAAK,CAACF,GAAG,CAAC;EACrC,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,SAAS,GAAGA,CAACN,KAAK,EAAEC,KAAK,KAAK;EACnC,OAAO,MAAM;IACZ,MAAMC,GAAG,GAAGF,KAAK,CAAC,CAAC;IACnB,MAAMG,GAAG,GAAGD,GAAG,CAACK,WAAW,CAACN,KAAK,CAAC;IAClC,OAAOE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAGD,GAAG,CAACG,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC;EACxC,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,OAAO,GAAGA,CAACR,KAAK,EAAES,YAAY,KAAK;EACxC,OAAO,MAAM;IACZ,MAAMC,IAAI,GAAGrC,UAAU,CAACoC,YAAY,CAAC;IACrCC,IAAI,CAACC,MAAM,CAACX,KAAK,CAAC,CAAC,CAAC;IACpB,MAAMY,MAAM,GAAG,qBAAuBF,IAAI,CAACE,MAAM,CAAC,KAAK,CAAE;IACzD,OAAOA,MAAM,CAACP,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1B,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,QAAQ,GAAGC,IAAI,IAAI;EACxB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC7B;IACA;IACAA,IAAI,GAAG,IAAIC,MAAM,CAAC,GAAG,GAAGD,IAAI,CAACE,OAAO,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;EAC1E;EACA,OAAOF,IAAI;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,UAAU,GAAGC,GAAG,IAAI;EACzB,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,MAAMC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,EAAE;IACnC,MAAMK,EAAE,GAAGL,GAAG,CAACE,GAAG,CAAC;IACnBC,MAAM,CAACG,cAAc,CAACL,MAAM,EAAEC,GAAG,EAAE;MAClCK,GAAG,EAAEA,CAAA,KAAMF,EAAE,CAAC,CAAC;MACfG,GAAG,EAAEC,CAAC,IAAI;QACTN,MAAM,CAACG,cAAc,CAACL,MAAM,EAAEC,GAAG,EAAE;UAClCQ,KAAK,EAAED,CAAC;UACRE,UAAU,EAAE,IAAI;UAChBC,QAAQ,EAAE;QACX,CAAC,CAAC;MACH,CAAC;MACDD,UAAU,EAAE,IAAI;MAChBE,YAAY,EAAE;IACf,CAAC,CAAC;EACH;EACA,OAAOZ,MAAM;AACd,CAAC;AAED,MAAMa,yBAAyB,GAAG,sBAAsB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzD,qBAAqB,CAAC0D,cAAc,GAAG,YAIlC;EAAA,IAHJC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IACXG,OAAO,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IACP;IAAEE,gBAAgB;IAAEC,UAAU;IAAE/B,YAAY,GAAG;EAAM,CAAC,GAAA0B,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEtD,MAAMI,IAAI,GAAG;IACZC,SAAS,EAAE,EAAE;IACbC,sBAAsB,EAAE,EAAE;IAC1B,IAAI,OAAOL,OAAO,KAAK,QAAQ,GAC5BA,OAAO,GACP;MACAK,sBAAsB,EAAEL;IACxB,CAAC;EACL,CAAC;EAED,IAAIM,oBAAoB;EACxB,IAAIlC,IAAI;EACR,IAAImC,UAAU;EACd,IAAIC,QAAQ;EACZ,IAAIC,eAAe;EACnB,IAAI,OAAOb,MAAM,KAAK,QAAQ,EAAE;IAC/Ba,eAAe,GAAGzE,OAAO,CAAC,MAAMiE,gBAAgB,CAACS,OAAO,CAACd,MAAM,CAAC,CAAC;IACjEW,UAAU,GAAGE,eAAe;IAC5BD,QAAQ,GAAGA,CAAA,KAAM,EAAE;IACnBF,oBAAoB,GAAGA,CAAA,KAAMV,MAAM,CAACe,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;IACpDxC,IAAI,GAAGF,OAAO,CAACqC,UAAU,EAAEpC,YAAY,CAAC;EACzC,CAAC,MAAM;IACNsC,eAAe,GAAGzE,OAAO,CAAC,MACzB4D,MAAM,CAACiB,kBAAkB,CAACZ,gBAAgB,CAC3C,CAAC;IACDM,UAAU,GAAGvE,OAAO,CAAC,MAAMiE,gBAAgB,CAACS,OAAO,CAACd,MAAM,CAACW,UAAU,CAAC,CAAC,CAAC,CAAC;IACzEC,QAAQ,GAAGA,CAAA,KAAMN,UAAU,CAACY,WAAW,CAAClB,MAAM,CAAC;IAC/CU,oBAAoB,GAAGA,CAAA,KACtBV,MAAM,YAAY/D,YAAY,GAC3B+D,MAAM,CAACmB,QAAQ,GACfnB,MAAM,CAACW,UAAU,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;IACxCxC,IAAI,GAAGF,OAAO,CAACqC,UAAU,EAAEpC,YAAY,CAAC;EACzC;EACA,MAAM4C,QAAQ,GAAG/E,OAAO,CAAC,MAAMyE,eAAe,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;EAElE,MAAMI,OAAO,GAAGhD,SAAS,CAACyC,eAAe,EAAE,GAAG,CAAC;EAC/C,MAAMQ,UAAU,GAAGjD,SAAS,CAACuC,UAAU,EAAE,GAAG,CAAC;EAC7C,MAAMW,KAAK,GAAGzD,QAAQ,CAACsD,QAAQ,EAAE,GAAG,CAAC;EACrC,MAAMI,YAAY,GAAGA,CAAA,KAAM;IAC1B,MAAMC,CAAC,GAAGF,KAAK,CAAC,CAAC,CAACpB,MAAM;IACxB,OAAOsB,CAAC,KAAK,CAAC,GAAGL,QAAQ,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAChD,KAAK,CAAC,CAAC,EAAE,CAACqD,CAAC,CAAC;EACtD,CAAC;EACD,IAAI,OAAOjB,IAAI,CAACE,sBAAsB,KAAK,UAAU,EAAE;IACtD,OAAOF,IAAI,CAACE,sBAAsB,CACjC1B,UAAU,CAAC;MACV4B,UAAU,EAAEA,UAAU;MACtBE,eAAe,EAAEA,eAAe;MAChCM,QAAQ,EAAEA,QAAQ;MAClBI,YAAY,EAAEnF,OAAO,CAACmF,YAAY,CAAC;MACnCb,oBAAoB,EAAEtE,OAAO,CAACsE,oBAAoB,CAAC;MACnDU,OAAO,EAAEhF,OAAO,CAACgF,OAAO,CAAC;MACzBC,UAAU,EAAEjF,OAAO,CAACiF,UAAU,CAAC;MAC/BC,KAAK,EAAElF,OAAO,CAACkF,KAAK,CAAC;MACrBV,QAAQ,EAAExE,OAAO,CAACwE,QAAQ,CAAC;MAC3BpC,IAAI,EAAEpC,OAAO,CAACoC,IAAI,CAAC;MACnBgC,SAAS,EAAEA,CAAA,KAAMD,IAAI,CAACC;IACvB,CAAC,CACF,CAAC;EACF;;EAEA;EACA;EACA,MAAMiB,YAAY,GAAG,IAAIC,GAAG,CAAC,CAC5B,CAAC,YAAY,EAAEf,UAAU,CAAC,EAC1B,CAAC,kBAAkB,EAAEE,eAAe,CAAC,EACrC,CAAC,UAAU,EAAEM,QAAQ,CAAC,EACtB,CAAC,eAAe,EAAEI,YAAY,CAAC;EAC/B;EACA,CAAC,cAAc,EAAEA,YAAY,CAAC,EAC9B,CAAC,wBAAwB,EAAEb,oBAAoB,CAAC,EAChD,CAAC,mBAAmB,EAAEA,oBAAoB,CAAC;EAC3C;EACA,CAAC,uBAAuB,EAAEA,oBAAoB,CAAC;EAC/C;EACA,CAAC,kBAAkB,EAAEA,oBAAoB,CAAC;EAC1C;EACA,CAAC,uBAAuB,EAAEA,oBAAoB,CAAC;EAC/C;EACA,CAAC,kBAAkB,EAAEA,oBAAoB,CAAC;EAC1C;EACA,CAAC,sBAAsB,EAAEA,oBAAoB,CAAC;EAC9C;EACA,CAAC,iBAAiB,EAAEA,oBAAoB,CAAC,EACzC,CAAC,aAAa,EAAEW,UAAU,CAAC;EAC3B;EACA,CAAC,YAAY,EAAEA,UAAU,CAAC,EAC1B,CAAC,SAAS,EAAED,OAAO,CAAC,EACpB,CAAC,OAAO,EAAEE,KAAK,CAAC,EAChB,CAAC,IAAI,EAAEV,QAAQ,CAAC,EAChB,CAAC,MAAM,EAAEpC,IAAI,CAAC,EACd,CAAC,WAAW,EAAE,MAAM+B,IAAI,CAACC,SAAS,CAAC,CACnC,CAAC;;EAEF;EACA,OAAOD,IAAI,CAACE,sBAAsB,CAChC3B,OAAO,CAACzC,qBAAqB,CAACG,2BAA2B,EAAE,cAAc,CAAC,CAC1EsC,OAAO,CACPzC,qBAAqB,CAACK,uBAAuB,EAC7C,oBACD,CAAC,CACAoC,OAAO,CAACgB,yBAAyB,EAAE,CAAC6B,KAAK,EAAEC,OAAO,KAAK;IACvD,IAAIA,OAAO,CAAC1B,MAAM,GAAG,CAAC,KAAKyB,KAAK,CAACzB,MAAM,EAAE;MACxC,MAAM2B,WAAW,GAAGJ,YAAY,CAAClC,GAAG,CAACqC,OAAO,CAACE,WAAW,CAAC,CAAC,CAAC;MAC3D,IAAID,WAAW,KAAK1B,SAAS,EAAE;QAC9B,OAAO0B,WAAW,CAAC,CAAC;MACrB;IACD,CAAC,MAAM,IAAIF,KAAK,CAACI,UAAU,CAAC,KAAK,CAAC,IAAIJ,KAAK,CAACK,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC5D,OAAQ,IAAGL,KAAK,CAACxD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,GAAE;IACjC;IACA,OAAOwD,KAAK;EACb,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtF,qBAAqB,CAAC4F,iBAAiB,GAAG,CAACC,KAAK,EAAE7C,EAAE,EAAE8C,UAAU,KAAK;EACpE,MAAMC,QAAQ,GAAGjD,MAAM,CAACkD,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMC,MAAM,GAAGnD,MAAM,CAACkD,MAAM,CAAC,IAAI,CAAC;EAElCH,KAAK,CAACK,OAAO,CAAC,CAACC,IAAI,EAAEvE,GAAG,KAAK;IAC5BmE,QAAQ,CAACI,IAAI,CAAC,GAAGJ,QAAQ,CAACI,IAAI,CAAC,IAAI,EAAE;IACrCJ,QAAQ,CAACI,IAAI,CAAC,CAACC,IAAI,CAACxE,GAAG,CAAC;IACxBqE,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC;EACjB,CAAC,CAAC;EACF,IAAIL,UAAU,EAAE;IACfhD,MAAM,CAACC,IAAI,CAACgD,QAAQ,CAAC,CAACG,OAAO,CAACC,IAAI,IAAI;MACrCJ,QAAQ,CAACI,IAAI,CAAC,CAACE,IAAI,CAACP,UAAU,CAAC;IAChC,CAAC,CAAC;EACH;EACA,OAAOD,KAAK,CAACS,GAAG,CAAC,CAACH,IAAI,EAAEI,CAAC,KAAK;IAC7B,IAAIR,QAAQ,CAACI,IAAI,CAAC,CAACtC,MAAM,GAAG,CAAC,EAAE;MAC9B,IAAIiC,UAAU,IAAIC,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAKI,CAAC,EAAE,OAAOJ,IAAI;MACtD,OAAOnD,EAAE,CAACmD,IAAI,EAAEI,CAAC,EAAEN,MAAM,CAACE,IAAI,CAAC,EAAE,CAAC;IACnC,CAAC,MAAM;MACN,OAAOA,IAAI;IACZ;EACD,CAAC,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnG,qBAAqB,CAACwG,SAAS,GAAG,CAAC7E,GAAG,EAAEY,IAAI,KAAK;EAChD,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EAEtB,IAAIkE,KAAK,CAACC,OAAO,CAACnE,IAAI,CAAC,EAAE;IACxB,OAAOA,IAAI,CAAC+D,GAAG,CAAChE,QAAQ,CAAC,CAACqE,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACrE,IAAI,CAACZ,GAAG,CAAC,CAAC;EAC3D,CAAC,MAAM;IACN,OAAOW,QAAQ,CAACC,IAAI,CAAC,CAACA,IAAI,CAACZ,GAAG,CAAC;EAChC;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3B,qBAAqB,CAAC6G,WAAW,GAAG,CAAClE,GAAG,EAAEhB,GAAG,KAAK;EACjD,IAAIgB,GAAG,CAACJ,IAAI,EAAE;IACb,IAAI,CAACvC,qBAAqB,CAACwG,SAAS,CAAC7E,GAAG,EAAEgB,GAAG,CAACJ,IAAI,CAAC,EAAE;MACpD,OAAO,KAAK;IACb;EACD;EACA,IAAII,GAAG,CAACmE,OAAO,EAAE;IAChB,IAAI,CAAC9G,qBAAqB,CAACwG,SAAS,CAAC7E,GAAG,EAAEgB,GAAG,CAACmE,OAAO,CAAC,EAAE;MACvD,OAAO,KAAK;IACb;EACD;EACA,IAAInE,GAAG,CAACoE,OAAO,EAAE;IAChB,IAAI/G,qBAAqB,CAACwG,SAAS,CAAC7E,GAAG,EAAEgB,GAAG,CAACoE,OAAO,CAAC,EAAE;MACtD,OAAO,KAAK;IACb;EACD;EACA,OAAO,IAAI;AACZ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}