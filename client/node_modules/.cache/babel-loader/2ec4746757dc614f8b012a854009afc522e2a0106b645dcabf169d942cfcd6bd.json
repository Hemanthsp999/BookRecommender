{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nclass ChunkPrefetchTriggerRuntimeModule extends RuntimeModule {\n  /**\n   * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to\n   */\n  constructor(chunkMap) {\n    super(`chunk prefetch trigger`, RuntimeModule.STAGE_TRIGGER);\n    this.chunkMap = chunkMap;\n  }\n\n  /**\n   * @returns {string} runtime code\n   */\n  generate() {\n    const {\n      chunkMap\n    } = this;\n    const {\n      runtimeTemplate\n    } = this.compilation;\n    const body = [\"var chunks = chunkToChildrenMap[chunkId];\", `Array.isArray(chunks) && chunks.map(${RuntimeGlobals.prefetchChunk});`];\n    return Template.asString([Template.asString([`var chunkToChildrenMap = ${JSON.stringify(chunkMap, null, \"\\t\")};`, `${RuntimeGlobals.ensureChunkHandlers}.prefetch = ${runtimeTemplate.expressionFunction(`Promise.all(promises).then(${runtimeTemplate.basicFunction(\"\", body)})`, \"chunkId, promises\")};`])]);\n  }\n}\nmodule.exports = ChunkPrefetchTriggerRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","ChunkPrefetchTriggerRuntimeModule","constructor","chunkMap","STAGE_TRIGGER","generate","runtimeTemplate","compilation","body","prefetchChunk","asString","JSON","stringify","ensureChunkHandlers","expressionFunction","basicFunction","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/prefetch/ChunkPrefetchTriggerRuntimeModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nclass ChunkPrefetchTriggerRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to\n\t */\n\tconstructor(chunkMap) {\n\t\tsuper(`chunk prefetch trigger`, RuntimeModule.STAGE_TRIGGER);\n\t\tthis.chunkMap = chunkMap;\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { chunkMap } = this;\n\t\tconst { runtimeTemplate } = this.compilation;\n\t\tconst body = [\n\t\t\t\"var chunks = chunkToChildrenMap[chunkId];\",\n\t\t\t`Array.isArray(chunks) && chunks.map(${RuntimeGlobals.prefetchChunk});`\n\t\t];\n\t\treturn Template.asString([\n\t\t\tTemplate.asString([\n\t\t\t\t`var chunkToChildrenMap = ${JSON.stringify(chunkMap, null, \"\\t\")};`,\n\t\t\t\t`${\n\t\t\t\t\tRuntimeGlobals.ensureChunkHandlers\n\t\t\t\t}.prefetch = ${runtimeTemplate.expressionFunction(\n\t\t\t\t\t`Promise.all(promises).then(${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tbody\n\t\t\t\t\t)})`,\n\t\t\t\t\t\"chunkId, promises\"\n\t\t\t\t)};`\n\t\t\t])\n\t\t]);\n\t}\n}\n\nmodule.exports = ChunkPrefetchTriggerRuntimeModule;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEvC;;AAEA,MAAMG,iCAAiC,SAASF,aAAa,CAAC;EAC7D;AACD;AACA;EACCG,WAAWA,CAACC,QAAQ,EAAE;IACrB,KAAK,CAAE,wBAAuB,EAAEJ,aAAa,CAACK,aAAa,CAAC;IAC5D,IAAI,CAACD,QAAQ,GAAGA,QAAQ;EACzB;;EAEA;AACD;AACA;EACCE,QAAQA,CAAA,EAAG;IACV,MAAM;MAAEF;IAAS,CAAC,GAAG,IAAI;IACzB,MAAM;MAAEG;IAAgB,CAAC,GAAG,IAAI,CAACC,WAAW;IAC5C,MAAMC,IAAI,GAAG,CACZ,2CAA2C,EAC1C,uCAAsCX,cAAc,CAACY,aAAc,IAAG,CACvE;IACD,OAAOT,QAAQ,CAACU,QAAQ,CAAC,CACxBV,QAAQ,CAACU,QAAQ,CAAC,CAChB,4BAA2BC,IAAI,CAACC,SAAS,CAACT,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAE,GAAE,EAClE,GACAN,cAAc,CAACgB,mBACf,eAAcP,eAAe,CAACQ,kBAAkB,CAC/C,8BAA6BR,eAAe,CAACS,aAAa,CAC1D,EAAE,EACFP,IACD,CAAE,GAAE,EACJ,mBACD,CAAE,GAAE,CACJ,CAAC,CACF,CAAC;EACH;AACD;AAEAQ,MAAM,CAACC,OAAO,GAAGhB,iCAAiC"},"metadata":{},"sourceType":"script","externalDependencies":[]}