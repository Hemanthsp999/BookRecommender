{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst {\n  EventEmitter\n} = require(\"events\");\nconst reducePlan = require(\"./reducePlan\");\nconst IS_OSX = require(\"os\").platform() === \"darwin\";\nconst IS_WIN = require(\"os\").platform() === \"win32\";\nconst SUPPORTS_RECURSIVE_WATCHING = IS_OSX || IS_WIN;\nconst watcherLimit = +process.env.WATCHPACK_WATCHER_LIMIT || (IS_OSX ? 2000 : 10000);\nconst recursiveWatcherLogging = !!process.env.WATCHPACK_RECURSIVE_WATCHER_LOGGING;\nlet isBatch = false;\nlet watcherCount = 0;\n\n/** @type {Map<Watcher, string>} */\nconst pendingWatchers = new Map();\n\n/** @type {Map<string, RecursiveWatcher>} */\nconst recursiveWatchers = new Map();\n\n/** @type {Map<string, DirectWatcher>} */\nconst directWatchers = new Map();\n\n/** @type {Map<Watcher, RecursiveWatcher | DirectWatcher>} */\nconst underlyingWatcher = new Map();\nclass DirectWatcher {\n  constructor(filePath) {\n    this.filePath = filePath;\n    this.watchers = new Set();\n    this.watcher = undefined;\n    try {\n      const watcher = fs.watch(filePath);\n      this.watcher = watcher;\n      watcher.on(\"change\", (type, filename) => {\n        for (const w of this.watchers) {\n          w.emit(\"change\", type, filename);\n        }\n      });\n      watcher.on(\"error\", error => {\n        for (const w of this.watchers) {\n          w.emit(\"error\", error);\n        }\n      });\n    } catch (err) {\n      process.nextTick(() => {\n        for (const w of this.watchers) {\n          w.emit(\"error\", err);\n        }\n      });\n    }\n    watcherCount++;\n  }\n  add(watcher) {\n    underlyingWatcher.set(watcher, this);\n    this.watchers.add(watcher);\n  }\n  remove(watcher) {\n    this.watchers.delete(watcher);\n    if (this.watchers.size === 0) {\n      directWatchers.delete(this.filePath);\n      watcherCount--;\n      if (this.watcher) this.watcher.close();\n    }\n  }\n  getWatchers() {\n    return this.watchers;\n  }\n}\nclass RecursiveWatcher {\n  constructor(rootPath) {\n    this.rootPath = rootPath;\n    /** @type {Map<Watcher, string>} */\n    this.mapWatcherToPath = new Map();\n    /** @type {Map<string, Set<Watcher>>} */\n    this.mapPathToWatchers = new Map();\n    this.watcher = undefined;\n    try {\n      const watcher = fs.watch(rootPath, {\n        recursive: true\n      });\n      this.watcher = watcher;\n      watcher.on(\"change\", (type, filename) => {\n        if (!filename) {\n          if (recursiveWatcherLogging) {\n            process.stderr.write(`[watchpack] dispatch ${type} event in recursive watcher (${this.rootPath}) to all watchers\\n`);\n          }\n          for (const w of this.mapWatcherToPath.keys()) {\n            w.emit(\"change\", type);\n          }\n        } else {\n          const dir = path.dirname(filename);\n          const watchers = this.mapPathToWatchers.get(dir);\n          if (recursiveWatcherLogging) {\n            process.stderr.write(`[watchpack] dispatch ${type} event in recursive watcher (${this.rootPath}) for '${filename}' to ${watchers ? watchers.size : 0} watchers\\n`);\n          }\n          if (watchers === undefined) return;\n          for (const w of watchers) {\n            w.emit(\"change\", type, path.basename(filename));\n          }\n        }\n      });\n      watcher.on(\"error\", error => {\n        for (const w of this.mapWatcherToPath.keys()) {\n          w.emit(\"error\", error);\n        }\n      });\n    } catch (err) {\n      process.nextTick(() => {\n        for (const w of this.mapWatcherToPath.keys()) {\n          w.emit(\"error\", err);\n        }\n      });\n    }\n    watcherCount++;\n    if (recursiveWatcherLogging) {\n      process.stderr.write(`[watchpack] created recursive watcher at ${rootPath}\\n`);\n    }\n  }\n  add(filePath, watcher) {\n    underlyingWatcher.set(watcher, this);\n    const subpath = filePath.slice(this.rootPath.length + 1) || \".\";\n    this.mapWatcherToPath.set(watcher, subpath);\n    const set = this.mapPathToWatchers.get(subpath);\n    if (set === undefined) {\n      const newSet = new Set();\n      newSet.add(watcher);\n      this.mapPathToWatchers.set(subpath, newSet);\n    } else {\n      set.add(watcher);\n    }\n  }\n  remove(watcher) {\n    const subpath = this.mapWatcherToPath.get(watcher);\n    if (!subpath) return;\n    this.mapWatcherToPath.delete(watcher);\n    const set = this.mapPathToWatchers.get(subpath);\n    set.delete(watcher);\n    if (set.size === 0) {\n      this.mapPathToWatchers.delete(subpath);\n    }\n    if (this.mapWatcherToPath.size === 0) {\n      recursiveWatchers.delete(this.rootPath);\n      watcherCount--;\n      if (this.watcher) this.watcher.close();\n      if (recursiveWatcherLogging) {\n        process.stderr.write(`[watchpack] closed recursive watcher at ${this.rootPath}\\n`);\n      }\n    }\n  }\n  getWatchers() {\n    return this.mapWatcherToPath;\n  }\n}\nclass Watcher extends EventEmitter {\n  close() {\n    if (pendingWatchers.has(this)) {\n      pendingWatchers.delete(this);\n      return;\n    }\n    const watcher = underlyingWatcher.get(this);\n    watcher.remove(this);\n    underlyingWatcher.delete(this);\n  }\n}\nconst createDirectWatcher = filePath => {\n  const existing = directWatchers.get(filePath);\n  if (existing !== undefined) return existing;\n  const w = new DirectWatcher(filePath);\n  directWatchers.set(filePath, w);\n  return w;\n};\nconst createRecursiveWatcher = rootPath => {\n  const existing = recursiveWatchers.get(rootPath);\n  if (existing !== undefined) return existing;\n  const w = new RecursiveWatcher(rootPath);\n  recursiveWatchers.set(rootPath, w);\n  return w;\n};\nconst execute = () => {\n  /** @type {Map<string, Watcher[] | Watcher>} */\n  const map = new Map();\n  const addWatcher = (watcher, filePath) => {\n    const entry = map.get(filePath);\n    if (entry === undefined) {\n      map.set(filePath, watcher);\n    } else if (Array.isArray(entry)) {\n      entry.push(watcher);\n    } else {\n      map.set(filePath, [entry, watcher]);\n    }\n  };\n  for (const [watcher, filePath] of pendingWatchers) {\n    addWatcher(watcher, filePath);\n  }\n  pendingWatchers.clear();\n\n  // Fast case when we are not reaching the limit\n  if (!SUPPORTS_RECURSIVE_WATCHING || watcherLimit - watcherCount >= map.size) {\n    // Create watchers for all entries in the map\n    for (const [filePath, entry] of map) {\n      const w = createDirectWatcher(filePath);\n      if (Array.isArray(entry)) {\n        for (const item of entry) w.add(item);\n      } else {\n        w.add(entry);\n      }\n    }\n    return;\n  }\n\n  // Reconsider existing watchers to improving watch plan\n  for (const watcher of recursiveWatchers.values()) {\n    for (const [w, subpath] of watcher.getWatchers()) {\n      addWatcher(w, path.join(watcher.rootPath, subpath));\n    }\n  }\n  for (const watcher of directWatchers.values()) {\n    for (const w of watcher.getWatchers()) {\n      addWatcher(w, watcher.filePath);\n    }\n  }\n\n  // Merge map entries to keep watcher limit\n  // Create a 10% buffer to be able to enter fast case more often\n  const plan = reducePlan(map, watcherLimit * 0.9);\n\n  // Update watchers for all entries in the map\n  for (const [filePath, entry] of plan) {\n    if (entry.size === 1) {\n      for (const [watcher, filePath] of entry) {\n        const w = createDirectWatcher(filePath);\n        const old = underlyingWatcher.get(watcher);\n        if (old === w) continue;\n        w.add(watcher);\n        if (old !== undefined) old.remove(watcher);\n      }\n    } else {\n      const filePaths = new Set(entry.values());\n      if (filePaths.size > 1) {\n        const w = createRecursiveWatcher(filePath);\n        for (const [watcher, watcherPath] of entry) {\n          const old = underlyingWatcher.get(watcher);\n          if (old === w) continue;\n          w.add(watcherPath, watcher);\n          if (old !== undefined) old.remove(watcher);\n        }\n      } else {\n        for (const filePath of filePaths) {\n          const w = createDirectWatcher(filePath);\n          for (const watcher of entry.keys()) {\n            const old = underlyingWatcher.get(watcher);\n            if (old === w) continue;\n            w.add(watcher);\n            if (old !== undefined) old.remove(watcher);\n          }\n        }\n      }\n    }\n  }\n};\nexports.watch = filePath => {\n  const watcher = new Watcher();\n  // Find an existing watcher\n  const directWatcher = directWatchers.get(filePath);\n  if (directWatcher !== undefined) {\n    directWatcher.add(watcher);\n    return watcher;\n  }\n  let current = filePath;\n  for (;;) {\n    const recursiveWatcher = recursiveWatchers.get(current);\n    if (recursiveWatcher !== undefined) {\n      recursiveWatcher.add(filePath, watcher);\n      return watcher;\n    }\n    const parent = path.dirname(current);\n    if (parent === current) break;\n    current = parent;\n  }\n  // Queue up watcher for creation\n  pendingWatchers.set(watcher, filePath);\n  if (!isBatch) execute();\n  return watcher;\n};\nexports.batch = fn => {\n  isBatch = true;\n  try {\n    fn();\n  } finally {\n    isBatch = false;\n    execute();\n  }\n};\nexports.getNumberOfWatchers = () => {\n  return watcherCount;\n};","map":{"version":3,"names":["fs","require","path","EventEmitter","reducePlan","IS_OSX","platform","IS_WIN","SUPPORTS_RECURSIVE_WATCHING","watcherLimit","process","env","WATCHPACK_WATCHER_LIMIT","recursiveWatcherLogging","WATCHPACK_RECURSIVE_WATCHER_LOGGING","isBatch","watcherCount","pendingWatchers","Map","recursiveWatchers","directWatchers","underlyingWatcher","DirectWatcher","constructor","filePath","watchers","Set","watcher","undefined","watch","on","type","filename","w","emit","error","err","nextTick","add","set","remove","delete","size","close","getWatchers","RecursiveWatcher","rootPath","mapWatcherToPath","mapPathToWatchers","recursive","stderr","write","keys","dir","dirname","get","basename","subpath","slice","length","newSet","Watcher","has","createDirectWatcher","existing","createRecursiveWatcher","execute","map","addWatcher","entry","Array","isArray","push","clear","item","values","join","plan","old","filePaths","watcherPath","exports","directWatcher","current","recursiveWatcher","parent","batch","fn","getNumberOfWatchers"],"sources":["/home/hemanth/react-project/client/node_modules/watchpack/lib/watchEventSource.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst { EventEmitter } = require(\"events\");\nconst reducePlan = require(\"./reducePlan\");\n\nconst IS_OSX = require(\"os\").platform() === \"darwin\";\nconst IS_WIN = require(\"os\").platform() === \"win32\";\nconst SUPPORTS_RECURSIVE_WATCHING = IS_OSX || IS_WIN;\n\nconst watcherLimit =\n\t+process.env.WATCHPACK_WATCHER_LIMIT || (IS_OSX ? 2000 : 10000);\n\nconst recursiveWatcherLogging = !!process.env\n\t.WATCHPACK_RECURSIVE_WATCHER_LOGGING;\n\nlet isBatch = false;\nlet watcherCount = 0;\n\n/** @type {Map<Watcher, string>} */\nconst pendingWatchers = new Map();\n\n/** @type {Map<string, RecursiveWatcher>} */\nconst recursiveWatchers = new Map();\n\n/** @type {Map<string, DirectWatcher>} */\nconst directWatchers = new Map();\n\n/** @type {Map<Watcher, RecursiveWatcher | DirectWatcher>} */\nconst underlyingWatcher = new Map();\n\nclass DirectWatcher {\n\tconstructor(filePath) {\n\t\tthis.filePath = filePath;\n\t\tthis.watchers = new Set();\n\t\tthis.watcher = undefined;\n\t\ttry {\n\t\t\tconst watcher = fs.watch(filePath);\n\t\t\tthis.watcher = watcher;\n\t\t\twatcher.on(\"change\", (type, filename) => {\n\t\t\t\tfor (const w of this.watchers) {\n\t\t\t\t\tw.emit(\"change\", type, filename);\n\t\t\t\t}\n\t\t\t});\n\t\t\twatcher.on(\"error\", error => {\n\t\t\t\tfor (const w of this.watchers) {\n\t\t\t\t\tw.emit(\"error\", error);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(() => {\n\t\t\t\tfor (const w of this.watchers) {\n\t\t\t\t\tw.emit(\"error\", err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\twatcherCount++;\n\t}\n\n\tadd(watcher) {\n\t\tunderlyingWatcher.set(watcher, this);\n\t\tthis.watchers.add(watcher);\n\t}\n\n\tremove(watcher) {\n\t\tthis.watchers.delete(watcher);\n\t\tif (this.watchers.size === 0) {\n\t\t\tdirectWatchers.delete(this.filePath);\n\t\t\twatcherCount--;\n\t\t\tif (this.watcher) this.watcher.close();\n\t\t}\n\t}\n\n\tgetWatchers() {\n\t\treturn this.watchers;\n\t}\n}\n\nclass RecursiveWatcher {\n\tconstructor(rootPath) {\n\t\tthis.rootPath = rootPath;\n\t\t/** @type {Map<Watcher, string>} */\n\t\tthis.mapWatcherToPath = new Map();\n\t\t/** @type {Map<string, Set<Watcher>>} */\n\t\tthis.mapPathToWatchers = new Map();\n\t\tthis.watcher = undefined;\n\t\ttry {\n\t\t\tconst watcher = fs.watch(rootPath, {\n\t\t\t\trecursive: true\n\t\t\t});\n\t\t\tthis.watcher = watcher;\n\t\t\twatcher.on(\"change\", (type, filename) => {\n\t\t\t\tif (!filename) {\n\t\t\t\t\tif (recursiveWatcherLogging) {\n\t\t\t\t\t\tprocess.stderr.write(\n\t\t\t\t\t\t\t`[watchpack] dispatch ${type} event in recursive watcher (${\n\t\t\t\t\t\t\t\tthis.rootPath\n\t\t\t\t\t\t\t}) to all watchers\\n`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const w of this.mapWatcherToPath.keys()) {\n\t\t\t\t\t\tw.emit(\"change\", type);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst dir = path.dirname(filename);\n\t\t\t\t\tconst watchers = this.mapPathToWatchers.get(dir);\n\t\t\t\t\tif (recursiveWatcherLogging) {\n\t\t\t\t\t\tprocess.stderr.write(\n\t\t\t\t\t\t\t`[watchpack] dispatch ${type} event in recursive watcher (${\n\t\t\t\t\t\t\t\tthis.rootPath\n\t\t\t\t\t\t\t}) for '${filename}' to ${\n\t\t\t\t\t\t\t\twatchers ? watchers.size : 0\n\t\t\t\t\t\t\t} watchers\\n`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (watchers === undefined) return;\n\t\t\t\t\tfor (const w of watchers) {\n\t\t\t\t\t\tw.emit(\"change\", type, path.basename(filename));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\twatcher.on(\"error\", error => {\n\t\t\t\tfor (const w of this.mapWatcherToPath.keys()) {\n\t\t\t\t\tw.emit(\"error\", error);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(() => {\n\t\t\t\tfor (const w of this.mapWatcherToPath.keys()) {\n\t\t\t\t\tw.emit(\"error\", err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\twatcherCount++;\n\t\tif (recursiveWatcherLogging) {\n\t\t\tprocess.stderr.write(\n\t\t\t\t`[watchpack] created recursive watcher at ${rootPath}\\n`\n\t\t\t);\n\t\t}\n\t}\n\n\tadd(filePath, watcher) {\n\t\tunderlyingWatcher.set(watcher, this);\n\t\tconst subpath = filePath.slice(this.rootPath.length + 1) || \".\";\n\t\tthis.mapWatcherToPath.set(watcher, subpath);\n\t\tconst set = this.mapPathToWatchers.get(subpath);\n\t\tif (set === undefined) {\n\t\t\tconst newSet = new Set();\n\t\t\tnewSet.add(watcher);\n\t\t\tthis.mapPathToWatchers.set(subpath, newSet);\n\t\t} else {\n\t\t\tset.add(watcher);\n\t\t}\n\t}\n\n\tremove(watcher) {\n\t\tconst subpath = this.mapWatcherToPath.get(watcher);\n\t\tif (!subpath) return;\n\t\tthis.mapWatcherToPath.delete(watcher);\n\t\tconst set = this.mapPathToWatchers.get(subpath);\n\t\tset.delete(watcher);\n\t\tif (set.size === 0) {\n\t\t\tthis.mapPathToWatchers.delete(subpath);\n\t\t}\n\t\tif (this.mapWatcherToPath.size === 0) {\n\t\t\trecursiveWatchers.delete(this.rootPath);\n\t\t\twatcherCount--;\n\t\t\tif (this.watcher) this.watcher.close();\n\t\t\tif (recursiveWatcherLogging) {\n\t\t\t\tprocess.stderr.write(\n\t\t\t\t\t`[watchpack] closed recursive watcher at ${this.rootPath}\\n`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetWatchers() {\n\t\treturn this.mapWatcherToPath;\n\t}\n}\n\nclass Watcher extends EventEmitter {\n\tclose() {\n\t\tif (pendingWatchers.has(this)) {\n\t\t\tpendingWatchers.delete(this);\n\t\t\treturn;\n\t\t}\n\t\tconst watcher = underlyingWatcher.get(this);\n\t\twatcher.remove(this);\n\t\tunderlyingWatcher.delete(this);\n\t}\n}\n\nconst createDirectWatcher = filePath => {\n\tconst existing = directWatchers.get(filePath);\n\tif (existing !== undefined) return existing;\n\tconst w = new DirectWatcher(filePath);\n\tdirectWatchers.set(filePath, w);\n\treturn w;\n};\n\nconst createRecursiveWatcher = rootPath => {\n\tconst existing = recursiveWatchers.get(rootPath);\n\tif (existing !== undefined) return existing;\n\tconst w = new RecursiveWatcher(rootPath);\n\trecursiveWatchers.set(rootPath, w);\n\treturn w;\n};\n\nconst execute = () => {\n\t/** @type {Map<string, Watcher[] | Watcher>} */\n\tconst map = new Map();\n\tconst addWatcher = (watcher, filePath) => {\n\t\tconst entry = map.get(filePath);\n\t\tif (entry === undefined) {\n\t\t\tmap.set(filePath, watcher);\n\t\t} else if (Array.isArray(entry)) {\n\t\t\tentry.push(watcher);\n\t\t} else {\n\t\t\tmap.set(filePath, [entry, watcher]);\n\t\t}\n\t};\n\tfor (const [watcher, filePath] of pendingWatchers) {\n\t\taddWatcher(watcher, filePath);\n\t}\n\tpendingWatchers.clear();\n\n\t// Fast case when we are not reaching the limit\n\tif (!SUPPORTS_RECURSIVE_WATCHING || watcherLimit - watcherCount >= map.size) {\n\t\t// Create watchers for all entries in the map\n\t\tfor (const [filePath, entry] of map) {\n\t\t\tconst w = createDirectWatcher(filePath);\n\t\t\tif (Array.isArray(entry)) {\n\t\t\t\tfor (const item of entry) w.add(item);\n\t\t\t} else {\n\t\t\t\tw.add(entry);\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\t// Reconsider existing watchers to improving watch plan\n\tfor (const watcher of recursiveWatchers.values()) {\n\t\tfor (const [w, subpath] of watcher.getWatchers()) {\n\t\t\taddWatcher(w, path.join(watcher.rootPath, subpath));\n\t\t}\n\t}\n\tfor (const watcher of directWatchers.values()) {\n\t\tfor (const w of watcher.getWatchers()) {\n\t\t\taddWatcher(w, watcher.filePath);\n\t\t}\n\t}\n\n\t// Merge map entries to keep watcher limit\n\t// Create a 10% buffer to be able to enter fast case more often\n\tconst plan = reducePlan(map, watcherLimit * 0.9);\n\n\t// Update watchers for all entries in the map\n\tfor (const [filePath, entry] of plan) {\n\t\tif (entry.size === 1) {\n\t\t\tfor (const [watcher, filePath] of entry) {\n\t\t\t\tconst w = createDirectWatcher(filePath);\n\t\t\t\tconst old = underlyingWatcher.get(watcher);\n\t\t\t\tif (old === w) continue;\n\t\t\t\tw.add(watcher);\n\t\t\t\tif (old !== undefined) old.remove(watcher);\n\t\t\t}\n\t\t} else {\n\t\t\tconst filePaths = new Set(entry.values());\n\t\t\tif (filePaths.size > 1) {\n\t\t\t\tconst w = createRecursiveWatcher(filePath);\n\t\t\t\tfor (const [watcher, watcherPath] of entry) {\n\t\t\t\t\tconst old = underlyingWatcher.get(watcher);\n\t\t\t\t\tif (old === w) continue;\n\t\t\t\t\tw.add(watcherPath, watcher);\n\t\t\t\t\tif (old !== undefined) old.remove(watcher);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const filePath of filePaths) {\n\t\t\t\t\tconst w = createDirectWatcher(filePath);\n\t\t\t\t\tfor (const watcher of entry.keys()) {\n\t\t\t\t\t\tconst old = underlyingWatcher.get(watcher);\n\t\t\t\t\t\tif (old === w) continue;\n\t\t\t\t\t\tw.add(watcher);\n\t\t\t\t\t\tif (old !== undefined) old.remove(watcher);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nexports.watch = filePath => {\n\tconst watcher = new Watcher();\n\t// Find an existing watcher\n\tconst directWatcher = directWatchers.get(filePath);\n\tif (directWatcher !== undefined) {\n\t\tdirectWatcher.add(watcher);\n\t\treturn watcher;\n\t}\n\tlet current = filePath;\n\tfor (;;) {\n\t\tconst recursiveWatcher = recursiveWatchers.get(current);\n\t\tif (recursiveWatcher !== undefined) {\n\t\t\trecursiveWatcher.add(filePath, watcher);\n\t\t\treturn watcher;\n\t\t}\n\t\tconst parent = path.dirname(current);\n\t\tif (parent === current) break;\n\t\tcurrent = parent;\n\t}\n\t// Queue up watcher for creation\n\tpendingWatchers.set(watcher, filePath);\n\tif (!isBatch) execute();\n\treturn watcher;\n};\n\nexports.batch = fn => {\n\tisBatch = true;\n\ttry {\n\t\tfn();\n\t} finally {\n\t\tisBatch = false;\n\t\texecute();\n\t}\n};\n\nexports.getNumberOfWatchers = () => {\n\treturn watcherCount;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}