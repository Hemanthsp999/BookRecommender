{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\nconst SerializerMiddleware = require(\"./SerializerMiddleware\");\n\n/** @typedef {import(\"./types\").BufferSerializableType} BufferSerializableType */\n/** @typedef {import(\"./types\").PrimitiveSerializableType} PrimitiveSerializableType */\n\n/*\nFormat:\n\nFile -> Section*\n\nSection -> NullsSection |\n\t\t\t\t\t BooleansSection |\n\t\t\t\t\t F64NumbersSection |\n\t\t\t\t\t I32NumbersSection |\n\t\t\t\t\t I8NumbersSection |\n\t\t\t\t\t ShortStringSection |\n\t\t\t\t\t StringSection |\n\t\t\t\t\t BufferSection |\n\t\t\t\t\t NopSection\n\n\n\nNullsSection ->\n\tNullHeaderByte | Null2HeaderByte | Null3HeaderByte |\n\tNulls8HeaderByte 0xnn (n:count - 4) |\n\tNulls32HeaderByte n:ui32 (n:count - 260) |\nBooleansSection -> TrueHeaderByte | FalseHeaderByte | BooleansSectionHeaderByte BooleansCountAndBitsByte\nF64NumbersSection -> F64NumbersSectionHeaderByte f64*\nI32NumbersSection -> I32NumbersSectionHeaderByte i32*\nI8NumbersSection -> I8NumbersSectionHeaderByte i8*\nShortStringSection -> ShortStringSectionHeaderByte ascii-byte*\nStringSection -> StringSectionHeaderByte i32:length utf8-byte*\nBufferSection -> BufferSectionHeaderByte i32:length byte*\nNopSection --> NopSectionHeaderByte\n\nShortStringSectionHeaderByte -> 0b1nnn_nnnn (n:length)\n\nF64NumbersSectionHeaderByte -> 0b001n_nnnn (n:count - 1)\nI32NumbersSectionHeaderByte -> 0b010n_nnnn (n:count - 1)\nI8NumbersSectionHeaderByte -> 0b011n_nnnn (n:count - 1)\n\nNullsSectionHeaderByte -> 0b0001_nnnn (n:count - 1)\nBooleansCountAndBitsByte ->\n\t0b0000_1xxx (count = 3) |\n\t0b0001_xxxx (count = 4) |\n\t0b001x_xxxx (count = 5) |\n\t0b01xx_xxxx (count = 6) |\n\t0b1nnn_nnnn (n:count - 7, 7 <= count <= 133)\n\t0xff n:ui32 (n:count, 134 <= count < 2^32)\n\nStringSectionHeaderByte -> 0b0000_1110\nBufferSectionHeaderByte -> 0b0000_1111\nNopSectionHeaderByte -> 0b0000_1011\nFalseHeaderByte -> 0b0000_1100\nTrueHeaderByte -> 0b0000_1101\n\nRawNumber -> n (n <= 10)\n\n*/\n\nconst LAZY_HEADER = 0x0b;\nconst TRUE_HEADER = 0x0c;\nconst FALSE_HEADER = 0x0d;\nconst BOOLEANS_HEADER = 0x0e;\nconst NULL_HEADER = 0x10;\nconst NULL2_HEADER = 0x11;\nconst NULL3_HEADER = 0x12;\nconst NULLS8_HEADER = 0x13;\nconst NULLS32_HEADER = 0x14;\nconst NULL_AND_I8_HEADER = 0x15;\nconst NULL_AND_I32_HEADER = 0x16;\nconst NULL_AND_TRUE_HEADER = 0x17;\nconst NULL_AND_FALSE_HEADER = 0x18;\nconst STRING_HEADER = 0x1e;\nconst BUFFER_HEADER = 0x1f;\nconst I8_HEADER = 0x60;\nconst I32_HEADER = 0x40;\nconst F64_HEADER = 0x20;\nconst SHORT_STRING_HEADER = 0x80;\n\n/** Uplift high-order bits */\nconst NUMBERS_HEADER_MASK = 0xe0;\nconst NUMBERS_COUNT_MASK = 0x1f; // 0b0001_1111\nconst SHORT_STRING_LENGTH_MASK = 0x7f; // 0b0111_1111\n\nconst HEADER_SIZE = 1;\nconst I8_SIZE = 1;\nconst I32_SIZE = 4;\nconst F64_SIZE = 8;\nconst MEASURE_START_OPERATION = Symbol(\"MEASURE_START_OPERATION\");\nconst MEASURE_END_OPERATION = Symbol(\"MEASURE_END_OPERATION\");\n\n/** @typedef {typeof MEASURE_START_OPERATION} MEASURE_START_OPERATION_TYPE */\n/** @typedef {typeof MEASURE_END_OPERATION} MEASURE_END_OPERATION_TYPE */\n\n/**\n * @param {number} n number\n * @returns {0 | 1 | 2} type of number for serialization\n */\nconst identifyNumber = n => {\n  if (n === (n | 0)) {\n    if (n <= 127 && n >= -128) return 0;\n    if (n <= 2147483647 && n >= -2147483648) return 1;\n  }\n  return 2;\n};\n\n/**\n * @typedef {PrimitiveSerializableType[]} DeserializedType\n * @typedef {BufferSerializableType[]} SerializedType\n * @extends {SerializerMiddleware<DeserializedType, SerializedType>}\n */\nclass BinaryMiddleware extends SerializerMiddleware {\n  /**\n   * @param {DeserializedType} data data\n   * @param {Object} context context object\n   * @returns {SerializedType|Promise<SerializedType>} serialized data\n   */\n  serialize(data, context) {\n    return this._serialize(data, context);\n  }\n  _serializeLazy(fn, context) {\n    return SerializerMiddleware.serializeLazy(fn, data => this._serialize(data, context));\n  }\n\n  /**\n   * @param {DeserializedType} data data\n   * @param {Object} context context object\n   * @param {{ leftOverBuffer: Buffer | null, allocationSize: number, increaseCounter: number }} allocationScope allocation scope\n   * @returns {SerializedType} serialized data\n   */\n  _serialize(data, context) {\n    let allocationScope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      allocationSize: 1024,\n      increaseCounter: 0,\n      leftOverBuffer: null\n    };\n    /** @type {Buffer} */\n    let leftOverBuffer = null;\n    /** @type {BufferSerializableType[]} */\n    let buffers = [];\n    /** @type {Buffer} */\n    let currentBuffer = allocationScope ? allocationScope.leftOverBuffer : null;\n    allocationScope.leftOverBuffer = null;\n    let currentPosition = 0;\n    if (currentBuffer === null) {\n      currentBuffer = Buffer.allocUnsafe(allocationScope.allocationSize);\n    }\n    const allocate = bytesNeeded => {\n      if (currentBuffer !== null) {\n        if (currentBuffer.length - currentPosition >= bytesNeeded) return;\n        flush();\n      }\n      if (leftOverBuffer && leftOverBuffer.length >= bytesNeeded) {\n        currentBuffer = leftOverBuffer;\n        leftOverBuffer = null;\n      } else {\n        currentBuffer = Buffer.allocUnsafe(Math.max(bytesNeeded, allocationScope.allocationSize));\n        if (!(allocationScope.increaseCounter = (allocationScope.increaseCounter + 1) % 4) && allocationScope.allocationSize < 16777216) {\n          allocationScope.allocationSize = allocationScope.allocationSize << 1;\n        }\n      }\n    };\n    const flush = () => {\n      if (currentBuffer !== null) {\n        if (currentPosition > 0) {\n          buffers.push(Buffer.from(currentBuffer.buffer, currentBuffer.byteOffset, currentPosition));\n        }\n        if (!leftOverBuffer || leftOverBuffer.length < currentBuffer.length - currentPosition) {\n          leftOverBuffer = Buffer.from(currentBuffer.buffer, currentBuffer.byteOffset + currentPosition, currentBuffer.byteLength - currentPosition);\n        }\n        currentBuffer = null;\n        currentPosition = 0;\n      }\n    };\n    /**\n     * @param {number} byte byte\n     */\n    const writeU8 = byte => {\n      currentBuffer.writeUInt8(byte, currentPosition++);\n    };\n    /**\n     * @param {number} ui32 ui32\n     */\n    const writeU32 = ui32 => {\n      currentBuffer.writeUInt32LE(ui32, currentPosition);\n      currentPosition += 4;\n    };\n    /** @type {number[]} */\n    const measureStack = [];\n    const measureStart = () => {\n      measureStack.push(buffers.length, currentPosition);\n    };\n    /**\n     * @returns {number} size\n     */\n    const measureEnd = () => {\n      const oldPos = measureStack.pop();\n      const buffersIndex = measureStack.pop();\n      let size = currentPosition - oldPos;\n      for (let i = buffersIndex; i < buffers.length; i++) {\n        size += buffers[i].length;\n      }\n      return size;\n    };\n    for (let i = 0; i < data.length; i++) {\n      const thing = data[i];\n      switch (typeof thing) {\n        case \"function\":\n          {\n            if (!SerializerMiddleware.isLazy(thing)) throw new Error(\"Unexpected function \" + thing);\n            /** @type {SerializedType | (() => SerializedType)} */\n            let serializedData = SerializerMiddleware.getLazySerializedValue(thing);\n            if (serializedData === undefined) {\n              if (SerializerMiddleware.isLazy(thing, this)) {\n                flush();\n                allocationScope.leftOverBuffer = leftOverBuffer;\n                const result = /** @type {(Exclude<PrimitiveSerializableType, Promise<PrimitiveSerializableType>>)[]} */\n                thing();\n                const data = this._serialize(result, context, allocationScope);\n                leftOverBuffer = allocationScope.leftOverBuffer;\n                allocationScope.leftOverBuffer = null;\n                SerializerMiddleware.setLazySerializedValue(thing, data);\n                serializedData = data;\n              } else {\n                serializedData = this._serializeLazy(thing, context);\n                flush();\n                buffers.push(serializedData);\n                break;\n              }\n            } else {\n              if (typeof serializedData === \"function\") {\n                flush();\n                buffers.push(serializedData);\n                break;\n              }\n            }\n            /** @type {number[]} */\n            const lengths = [];\n            for (const item of serializedData) {\n              let last;\n              if (typeof item === \"function\") {\n                lengths.push(0);\n              } else if (item.length === 0) {\n                // ignore\n              } else if (lengths.length > 0 && (last = lengths[lengths.length - 1]) !== 0) {\n                const remaining = 0xffffffff - last;\n                if (remaining >= item.length) {\n                  lengths[lengths.length - 1] += item.length;\n                } else {\n                  lengths.push(item.length - remaining);\n                  lengths[lengths.length - 2] = 0xffffffff;\n                }\n              } else {\n                lengths.push(item.length);\n              }\n            }\n            allocate(5 + lengths.length * 4);\n            writeU8(LAZY_HEADER);\n            writeU32(lengths.length);\n            for (const l of lengths) {\n              writeU32(l);\n            }\n            flush();\n            for (const item of serializedData) {\n              buffers.push(item);\n            }\n            break;\n          }\n        case \"string\":\n          {\n            const len = Buffer.byteLength(thing);\n            if (len >= 128 || len !== thing.length) {\n              allocate(len + HEADER_SIZE + I32_SIZE);\n              writeU8(STRING_HEADER);\n              writeU32(len);\n              currentBuffer.write(thing, currentPosition);\n              currentPosition += len;\n            } else if (len >= 70) {\n              allocate(len + HEADER_SIZE);\n              writeU8(SHORT_STRING_HEADER | len);\n              currentBuffer.write(thing, currentPosition, \"latin1\");\n              currentPosition += len;\n            } else {\n              allocate(len + HEADER_SIZE);\n              writeU8(SHORT_STRING_HEADER | len);\n              for (let i = 0; i < len; i++) {\n                currentBuffer[currentPosition++] = thing.charCodeAt(i);\n              }\n            }\n            break;\n          }\n        case \"number\":\n          {\n            const type = identifyNumber(thing);\n            if (type === 0 && thing >= 0 && thing <= 10) {\n              // shortcut for very small numbers\n              allocate(I8_SIZE);\n              writeU8(thing);\n              break;\n            }\n            /**\n             * amount of numbers to write\n             * @type {number}\n             */\n            let n = 1;\n            for (; n < 32 && i + n < data.length; n++) {\n              const item = data[i + n];\n              if (typeof item !== \"number\") break;\n              if (identifyNumber(item) !== type) break;\n            }\n            switch (type) {\n              case 0:\n                allocate(HEADER_SIZE + I8_SIZE * n);\n                writeU8(I8_HEADER | n - 1);\n                while (n > 0) {\n                  currentBuffer.writeInt8( /** @type {number} */data[i], currentPosition);\n                  currentPosition += I8_SIZE;\n                  n--;\n                  i++;\n                }\n                break;\n              case 1:\n                allocate(HEADER_SIZE + I32_SIZE * n);\n                writeU8(I32_HEADER | n - 1);\n                while (n > 0) {\n                  currentBuffer.writeInt32LE( /** @type {number} */data[i], currentPosition);\n                  currentPosition += I32_SIZE;\n                  n--;\n                  i++;\n                }\n                break;\n              case 2:\n                allocate(HEADER_SIZE + F64_SIZE * n);\n                writeU8(F64_HEADER | n - 1);\n                while (n > 0) {\n                  currentBuffer.writeDoubleLE( /** @type {number} */data[i], currentPosition);\n                  currentPosition += F64_SIZE;\n                  n--;\n                  i++;\n                }\n                break;\n            }\n            i--;\n            break;\n          }\n        case \"boolean\":\n          {\n            let lastByte = thing === true ? 1 : 0;\n            const bytes = [];\n            let count = 1;\n            let n;\n            for (n = 1; n < 0xffffffff && i + n < data.length; n++) {\n              const item = data[i + n];\n              if (typeof item !== \"boolean\") break;\n              const pos = count & 0x7;\n              if (pos === 0) {\n                bytes.push(lastByte);\n                lastByte = item === true ? 1 : 0;\n              } else if (item === true) {\n                lastByte |= 1 << pos;\n              }\n              count++;\n            }\n            i += count - 1;\n            if (count === 1) {\n              allocate(HEADER_SIZE);\n              writeU8(lastByte === 1 ? TRUE_HEADER : FALSE_HEADER);\n            } else if (count === 2) {\n              allocate(HEADER_SIZE * 2);\n              writeU8(lastByte & 1 ? TRUE_HEADER : FALSE_HEADER);\n              writeU8(lastByte & 2 ? TRUE_HEADER : FALSE_HEADER);\n            } else if (count <= 6) {\n              allocate(HEADER_SIZE + I8_SIZE);\n              writeU8(BOOLEANS_HEADER);\n              writeU8(1 << count | lastByte);\n            } else if (count <= 133) {\n              allocate(HEADER_SIZE + I8_SIZE + I8_SIZE * bytes.length + I8_SIZE);\n              writeU8(BOOLEANS_HEADER);\n              writeU8(0x80 | count - 7);\n              for (const byte of bytes) writeU8(byte);\n              writeU8(lastByte);\n            } else {\n              allocate(HEADER_SIZE + I8_SIZE + I32_SIZE + I8_SIZE * bytes.length + I8_SIZE);\n              writeU8(BOOLEANS_HEADER);\n              writeU8(0xff);\n              writeU32(count);\n              for (const byte of bytes) writeU8(byte);\n              writeU8(lastByte);\n            }\n            break;\n          }\n        case \"object\":\n          {\n            if (thing === null) {\n              let n;\n              for (n = 1; n < 0x100000104 && i + n < data.length; n++) {\n                const item = data[i + n];\n                if (item !== null) break;\n              }\n              i += n - 1;\n              if (n === 1) {\n                if (i + 1 < data.length) {\n                  const next = data[i + 1];\n                  if (next === true) {\n                    allocate(HEADER_SIZE);\n                    writeU8(NULL_AND_TRUE_HEADER);\n                    i++;\n                  } else if (next === false) {\n                    allocate(HEADER_SIZE);\n                    writeU8(NULL_AND_FALSE_HEADER);\n                    i++;\n                  } else if (typeof next === \"number\") {\n                    const type = identifyNumber(next);\n                    if (type === 0) {\n                      allocate(HEADER_SIZE + I8_SIZE);\n                      writeU8(NULL_AND_I8_HEADER);\n                      currentBuffer.writeInt8(next, currentPosition);\n                      currentPosition += I8_SIZE;\n                      i++;\n                    } else if (type === 1) {\n                      allocate(HEADER_SIZE + I32_SIZE);\n                      writeU8(NULL_AND_I32_HEADER);\n                      currentBuffer.writeInt32LE(next, currentPosition);\n                      currentPosition += I32_SIZE;\n                      i++;\n                    } else {\n                      allocate(HEADER_SIZE);\n                      writeU8(NULL_HEADER);\n                    }\n                  } else {\n                    allocate(HEADER_SIZE);\n                    writeU8(NULL_HEADER);\n                  }\n                } else {\n                  allocate(HEADER_SIZE);\n                  writeU8(NULL_HEADER);\n                }\n              } else if (n === 2) {\n                allocate(HEADER_SIZE);\n                writeU8(NULL2_HEADER);\n              } else if (n === 3) {\n                allocate(HEADER_SIZE);\n                writeU8(NULL3_HEADER);\n              } else if (n < 260) {\n                allocate(HEADER_SIZE + I8_SIZE);\n                writeU8(NULLS8_HEADER);\n                writeU8(n - 4);\n              } else {\n                allocate(HEADER_SIZE + I32_SIZE);\n                writeU8(NULLS32_HEADER);\n                writeU32(n - 260);\n              }\n            } else if (Buffer.isBuffer(thing)) {\n              if (thing.length < 8192) {\n                allocate(HEADER_SIZE + I32_SIZE + thing.length);\n                writeU8(BUFFER_HEADER);\n                writeU32(thing.length);\n                thing.copy(currentBuffer, currentPosition);\n                currentPosition += thing.length;\n              } else {\n                allocate(HEADER_SIZE + I32_SIZE);\n                writeU8(BUFFER_HEADER);\n                writeU32(thing.length);\n                flush();\n                buffers.push(thing);\n              }\n            }\n            break;\n          }\n        case \"symbol\":\n          {\n            if (thing === MEASURE_START_OPERATION) {\n              measureStart();\n            } else if (thing === MEASURE_END_OPERATION) {\n              const size = measureEnd();\n              allocate(HEADER_SIZE + I32_SIZE);\n              writeU8(I32_HEADER);\n              currentBuffer.writeInt32LE(size, currentPosition);\n              currentPosition += I32_SIZE;\n            }\n            break;\n          }\n      }\n    }\n    flush();\n    allocationScope.leftOverBuffer = leftOverBuffer;\n\n    // avoid leaking memory\n    currentBuffer = null;\n    leftOverBuffer = null;\n    allocationScope = undefined;\n    const _buffers = buffers;\n    buffers = undefined;\n    return _buffers;\n  }\n\n  /**\n   * @param {SerializedType} data data\n   * @param {Object} context context object\n   * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n   */\n  deserialize(data, context) {\n    return this._deserialize(data, context);\n  }\n  _createLazyDeserialized(content, context) {\n    return SerializerMiddleware.createLazy(memoize(() => this._deserialize(content, context)), this, undefined, content);\n  }\n  _deserializeLazy(fn, context) {\n    return SerializerMiddleware.deserializeLazy(fn, data => this._deserialize(data, context));\n  }\n\n  /**\n   * @param {SerializedType} data data\n   * @param {Object} context context object\n   * @returns {DeserializedType} deserialized data\n   */\n  _deserialize(data, context) {\n    let currentDataItem = 0;\n    let currentBuffer = data[0];\n    let currentIsBuffer = Buffer.isBuffer(currentBuffer);\n    let currentPosition = 0;\n    const retainedBuffer = context.retainedBuffer || (x => x);\n    const checkOverflow = () => {\n      if (currentPosition >= currentBuffer.length) {\n        currentPosition = 0;\n        currentDataItem++;\n        currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n        currentIsBuffer = Buffer.isBuffer(currentBuffer);\n      }\n    };\n    const isInCurrentBuffer = n => {\n      return currentIsBuffer && n + currentPosition <= currentBuffer.length;\n    };\n    const ensureBuffer = () => {\n      if (!currentIsBuffer) {\n        throw new Error(currentBuffer === null ? \"Unexpected end of stream\" : \"Unexpected lazy element in stream\");\n      }\n    };\n    /**\n     * Reads n bytes\n     * @param {number} n amount of bytes to read\n     * @returns {Buffer} buffer with bytes\n     */\n    const read = n => {\n      ensureBuffer();\n      const rem = currentBuffer.length - currentPosition;\n      if (rem < n) {\n        const buffers = [read(rem)];\n        n -= rem;\n        ensureBuffer();\n        while (currentBuffer.length < n) {\n          const b = /** @type {Buffer} */currentBuffer;\n          buffers.push(b);\n          n -= b.length;\n          currentDataItem++;\n          currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n          currentIsBuffer = Buffer.isBuffer(currentBuffer);\n          ensureBuffer();\n        }\n        buffers.push(read(n));\n        return Buffer.concat(buffers);\n      }\n      const b = /** @type {Buffer} */currentBuffer;\n      const res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n      currentPosition += n;\n      checkOverflow();\n      return res;\n    };\n    /**\n     * Reads up to n bytes\n     * @param {number} n amount of bytes to read\n     * @returns {Buffer} buffer with bytes\n     */\n    const readUpTo = n => {\n      ensureBuffer();\n      const rem = currentBuffer.length - currentPosition;\n      if (rem < n) {\n        n = rem;\n      }\n      const b = /** @type {Buffer} */currentBuffer;\n      const res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n      currentPosition += n;\n      checkOverflow();\n      return res;\n    };\n    /**\n     * @returns {number} U8\n     */\n    const readU8 = () => {\n      ensureBuffer();\n      /**\n       * There is no need to check remaining buffer size here\n       * since {@link checkOverflow} guarantees at least one byte remaining\n       */\n      const byte = /** @type {Buffer} */currentBuffer.readUInt8(currentPosition);\n      currentPosition += I8_SIZE;\n      checkOverflow();\n      return byte;\n    };\n    /**\n     * @returns {number} U32\n     */\n    const readU32 = () => {\n      return read(I32_SIZE).readUInt32LE(0);\n    };\n    const readBits = (data, n) => {\n      let mask = 1;\n      while (n !== 0) {\n        result.push((data & mask) !== 0);\n        mask = mask << 1;\n        n--;\n      }\n    };\n    const dispatchTable = Array.from({\n      length: 256\n    }).map((_, header) => {\n      switch (header) {\n        case LAZY_HEADER:\n          return () => {\n            const count = readU32();\n            const lengths = Array.from({\n              length: count\n            }).map(() => readU32());\n            const content = [];\n            for (let l of lengths) {\n              if (l === 0) {\n                if (typeof currentBuffer !== \"function\") {\n                  throw new Error(\"Unexpected non-lazy element in stream\");\n                }\n                content.push(currentBuffer);\n                currentDataItem++;\n                currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n                currentIsBuffer = Buffer.isBuffer(currentBuffer);\n              } else {\n                do {\n                  const buf = readUpTo(l);\n                  l -= buf.length;\n                  content.push(retainedBuffer(buf));\n                } while (l > 0);\n              }\n            }\n            result.push(this._createLazyDeserialized(content, context));\n          };\n        case BUFFER_HEADER:\n          return () => {\n            const len = readU32();\n            result.push(retainedBuffer(read(len)));\n          };\n        case TRUE_HEADER:\n          return () => result.push(true);\n        case FALSE_HEADER:\n          return () => result.push(false);\n        case NULL3_HEADER:\n          return () => result.push(null, null, null);\n        case NULL2_HEADER:\n          return () => result.push(null, null);\n        case NULL_HEADER:\n          return () => result.push(null);\n        case NULL_AND_TRUE_HEADER:\n          return () => result.push(null, true);\n        case NULL_AND_FALSE_HEADER:\n          return () => result.push(null, false);\n        case NULL_AND_I8_HEADER:\n          return () => {\n            if (currentIsBuffer) {\n              result.push(null, /** @type {Buffer} */currentBuffer.readInt8(currentPosition));\n              currentPosition += I8_SIZE;\n              checkOverflow();\n            } else {\n              result.push(null, read(I8_SIZE).readInt8(0));\n            }\n          };\n        case NULL_AND_I32_HEADER:\n          return () => {\n            result.push(null);\n            if (isInCurrentBuffer(I32_SIZE)) {\n              result.push( /** @type {Buffer} */currentBuffer.readInt32LE(currentPosition));\n              currentPosition += I32_SIZE;\n              checkOverflow();\n            } else {\n              result.push(read(I32_SIZE).readInt32LE(0));\n            }\n          };\n        case NULLS8_HEADER:\n          return () => {\n            const len = readU8() + 4;\n            for (let i = 0; i < len; i++) {\n              result.push(null);\n            }\n          };\n        case NULLS32_HEADER:\n          return () => {\n            const len = readU32() + 260;\n            for (let i = 0; i < len; i++) {\n              result.push(null);\n            }\n          };\n        case BOOLEANS_HEADER:\n          return () => {\n            const innerHeader = readU8();\n            if ((innerHeader & 0xf0) === 0) {\n              readBits(innerHeader, 3);\n            } else if ((innerHeader & 0xe0) === 0) {\n              readBits(innerHeader, 4);\n            } else if ((innerHeader & 0xc0) === 0) {\n              readBits(innerHeader, 5);\n            } else if ((innerHeader & 0x80) === 0) {\n              readBits(innerHeader, 6);\n            } else if (innerHeader !== 0xff) {\n              let count = (innerHeader & 0x7f) + 7;\n              while (count > 8) {\n                readBits(readU8(), 8);\n                count -= 8;\n              }\n              readBits(readU8(), count);\n            } else {\n              let count = readU32();\n              while (count > 8) {\n                readBits(readU8(), 8);\n                count -= 8;\n              }\n              readBits(readU8(), count);\n            }\n          };\n        case STRING_HEADER:\n          return () => {\n            const len = readU32();\n            if (isInCurrentBuffer(len) && currentPosition + len < 0x7fffffff) {\n              result.push(currentBuffer.toString(undefined, currentPosition, currentPosition + len));\n              currentPosition += len;\n              checkOverflow();\n            } else {\n              result.push(read(len).toString());\n            }\n          };\n        case SHORT_STRING_HEADER:\n          return () => result.push(\"\");\n        case SHORT_STRING_HEADER | 1:\n          return () => {\n            if (currentIsBuffer && currentPosition < 0x7ffffffe) {\n              result.push(currentBuffer.toString(\"latin1\", currentPosition, currentPosition + 1));\n              currentPosition++;\n              checkOverflow();\n            } else {\n              result.push(read(1).toString(\"latin1\"));\n            }\n          };\n        case I8_HEADER:\n          return () => {\n            if (currentIsBuffer) {\n              result.push( /** @type {Buffer} */currentBuffer.readInt8(currentPosition));\n              currentPosition++;\n              checkOverflow();\n            } else {\n              result.push(read(1).readInt8(0));\n            }\n          };\n        default:\n          if (header <= 10) {\n            return () => result.push(header);\n          } else if ((header & SHORT_STRING_HEADER) === SHORT_STRING_HEADER) {\n            const len = header & SHORT_STRING_LENGTH_MASK;\n            return () => {\n              if (isInCurrentBuffer(len) && currentPosition + len < 0x7fffffff) {\n                result.push(currentBuffer.toString(\"latin1\", currentPosition, currentPosition + len));\n                currentPosition += len;\n                checkOverflow();\n              } else {\n                result.push(read(len).toString(\"latin1\"));\n              }\n            };\n          } else if ((header & NUMBERS_HEADER_MASK) === F64_HEADER) {\n            const len = (header & NUMBERS_COUNT_MASK) + 1;\n            return () => {\n              const need = F64_SIZE * len;\n              if (isInCurrentBuffer(need)) {\n                for (let i = 0; i < len; i++) {\n                  result.push( /** @type {Buffer} */currentBuffer.readDoubleLE(currentPosition));\n                  currentPosition += F64_SIZE;\n                }\n                checkOverflow();\n              } else {\n                const buf = read(need);\n                for (let i = 0; i < len; i++) {\n                  result.push(buf.readDoubleLE(i * F64_SIZE));\n                }\n              }\n            };\n          } else if ((header & NUMBERS_HEADER_MASK) === I32_HEADER) {\n            const len = (header & NUMBERS_COUNT_MASK) + 1;\n            return () => {\n              const need = I32_SIZE * len;\n              if (isInCurrentBuffer(need)) {\n                for (let i = 0; i < len; i++) {\n                  result.push( /** @type {Buffer} */currentBuffer.readInt32LE(currentPosition));\n                  currentPosition += I32_SIZE;\n                }\n                checkOverflow();\n              } else {\n                const buf = read(need);\n                for (let i = 0; i < len; i++) {\n                  result.push(buf.readInt32LE(i * I32_SIZE));\n                }\n              }\n            };\n          } else if ((header & NUMBERS_HEADER_MASK) === I8_HEADER) {\n            const len = (header & NUMBERS_COUNT_MASK) + 1;\n            return () => {\n              const need = I8_SIZE * len;\n              if (isInCurrentBuffer(need)) {\n                for (let i = 0; i < len; i++) {\n                  result.push( /** @type {Buffer} */currentBuffer.readInt8(currentPosition));\n                  currentPosition += I8_SIZE;\n                }\n                checkOverflow();\n              } else {\n                const buf = read(need);\n                for (let i = 0; i < len; i++) {\n                  result.push(buf.readInt8(i * I8_SIZE));\n                }\n              }\n            };\n          } else {\n            return () => {\n              throw new Error(`Unexpected header byte 0x${header.toString(16)}`);\n            };\n          }\n      }\n    });\n\n    /** @type {DeserializedType} */\n    let result = [];\n    while (currentBuffer !== null) {\n      if (typeof currentBuffer === \"function\") {\n        result.push(this._deserializeLazy(currentBuffer, context));\n        currentDataItem++;\n        currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n        currentIsBuffer = Buffer.isBuffer(currentBuffer);\n      } else {\n        const header = readU8();\n        dispatchTable[header]();\n      }\n    }\n\n    // avoid leaking memory in context\n    let _result = result;\n    result = undefined;\n    return _result;\n  }\n}\nmodule.exports = BinaryMiddleware;\nmodule.exports.MEASURE_START_OPERATION = MEASURE_START_OPERATION;\nmodule.exports.MEASURE_END_OPERATION = MEASURE_END_OPERATION;","map":{"version":3,"names":["memoize","require","SerializerMiddleware","LAZY_HEADER","TRUE_HEADER","FALSE_HEADER","BOOLEANS_HEADER","NULL_HEADER","NULL2_HEADER","NULL3_HEADER","NULLS8_HEADER","NULLS32_HEADER","NULL_AND_I8_HEADER","NULL_AND_I32_HEADER","NULL_AND_TRUE_HEADER","NULL_AND_FALSE_HEADER","STRING_HEADER","BUFFER_HEADER","I8_HEADER","I32_HEADER","F64_HEADER","SHORT_STRING_HEADER","NUMBERS_HEADER_MASK","NUMBERS_COUNT_MASK","SHORT_STRING_LENGTH_MASK","HEADER_SIZE","I8_SIZE","I32_SIZE","F64_SIZE","MEASURE_START_OPERATION","Symbol","MEASURE_END_OPERATION","identifyNumber","n","BinaryMiddleware","serialize","data","context","_serialize","_serializeLazy","fn","serializeLazy","allocationScope","arguments","length","undefined","allocationSize","increaseCounter","leftOverBuffer","buffers","currentBuffer","currentPosition","Buffer","allocUnsafe","allocate","bytesNeeded","flush","Math","max","push","from","buffer","byteOffset","byteLength","writeU8","byte","writeUInt8","writeU32","ui32","writeUInt32LE","measureStack","measureStart","measureEnd","oldPos","pop","buffersIndex","size","i","thing","isLazy","Error","serializedData","getLazySerializedValue","result","setLazySerializedValue","lengths","item","last","remaining","l","len","write","charCodeAt","type","writeInt8","writeInt32LE","writeDoubleLE","lastByte","bytes","count","pos","next","isBuffer","copy","_buffers","deserialize","_deserialize","_createLazyDeserialized","content","createLazy","_deserializeLazy","deserializeLazy","currentDataItem","currentIsBuffer","retainedBuffer","x","checkOverflow","isInCurrentBuffer","ensureBuffer","read","rem","b","concat","res","readUpTo","readU8","readUInt8","readU32","readUInt32LE","readBits","mask","dispatchTable","Array","map","_","header","buf","readInt8","readInt32LE","innerHeader","toString","need","readDoubleLE","_result","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/serialization/BinaryMiddleware.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\nconst SerializerMiddleware = require(\"./SerializerMiddleware\");\n\n/** @typedef {import(\"./types\").BufferSerializableType} BufferSerializableType */\n/** @typedef {import(\"./types\").PrimitiveSerializableType} PrimitiveSerializableType */\n\n/*\nFormat:\n\nFile -> Section*\n\nSection -> NullsSection |\n\t\t\t\t\t BooleansSection |\n\t\t\t\t\t F64NumbersSection |\n\t\t\t\t\t I32NumbersSection |\n\t\t\t\t\t I8NumbersSection |\n\t\t\t\t\t ShortStringSection |\n\t\t\t\t\t StringSection |\n\t\t\t\t\t BufferSection |\n\t\t\t\t\t NopSection\n\n\n\nNullsSection ->\n\tNullHeaderByte | Null2HeaderByte | Null3HeaderByte |\n\tNulls8HeaderByte 0xnn (n:count - 4) |\n\tNulls32HeaderByte n:ui32 (n:count - 260) |\nBooleansSection -> TrueHeaderByte | FalseHeaderByte | BooleansSectionHeaderByte BooleansCountAndBitsByte\nF64NumbersSection -> F64NumbersSectionHeaderByte f64*\nI32NumbersSection -> I32NumbersSectionHeaderByte i32*\nI8NumbersSection -> I8NumbersSectionHeaderByte i8*\nShortStringSection -> ShortStringSectionHeaderByte ascii-byte*\nStringSection -> StringSectionHeaderByte i32:length utf8-byte*\nBufferSection -> BufferSectionHeaderByte i32:length byte*\nNopSection --> NopSectionHeaderByte\n\nShortStringSectionHeaderByte -> 0b1nnn_nnnn (n:length)\n\nF64NumbersSectionHeaderByte -> 0b001n_nnnn (n:count - 1)\nI32NumbersSectionHeaderByte -> 0b010n_nnnn (n:count - 1)\nI8NumbersSectionHeaderByte -> 0b011n_nnnn (n:count - 1)\n\nNullsSectionHeaderByte -> 0b0001_nnnn (n:count - 1)\nBooleansCountAndBitsByte ->\n\t0b0000_1xxx (count = 3) |\n\t0b0001_xxxx (count = 4) |\n\t0b001x_xxxx (count = 5) |\n\t0b01xx_xxxx (count = 6) |\n\t0b1nnn_nnnn (n:count - 7, 7 <= count <= 133)\n\t0xff n:ui32 (n:count, 134 <= count < 2^32)\n\nStringSectionHeaderByte -> 0b0000_1110\nBufferSectionHeaderByte -> 0b0000_1111\nNopSectionHeaderByte -> 0b0000_1011\nFalseHeaderByte -> 0b0000_1100\nTrueHeaderByte -> 0b0000_1101\n\nRawNumber -> n (n <= 10)\n\n*/\n\nconst LAZY_HEADER = 0x0b;\nconst TRUE_HEADER = 0x0c;\nconst FALSE_HEADER = 0x0d;\nconst BOOLEANS_HEADER = 0x0e;\nconst NULL_HEADER = 0x10;\nconst NULL2_HEADER = 0x11;\nconst NULL3_HEADER = 0x12;\nconst NULLS8_HEADER = 0x13;\nconst NULLS32_HEADER = 0x14;\nconst NULL_AND_I8_HEADER = 0x15;\nconst NULL_AND_I32_HEADER = 0x16;\nconst NULL_AND_TRUE_HEADER = 0x17;\nconst NULL_AND_FALSE_HEADER = 0x18;\nconst STRING_HEADER = 0x1e;\nconst BUFFER_HEADER = 0x1f;\nconst I8_HEADER = 0x60;\nconst I32_HEADER = 0x40;\nconst F64_HEADER = 0x20;\nconst SHORT_STRING_HEADER = 0x80;\n\n/** Uplift high-order bits */\nconst NUMBERS_HEADER_MASK = 0xe0;\nconst NUMBERS_COUNT_MASK = 0x1f; // 0b0001_1111\nconst SHORT_STRING_LENGTH_MASK = 0x7f; // 0b0111_1111\n\nconst HEADER_SIZE = 1;\nconst I8_SIZE = 1;\nconst I32_SIZE = 4;\nconst F64_SIZE = 8;\n\nconst MEASURE_START_OPERATION = Symbol(\"MEASURE_START_OPERATION\");\nconst MEASURE_END_OPERATION = Symbol(\"MEASURE_END_OPERATION\");\n\n/** @typedef {typeof MEASURE_START_OPERATION} MEASURE_START_OPERATION_TYPE */\n/** @typedef {typeof MEASURE_END_OPERATION} MEASURE_END_OPERATION_TYPE */\n\n/**\n * @param {number} n number\n * @returns {0 | 1 | 2} type of number for serialization\n */\nconst identifyNumber = n => {\n\tif (n === (n | 0)) {\n\t\tif (n <= 127 && n >= -128) return 0;\n\t\tif (n <= 2147483647 && n >= -2147483648) return 1;\n\t}\n\treturn 2;\n};\n\n/**\n * @typedef {PrimitiveSerializableType[]} DeserializedType\n * @typedef {BufferSerializableType[]} SerializedType\n * @extends {SerializerMiddleware<DeserializedType, SerializedType>}\n */\nclass BinaryMiddleware extends SerializerMiddleware {\n\t/**\n\t * @param {DeserializedType} data data\n\t * @param {Object} context context object\n\t * @returns {SerializedType|Promise<SerializedType>} serialized data\n\t */\n\tserialize(data, context) {\n\t\treturn this._serialize(data, context);\n\t}\n\n\t_serializeLazy(fn, context) {\n\t\treturn SerializerMiddleware.serializeLazy(fn, data =>\n\t\t\tthis._serialize(data, context)\n\t\t);\n\t}\n\n\t/**\n\t * @param {DeserializedType} data data\n\t * @param {Object} context context object\n\t * @param {{ leftOverBuffer: Buffer | null, allocationSize: number, increaseCounter: number }} allocationScope allocation scope\n\t * @returns {SerializedType} serialized data\n\t */\n\t_serialize(\n\t\tdata,\n\t\tcontext,\n\t\tallocationScope = {\n\t\t\tallocationSize: 1024,\n\t\t\tincreaseCounter: 0,\n\t\t\tleftOverBuffer: null\n\t\t}\n\t) {\n\t\t/** @type {Buffer} */\n\t\tlet leftOverBuffer = null;\n\t\t/** @type {BufferSerializableType[]} */\n\t\tlet buffers = [];\n\t\t/** @type {Buffer} */\n\t\tlet currentBuffer = allocationScope ? allocationScope.leftOverBuffer : null;\n\t\tallocationScope.leftOverBuffer = null;\n\t\tlet currentPosition = 0;\n\t\tif (currentBuffer === null) {\n\t\t\tcurrentBuffer = Buffer.allocUnsafe(allocationScope.allocationSize);\n\t\t}\n\t\tconst allocate = bytesNeeded => {\n\t\t\tif (currentBuffer !== null) {\n\t\t\t\tif (currentBuffer.length - currentPosition >= bytesNeeded) return;\n\t\t\t\tflush();\n\t\t\t}\n\t\t\tif (leftOverBuffer && leftOverBuffer.length >= bytesNeeded) {\n\t\t\t\tcurrentBuffer = leftOverBuffer;\n\t\t\t\tleftOverBuffer = null;\n\t\t\t} else {\n\t\t\t\tcurrentBuffer = Buffer.allocUnsafe(\n\t\t\t\t\tMath.max(bytesNeeded, allocationScope.allocationSize)\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!(allocationScope.increaseCounter =\n\t\t\t\t\t\t(allocationScope.increaseCounter + 1) % 4) &&\n\t\t\t\t\tallocationScope.allocationSize < 16777216\n\t\t\t\t) {\n\t\t\t\t\tallocationScope.allocationSize = allocationScope.allocationSize << 1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst flush = () => {\n\t\t\tif (currentBuffer !== null) {\n\t\t\t\tif (currentPosition > 0) {\n\t\t\t\t\tbuffers.push(\n\t\t\t\t\t\tBuffer.from(\n\t\t\t\t\t\t\tcurrentBuffer.buffer,\n\t\t\t\t\t\t\tcurrentBuffer.byteOffset,\n\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!leftOverBuffer ||\n\t\t\t\t\tleftOverBuffer.length < currentBuffer.length - currentPosition\n\t\t\t\t) {\n\t\t\t\t\tleftOverBuffer = Buffer.from(\n\t\t\t\t\t\tcurrentBuffer.buffer,\n\t\t\t\t\t\tcurrentBuffer.byteOffset + currentPosition,\n\t\t\t\t\t\tcurrentBuffer.byteLength - currentPosition\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tcurrentBuffer = null;\n\t\t\t\tcurrentPosition = 0;\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * @param {number} byte byte\n\t\t */\n\t\tconst writeU8 = byte => {\n\t\t\tcurrentBuffer.writeUInt8(byte, currentPosition++);\n\t\t};\n\t\t/**\n\t\t * @param {number} ui32 ui32\n\t\t */\n\t\tconst writeU32 = ui32 => {\n\t\t\tcurrentBuffer.writeUInt32LE(ui32, currentPosition);\n\t\t\tcurrentPosition += 4;\n\t\t};\n\t\t/** @type {number[]} */\n\t\tconst measureStack = [];\n\t\tconst measureStart = () => {\n\t\t\tmeasureStack.push(buffers.length, currentPosition);\n\t\t};\n\t\t/**\n\t\t * @returns {number} size\n\t\t */\n\t\tconst measureEnd = () => {\n\t\t\tconst oldPos = measureStack.pop();\n\t\t\tconst buffersIndex = measureStack.pop();\n\t\t\tlet size = currentPosition - oldPos;\n\t\t\tfor (let i = buffersIndex; i < buffers.length; i++) {\n\t\t\t\tsize += buffers[i].length;\n\t\t\t}\n\t\t\treturn size;\n\t\t};\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tconst thing = data[i];\n\t\t\tswitch (typeof thing) {\n\t\t\t\tcase \"function\": {\n\t\t\t\t\tif (!SerializerMiddleware.isLazy(thing))\n\t\t\t\t\t\tthrow new Error(\"Unexpected function \" + thing);\n\t\t\t\t\t/** @type {SerializedType | (() => SerializedType)} */\n\t\t\t\t\tlet serializedData =\n\t\t\t\t\t\tSerializerMiddleware.getLazySerializedValue(thing);\n\t\t\t\t\tif (serializedData === undefined) {\n\t\t\t\t\t\tif (SerializerMiddleware.isLazy(thing, this)) {\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tallocationScope.leftOverBuffer = leftOverBuffer;\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\t/** @type {(Exclude<PrimitiveSerializableType, Promise<PrimitiveSerializableType>>)[]} */ (\n\t\t\t\t\t\t\t\t\tthing()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst data = this._serialize(result, context, allocationScope);\n\t\t\t\t\t\t\tleftOverBuffer = allocationScope.leftOverBuffer;\n\t\t\t\t\t\t\tallocationScope.leftOverBuffer = null;\n\t\t\t\t\t\t\tSerializerMiddleware.setLazySerializedValue(thing, data);\n\t\t\t\t\t\t\tserializedData = data;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tserializedData = this._serializeLazy(thing, context);\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tbuffers.push(serializedData);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (typeof serializedData === \"function\") {\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tbuffers.push(serializedData);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/** @type {number[]} */\n\t\t\t\t\tconst lengths = [];\n\t\t\t\t\tfor (const item of serializedData) {\n\t\t\t\t\t\tlet last;\n\t\t\t\t\t\tif (typeof item === \"function\") {\n\t\t\t\t\t\t\tlengths.push(0);\n\t\t\t\t\t\t} else if (item.length === 0) {\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tlengths.length > 0 &&\n\t\t\t\t\t\t\t(last = lengths[lengths.length - 1]) !== 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst remaining = 0xffffffff - last;\n\t\t\t\t\t\t\tif (remaining >= item.length) {\n\t\t\t\t\t\t\t\tlengths[lengths.length - 1] += item.length;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlengths.push(item.length - remaining);\n\t\t\t\t\t\t\t\tlengths[lengths.length - 2] = 0xffffffff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlengths.push(item.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tallocate(5 + lengths.length * 4);\n\t\t\t\t\twriteU8(LAZY_HEADER);\n\t\t\t\t\twriteU32(lengths.length);\n\t\t\t\t\tfor (const l of lengths) {\n\t\t\t\t\t\twriteU32(l);\n\t\t\t\t\t}\n\t\t\t\t\tflush();\n\t\t\t\t\tfor (const item of serializedData) {\n\t\t\t\t\t\tbuffers.push(item);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"string\": {\n\t\t\t\t\tconst len = Buffer.byteLength(thing);\n\t\t\t\t\tif (len >= 128 || len !== thing.length) {\n\t\t\t\t\t\tallocate(len + HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\twriteU8(STRING_HEADER);\n\t\t\t\t\t\twriteU32(len);\n\t\t\t\t\t\tcurrentBuffer.write(thing, currentPosition);\n\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t} else if (len >= 70) {\n\t\t\t\t\t\tallocate(len + HEADER_SIZE);\n\t\t\t\t\t\twriteU8(SHORT_STRING_HEADER | len);\n\n\t\t\t\t\t\tcurrentBuffer.write(thing, currentPosition, \"latin1\");\n\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallocate(len + HEADER_SIZE);\n\t\t\t\t\t\twriteU8(SHORT_STRING_HEADER | len);\n\n\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\tcurrentBuffer[currentPosition++] = thing.charCodeAt(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"number\": {\n\t\t\t\t\tconst type = identifyNumber(thing);\n\t\t\t\t\tif (type === 0 && thing >= 0 && thing <= 10) {\n\t\t\t\t\t\t// shortcut for very small numbers\n\t\t\t\t\t\tallocate(I8_SIZE);\n\t\t\t\t\t\twriteU8(thing);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t/**\n\t\t\t\t\t * amount of numbers to write\n\t\t\t\t\t * @type {number}\n\t\t\t\t\t */\n\t\t\t\t\tlet n = 1;\n\t\t\t\t\tfor (; n < 32 && i + n < data.length; n++) {\n\t\t\t\t\t\tconst item = data[i + n];\n\t\t\t\t\t\tif (typeof item !== \"number\") break;\n\t\t\t\t\t\tif (identifyNumber(item) !== type) break;\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE * n);\n\t\t\t\t\t\t\twriteU8(I8_HEADER | (n - 1));\n\t\t\t\t\t\t\twhile (n > 0) {\n\t\t\t\t\t\t\t\tcurrentBuffer.writeInt8(\n\t\t\t\t\t\t\t\t\t/** @type {number} */ (data[i]),\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE * n);\n\t\t\t\t\t\t\twriteU8(I32_HEADER | (n - 1));\n\t\t\t\t\t\t\twhile (n > 0) {\n\t\t\t\t\t\t\t\tcurrentBuffer.writeInt32LE(\n\t\t\t\t\t\t\t\t\t/** @type {number} */ (data[i]),\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + F64_SIZE * n);\n\t\t\t\t\t\t\twriteU8(F64_HEADER | (n - 1));\n\t\t\t\t\t\t\twhile (n > 0) {\n\t\t\t\t\t\t\t\tcurrentBuffer.writeDoubleLE(\n\t\t\t\t\t\t\t\t\t/** @type {number} */ (data[i]),\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += F64_SIZE;\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\ti--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"boolean\": {\n\t\t\t\t\tlet lastByte = thing === true ? 1 : 0;\n\t\t\t\t\tconst bytes = [];\n\t\t\t\t\tlet count = 1;\n\t\t\t\t\tlet n;\n\t\t\t\t\tfor (n = 1; n < 0xffffffff && i + n < data.length; n++) {\n\t\t\t\t\t\tconst item = data[i + n];\n\t\t\t\t\t\tif (typeof item !== \"boolean\") break;\n\t\t\t\t\t\tconst pos = count & 0x7;\n\t\t\t\t\t\tif (pos === 0) {\n\t\t\t\t\t\t\tbytes.push(lastByte);\n\t\t\t\t\t\t\tlastByte = item === true ? 1 : 0;\n\t\t\t\t\t\t} else if (item === true) {\n\t\t\t\t\t\t\tlastByte |= 1 << pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\ti += count - 1;\n\t\t\t\t\tif (count === 1) {\n\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\twriteU8(lastByte === 1 ? TRUE_HEADER : FALSE_HEADER);\n\t\t\t\t\t} else if (count === 2) {\n\t\t\t\t\t\tallocate(HEADER_SIZE * 2);\n\t\t\t\t\t\twriteU8(lastByte & 1 ? TRUE_HEADER : FALSE_HEADER);\n\t\t\t\t\t\twriteU8(lastByte & 2 ? TRUE_HEADER : FALSE_HEADER);\n\t\t\t\t\t} else if (count <= 6) {\n\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE);\n\t\t\t\t\t\twriteU8(BOOLEANS_HEADER);\n\t\t\t\t\t\twriteU8((1 << count) | lastByte);\n\t\t\t\t\t} else if (count <= 133) {\n\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE + I8_SIZE * bytes.length + I8_SIZE);\n\t\t\t\t\t\twriteU8(BOOLEANS_HEADER);\n\t\t\t\t\t\twriteU8(0x80 | (count - 7));\n\t\t\t\t\t\tfor (const byte of bytes) writeU8(byte);\n\t\t\t\t\t\twriteU8(lastByte);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallocate(\n\t\t\t\t\t\t\tHEADER_SIZE +\n\t\t\t\t\t\t\t\tI8_SIZE +\n\t\t\t\t\t\t\t\tI32_SIZE +\n\t\t\t\t\t\t\t\tI8_SIZE * bytes.length +\n\t\t\t\t\t\t\t\tI8_SIZE\n\t\t\t\t\t\t);\n\t\t\t\t\t\twriteU8(BOOLEANS_HEADER);\n\t\t\t\t\t\twriteU8(0xff);\n\t\t\t\t\t\twriteU32(count);\n\t\t\t\t\t\tfor (const byte of bytes) writeU8(byte);\n\t\t\t\t\t\twriteU8(lastByte);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"object\": {\n\t\t\t\t\tif (thing === null) {\n\t\t\t\t\t\tlet n;\n\t\t\t\t\t\tfor (n = 1; n < 0x100000104 && i + n < data.length; n++) {\n\t\t\t\t\t\t\tconst item = data[i + n];\n\t\t\t\t\t\t\tif (item !== null) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti += n - 1;\n\t\t\t\t\t\tif (n === 1) {\n\t\t\t\t\t\t\tif (i + 1 < data.length) {\n\t\t\t\t\t\t\t\tconst next = data[i + 1];\n\t\t\t\t\t\t\t\tif (next === true) {\n\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_TRUE_HEADER);\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t} else if (next === false) {\n\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_FALSE_HEADER);\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t} else if (typeof next === \"number\") {\n\t\t\t\t\t\t\t\t\tconst type = identifyNumber(next);\n\t\t\t\t\t\t\t\t\tif (type === 0) {\n\t\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE);\n\t\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_I8_HEADER);\n\t\t\t\t\t\t\t\t\t\tcurrentBuffer.writeInt8(next, currentPosition);\n\t\t\t\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t\t} else if (type === 1) {\n\t\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_I32_HEADER);\n\t\t\t\t\t\t\t\t\t\tcurrentBuffer.writeInt32LE(next, currentPosition);\n\t\t\t\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\t\twriteU8(NULL_HEADER);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\twriteU8(NULL_HEADER);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\twriteU8(NULL_HEADER);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (n === 2) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\twriteU8(NULL2_HEADER);\n\t\t\t\t\t\t} else if (n === 3) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\twriteU8(NULL3_HEADER);\n\t\t\t\t\t\t} else if (n < 260) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE);\n\t\t\t\t\t\t\twriteU8(NULLS8_HEADER);\n\t\t\t\t\t\t\twriteU8(n - 4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\t\twriteU8(NULLS32_HEADER);\n\t\t\t\t\t\t\twriteU32(n - 260);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (Buffer.isBuffer(thing)) {\n\t\t\t\t\t\tif (thing.length < 8192) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE + thing.length);\n\t\t\t\t\t\t\twriteU8(BUFFER_HEADER);\n\t\t\t\t\t\t\twriteU32(thing.length);\n\t\t\t\t\t\t\tthing.copy(currentBuffer, currentPosition);\n\t\t\t\t\t\t\tcurrentPosition += thing.length;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\t\twriteU8(BUFFER_HEADER);\n\t\t\t\t\t\t\twriteU32(thing.length);\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tbuffers.push(thing);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"symbol\": {\n\t\t\t\t\tif (thing === MEASURE_START_OPERATION) {\n\t\t\t\t\t\tmeasureStart();\n\t\t\t\t\t} else if (thing === MEASURE_END_OPERATION) {\n\t\t\t\t\t\tconst size = measureEnd();\n\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\twriteU8(I32_HEADER);\n\t\t\t\t\t\tcurrentBuffer.writeInt32LE(size, currentPosition);\n\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tflush();\n\n\t\tallocationScope.leftOverBuffer = leftOverBuffer;\n\n\t\t// avoid leaking memory\n\t\tcurrentBuffer = null;\n\t\tleftOverBuffer = null;\n\t\tallocationScope = undefined;\n\t\tconst _buffers = buffers;\n\t\tbuffers = undefined;\n\t\treturn _buffers;\n\t}\n\n\t/**\n\t * @param {SerializedType} data data\n\t * @param {Object} context context object\n\t * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n\t */\n\tdeserialize(data, context) {\n\t\treturn this._deserialize(data, context);\n\t}\n\n\t_createLazyDeserialized(content, context) {\n\t\treturn SerializerMiddleware.createLazy(\n\t\t\tmemoize(() => this._deserialize(content, context)),\n\t\t\tthis,\n\t\t\tundefined,\n\t\t\tcontent\n\t\t);\n\t}\n\n\t_deserializeLazy(fn, context) {\n\t\treturn SerializerMiddleware.deserializeLazy(fn, data =>\n\t\t\tthis._deserialize(data, context)\n\t\t);\n\t}\n\n\t/**\n\t * @param {SerializedType} data data\n\t * @param {Object} context context object\n\t * @returns {DeserializedType} deserialized data\n\t */\n\t_deserialize(data, context) {\n\t\tlet currentDataItem = 0;\n\t\tlet currentBuffer = data[0];\n\t\tlet currentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\tlet currentPosition = 0;\n\n\t\tconst retainedBuffer = context.retainedBuffer || (x => x);\n\n\t\tconst checkOverflow = () => {\n\t\t\tif (currentPosition >= currentBuffer.length) {\n\t\t\t\tcurrentPosition = 0;\n\t\t\t\tcurrentDataItem++;\n\t\t\t\tcurrentBuffer =\n\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t}\n\t\t};\n\t\tconst isInCurrentBuffer = n => {\n\t\t\treturn currentIsBuffer && n + currentPosition <= currentBuffer.length;\n\t\t};\n\t\tconst ensureBuffer = () => {\n\t\t\tif (!currentIsBuffer) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tcurrentBuffer === null\n\t\t\t\t\t\t? \"Unexpected end of stream\"\n\t\t\t\t\t\t: \"Unexpected lazy element in stream\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * Reads n bytes\n\t\t * @param {number} n amount of bytes to read\n\t\t * @returns {Buffer} buffer with bytes\n\t\t */\n\t\tconst read = n => {\n\t\t\tensureBuffer();\n\t\t\tconst rem = currentBuffer.length - currentPosition;\n\t\t\tif (rem < n) {\n\t\t\t\tconst buffers = [read(rem)];\n\t\t\t\tn -= rem;\n\t\t\t\tensureBuffer();\n\t\t\t\twhile (currentBuffer.length < n) {\n\t\t\t\t\tconst b = /** @type {Buffer} */ (currentBuffer);\n\t\t\t\t\tbuffers.push(b);\n\t\t\t\t\tn -= b.length;\n\t\t\t\t\tcurrentDataItem++;\n\t\t\t\t\tcurrentBuffer =\n\t\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t\t\tensureBuffer();\n\t\t\t\t}\n\t\t\t\tbuffers.push(read(n));\n\t\t\t\treturn Buffer.concat(buffers);\n\t\t\t}\n\t\t\tconst b = /** @type {Buffer} */ (currentBuffer);\n\t\t\tconst res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n\t\t\tcurrentPosition += n;\n\t\t\tcheckOverflow();\n\t\t\treturn res;\n\t\t};\n\t\t/**\n\t\t * Reads up to n bytes\n\t\t * @param {number} n amount of bytes to read\n\t\t * @returns {Buffer} buffer with bytes\n\t\t */\n\t\tconst readUpTo = n => {\n\t\t\tensureBuffer();\n\t\t\tconst rem = currentBuffer.length - currentPosition;\n\t\t\tif (rem < n) {\n\t\t\t\tn = rem;\n\t\t\t}\n\t\t\tconst b = /** @type {Buffer} */ (currentBuffer);\n\t\t\tconst res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n\t\t\tcurrentPosition += n;\n\t\t\tcheckOverflow();\n\t\t\treturn res;\n\t\t};\n\t\t/**\n\t\t * @returns {number} U8\n\t\t */\n\t\tconst readU8 = () => {\n\t\t\tensureBuffer();\n\t\t\t/**\n\t\t\t * There is no need to check remaining buffer size here\n\t\t\t * since {@link checkOverflow} guarantees at least one byte remaining\n\t\t\t */\n\t\t\tconst byte = /** @type {Buffer} */ (currentBuffer).readUInt8(\n\t\t\t\tcurrentPosition\n\t\t\t);\n\t\t\tcurrentPosition += I8_SIZE;\n\t\t\tcheckOverflow();\n\t\t\treturn byte;\n\t\t};\n\t\t/**\n\t\t * @returns {number} U32\n\t\t */\n\t\tconst readU32 = () => {\n\t\t\treturn read(I32_SIZE).readUInt32LE(0);\n\t\t};\n\t\tconst readBits = (data, n) => {\n\t\t\tlet mask = 1;\n\t\t\twhile (n !== 0) {\n\t\t\t\tresult.push((data & mask) !== 0);\n\t\t\t\tmask = mask << 1;\n\t\t\t\tn--;\n\t\t\t}\n\t\t};\n\t\tconst dispatchTable = Array.from({ length: 256 }).map((_, header) => {\n\t\t\tswitch (header) {\n\t\t\t\tcase LAZY_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst count = readU32();\n\t\t\t\t\t\tconst lengths = Array.from({ length: count }).map(() => readU32());\n\t\t\t\t\t\tconst content = [];\n\t\t\t\t\t\tfor (let l of lengths) {\n\t\t\t\t\t\t\tif (l === 0) {\n\t\t\t\t\t\t\t\tif (typeof currentBuffer !== \"function\") {\n\t\t\t\t\t\t\t\t\tthrow new Error(\"Unexpected non-lazy element in stream\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcontent.push(currentBuffer);\n\t\t\t\t\t\t\t\tcurrentDataItem++;\n\t\t\t\t\t\t\t\tcurrentBuffer =\n\t\t\t\t\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\t\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\tconst buf = readUpTo(l);\n\t\t\t\t\t\t\t\t\tl -= buf.length;\n\t\t\t\t\t\t\t\t\tcontent.push(retainedBuffer(buf));\n\t\t\t\t\t\t\t\t} while (l > 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.push(this._createLazyDeserialized(content, context));\n\t\t\t\t\t};\n\t\t\t\tcase BUFFER_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU32();\n\t\t\t\t\t\tresult.push(retainedBuffer(read(len)));\n\t\t\t\t\t};\n\t\t\t\tcase TRUE_HEADER:\n\t\t\t\t\treturn () => result.push(true);\n\t\t\t\tcase FALSE_HEADER:\n\t\t\t\t\treturn () => result.push(false);\n\t\t\t\tcase NULL3_HEADER:\n\t\t\t\t\treturn () => result.push(null, null, null);\n\t\t\t\tcase NULL2_HEADER:\n\t\t\t\t\treturn () => result.push(null, null);\n\t\t\t\tcase NULL_HEADER:\n\t\t\t\t\treturn () => result.push(null);\n\t\t\t\tcase NULL_AND_TRUE_HEADER:\n\t\t\t\t\treturn () => result.push(null, true);\n\t\t\t\tcase NULL_AND_FALSE_HEADER:\n\t\t\t\t\treturn () => result.push(null, false);\n\t\t\t\tcase NULL_AND_I8_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tif (currentIsBuffer) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt8(currentPosition)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(null, read(I8_SIZE).readInt8(0));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase NULL_AND_I32_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t\t\tif (isInCurrentBuffer(I32_SIZE)) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt32LE(\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(I32_SIZE).readInt32LE(0));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase NULLS8_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU8() + 4;\n\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\tresult.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase NULLS32_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU32() + 260;\n\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\tresult.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase BOOLEANS_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst innerHeader = readU8();\n\t\t\t\t\t\tif ((innerHeader & 0xf0) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 3);\n\t\t\t\t\t\t} else if ((innerHeader & 0xe0) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 4);\n\t\t\t\t\t\t} else if ((innerHeader & 0xc0) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 5);\n\t\t\t\t\t\t} else if ((innerHeader & 0x80) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 6);\n\t\t\t\t\t\t} else if (innerHeader !== 0xff) {\n\t\t\t\t\t\t\tlet count = (innerHeader & 0x7f) + 7;\n\t\t\t\t\t\t\twhile (count > 8) {\n\t\t\t\t\t\t\t\treadBits(readU8(), 8);\n\t\t\t\t\t\t\t\tcount -= 8;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadBits(readU8(), count);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet count = readU32();\n\t\t\t\t\t\t\twhile (count > 8) {\n\t\t\t\t\t\t\t\treadBits(readU8(), 8);\n\t\t\t\t\t\t\t\tcount -= 8;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadBits(readU8(), count);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase STRING_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU32();\n\t\t\t\t\t\tif (isInCurrentBuffer(len) && currentPosition + len < 0x7fffffff) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tcurrentBuffer.toString(\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tcurrentPosition,\n\t\t\t\t\t\t\t\t\tcurrentPosition + len\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(len).toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase SHORT_STRING_HEADER:\n\t\t\t\t\treturn () => result.push(\"\");\n\t\t\t\tcase SHORT_STRING_HEADER | 1:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tif (currentIsBuffer && currentPosition < 0x7ffffffe) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tcurrentBuffer.toString(\n\t\t\t\t\t\t\t\t\t\"latin1\",\n\t\t\t\t\t\t\t\t\tcurrentPosition,\n\t\t\t\t\t\t\t\t\tcurrentPosition + 1\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition++;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(1).toString(\"latin1\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase I8_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tif (currentIsBuffer) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt8(currentPosition)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition++;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(1).readInt8(0));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tif (header <= 10) {\n\t\t\t\t\t\treturn () => result.push(header);\n\t\t\t\t\t} else if ((header & SHORT_STRING_HEADER) === SHORT_STRING_HEADER) {\n\t\t\t\t\t\tconst len = header & SHORT_STRING_LENGTH_MASK;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tisInCurrentBuffer(len) &&\n\t\t\t\t\t\t\t\tcurrentPosition + len < 0x7fffffff\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\tcurrentBuffer.toString(\n\t\t\t\t\t\t\t\t\t\t\"latin1\",\n\t\t\t\t\t\t\t\t\t\tcurrentPosition,\n\t\t\t\t\t\t\t\t\t\tcurrentPosition + len\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.push(read(len).toString(\"latin1\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if ((header & NUMBERS_HEADER_MASK) === F64_HEADER) {\n\t\t\t\t\t\tconst len = (header & NUMBERS_COUNT_MASK) + 1;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tconst need = F64_SIZE * len;\n\t\t\t\t\t\t\tif (isInCurrentBuffer(need)) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readDoubleLE(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tcurrentPosition += F64_SIZE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst buf = read(need);\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(buf.readDoubleLE(i * F64_SIZE));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if ((header & NUMBERS_HEADER_MASK) === I32_HEADER) {\n\t\t\t\t\t\tconst len = (header & NUMBERS_COUNT_MASK) + 1;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tconst need = I32_SIZE * len;\n\t\t\t\t\t\t\tif (isInCurrentBuffer(need)) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt32LE(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst buf = read(need);\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(buf.readInt32LE(i * I32_SIZE));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if ((header & NUMBERS_HEADER_MASK) === I8_HEADER) {\n\t\t\t\t\t\tconst len = (header & NUMBERS_COUNT_MASK) + 1;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tconst need = I8_SIZE * len;\n\t\t\t\t\t\t\tif (isInCurrentBuffer(need)) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt8(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst buf = read(need);\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(buf.readInt8(i * I8_SIZE));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Unexpected header byte 0x${header.toString(16)}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/** @type {DeserializedType} */\n\t\tlet result = [];\n\t\twhile (currentBuffer !== null) {\n\t\t\tif (typeof currentBuffer === \"function\") {\n\t\t\t\tresult.push(this._deserializeLazy(currentBuffer, context));\n\t\t\t\tcurrentDataItem++;\n\t\t\t\tcurrentBuffer =\n\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t} else {\n\t\t\t\tconst header = readU8();\n\t\t\t\tdispatchTable[header]();\n\t\t\t}\n\t\t}\n\n\t\t// avoid leaking memory in context\n\t\tlet _result = result;\n\t\tresult = undefined;\n\t\treturn _result;\n\t}\n}\n\nmodule.exports = BinaryMiddleware;\n\nmodule.exports.MEASURE_START_OPERATION = MEASURE_START_OPERATION;\nmodule.exports.MEASURE_END_OPERATION = MEASURE_END_OPERATION;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}