{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  WEBASSEMBLY_MODULE_TYPE_SYNC\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nconst PLUGIN_NAME = \"FetchCompileWasmPlugin\";\nclass FetchCompileWasmPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"fetch\";\n      };\n      const generateLoadBinaryCode = path => `fetch(${RuntimeGlobals.publicPath} + ${path})`;\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(PLUGIN_NAME, (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === WEBASSEMBLY_MODULE_TYPE_SYNC)) {\n          return;\n        }\n        set.add(RuntimeGlobals.moduleCache);\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: true,\n          mangleImports: this.options.mangleImports,\n          runtimeRequirements: set\n        }));\n      });\n    });\n  }\n}\nmodule.exports = FetchCompileWasmPlugin;","map":{"version":3,"names":["WEBASSEMBLY_MODULE_TYPE_SYNC","require","RuntimeGlobals","WasmChunkLoadingRuntimeModule","PLUGIN_NAME","FetchCompileWasmPlugin","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/web/FetchCompileWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { WEBASSEMBLY_MODULE_TYPE_SYNC } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nconst PLUGIN_NAME = \"FetchCompileWasmPlugin\";\n\nclass FetchCompileWasmPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {\n\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\tconst wasmLoading =\n\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t};\n\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t.tap(PLUGIN_NAME, (chunk, set) => {\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tm => m.type === WEBASSEMBLY_MODULE_TYPE_SYNC\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\n\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\tsupportsStreaming: true,\n\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\n\t\t\t\t\t\t\truntimeRequirements: set\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = FetchCompileWasmPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAA6B,CAAC,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAC1E,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAME,6BAA6B,GAAGF,OAAO,CAAC,4CAA4C,CAAC;;AAE3F;;AAEA;;AAEA,MAAMG,WAAW,GAAG,wBAAwB;AAE5C,MAAMC,sBAAsB,CAAC;EAC5BC,WAAWA,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CAACR,WAAW,EAAES,WAAW,IAAI;MAC9D,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAa,CAACC,WAAW;MAC/D,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;QAClC,MAAMX,OAAO,GAAGW,KAAK,CAACC,eAAe,CAAC,CAAC;QACvC,MAAMH,WAAW,GAChBT,OAAO,IAAIA,OAAO,CAACS,WAAW,KAAKI,SAAS,GACzCb,OAAO,CAACS,WAAW,GACnBF,iBAAiB;QACrB,OAAOE,WAAW,KAAK,OAAO;MAC/B,CAAC;MACD,MAAMK,sBAAsB,GAAGC,IAAI,IACjC,SAAQpB,cAAc,CAACqB,UAAW,MAAKD,IAAK,GAAE;MAEhDT,WAAW,CAACH,KAAK,CAACc,wBAAwB,CACxCC,GAAG,CAACvB,cAAc,CAACwB,mBAAmB,CAAC,CACvCd,GAAG,CAACR,WAAW,EAAE,CAACc,KAAK,EAAES,GAAG,KAAK;QACjC,IAAI,CAACV,iBAAiB,CAACC,KAAK,CAAC,EAAE;QAC/B,MAAMU,UAAU,GAAGf,WAAW,CAACe,UAAU;QACzC,IACC,CAACA,UAAU,CAACC,gBAAgB,CAC3BX,KAAK,EACLY,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK/B,4BACjB,CAAC,EACA;UACD;QACD;QACA2B,GAAG,CAACK,GAAG,CAAC9B,cAAc,CAAC+B,WAAW,CAAC;QACnCN,GAAG,CAACK,GAAG,CAAC9B,cAAc,CAACqB,UAAU,CAAC;QAClCV,WAAW,CAACqB,gBAAgB,CAC3BhB,KAAK,EACL,IAAIf,6BAA6B,CAAC;UACjCkB,sBAAsB;UACtBc,iBAAiB,EAAE,IAAI;UACvBC,aAAa,EAAE,IAAI,CAAC7B,OAAO,CAAC6B,aAAa;UACzCC,mBAAmB,EAAEV;QACtB,CAAC,CACF,CAAC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACH;AACD;AAEAW,MAAM,CAACC,OAAO,GAAGlC,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}