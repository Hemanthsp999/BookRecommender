{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst {\n  register\n} = require(\"./serialization\");\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").Constructor} Constructor */\n\nclass ClassSerializer {\n  constructor(Constructor) {\n    this.Constructor = Constructor;\n  }\n  serialize(obj, context) {\n    obj.serialize(context);\n  }\n  deserialize(context) {\n    if (typeof this.Constructor.deserialize === \"function\") {\n      return this.Constructor.deserialize(context);\n    }\n    const obj = new this.Constructor();\n    obj.deserialize(context);\n    return obj;\n  }\n}\n\n/**\n * @param {Constructor} Constructor the constructor\n * @param {string} request the request which will be required when deserializing\n * @param {string | null} [name] the name to make multiple serializer unique when sharing a request\n */\nmodule.exports = function (Constructor, request) {\n  let name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  register(Constructor, request, name, new ClassSerializer(Constructor));\n};","map":{"version":3,"names":["register","require","ClassSerializer","constructor","Constructor","serialize","obj","context","deserialize","module","exports","request","name","arguments","length","undefined"],"sources":["/home/hemanth/react-project/client/node_modules/webpack/lib/util/makeSerializable.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst { register } = require(\"./serialization\");\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").Constructor} Constructor */\n\nclass ClassSerializer {\n\tconstructor(Constructor) {\n\t\tthis.Constructor = Constructor;\n\t}\n\n\tserialize(obj, context) {\n\t\tobj.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tif (typeof this.Constructor.deserialize === \"function\") {\n\t\t\treturn this.Constructor.deserialize(context);\n\t\t}\n\t\tconst obj = new this.Constructor();\n\t\tobj.deserialize(context);\n\t\treturn obj;\n\t}\n}\n\n/**\n * @param {Constructor} Constructor the constructor\n * @param {string} request the request which will be required when deserializing\n * @param {string | null} [name] the name to make multiple serializer unique when sharing a request\n */\nmodule.exports = (Constructor, request, name = null) => {\n\tregister(Constructor, request, name, new ClassSerializer(Constructor));\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAS,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAE/C;;AAEA,MAAMC,eAAe,CAAC;EACrBC,WAAWA,CAACC,WAAW,EAAE;IACxB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAC/B;EAEAC,SAASA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACvBD,GAAG,CAACD,SAAS,CAACE,OAAO,CAAC;EACvB;EAEAC,WAAWA,CAACD,OAAO,EAAE;IACpB,IAAI,OAAO,IAAI,CAACH,WAAW,CAACI,WAAW,KAAK,UAAU,EAAE;MACvD,OAAO,IAAI,CAACJ,WAAW,CAACI,WAAW,CAACD,OAAO,CAAC;IAC7C;IACA,MAAMD,GAAG,GAAG,IAAI,IAAI,CAACF,WAAW,CAAC,CAAC;IAClCE,GAAG,CAACE,WAAW,CAACD,OAAO,CAAC;IACxB,OAAOD,GAAG;EACX;AACD;;AAEA;AACA;AACA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,UAACN,WAAW,EAAEO,OAAO,EAAkB;EAAA,IAAhBC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAClDb,QAAQ,CAACI,WAAW,EAAEO,OAAO,EAAEC,IAAI,EAAE,IAAIV,eAAe,CAACE,WAAW,CAAC,CAAC;AACvE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}