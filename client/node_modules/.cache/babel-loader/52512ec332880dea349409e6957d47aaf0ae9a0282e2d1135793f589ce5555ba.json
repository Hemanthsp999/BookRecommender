{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\n\n/**\n * @param {string} path path\n * @param {string} parent parent path\n * @returns {boolean} true, if path is inside of parent\n */\nconst isInside = (path, parent) => {\n  if (!path.startsWith(parent)) return false;\n  if (path.length === parent.length) return true;\n  const charCode = path.charCodeAt(parent.length);\n  return charCode === slashCode || charCode === backslashCode;\n};\nmodule.exports = class RestrictionsPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Set<string | RegExp>} restrictions restrictions\n   */\n  constructor(source, restrictions) {\n    this.source = source;\n    this.restrictions = restrictions;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    resolver.getHook(this.source).tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n      if (typeof request.path === \"string\") {\n        const path = request.path;\n        for (const rule of this.restrictions) {\n          if (typeof rule === \"string\") {\n            if (!isInside(path, rule)) {\n              if (resolveContext.log) {\n                resolveContext.log(`${path} is not inside of the restriction ${rule}`);\n              }\n              return callback(null, null);\n            }\n          } else if (!rule.test(path)) {\n            if (resolveContext.log) {\n              resolveContext.log(`${path} doesn't match the restriction ${rule}`);\n            }\n            return callback(null, null);\n          }\n        }\n      }\n      callback();\n    });\n  }\n};","map":{"version":3,"names":["slashCode","charCodeAt","backslashCode","isInside","path","parent","startsWith","length","charCode","module","exports","RestrictionsPlugin","constructor","source","restrictions","apply","resolver","getHook","tapAsync","request","resolveContext","callback","rule","log","test"],"sources":["/home/hemanth/react-project/client/node_modules/enhanced-resolve/lib/RestrictionsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\n\n/**\n * @param {string} path path\n * @param {string} parent parent path\n * @returns {boolean} true, if path is inside of parent\n */\nconst isInside = (path, parent) => {\n\tif (!path.startsWith(parent)) return false;\n\tif (path.length === parent.length) return true;\n\tconst charCode = path.charCodeAt(parent.length);\n\treturn charCode === slashCode || charCode === backslashCode;\n};\n\nmodule.exports = class RestrictionsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Set<string | RegExp>} restrictions restrictions\n\t */\n\tconstructor(source, restrictions) {\n\t\tthis.source = source;\n\t\tthis.restrictions = restrictions;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (typeof request.path === \"string\") {\n\t\t\t\t\tconst path = request.path;\n\t\t\t\t\tfor (const rule of this.restrictions) {\n\t\t\t\t\t\tif (typeof rule === \"string\") {\n\t\t\t\t\t\t\tif (!isInside(path, rule)) {\n\t\t\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t\t`${path} is not inside of the restriction ${rule}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!rule.test(path)) {\n\t\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t`${path} doesn't match the restriction ${rule}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback();\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AAEA,MAAMA,SAAS,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC;AACnC,MAAMC,aAAa,GAAG,IAAI,CAACD,UAAU,CAAC,CAAC,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAClC,IAAI,CAACD,IAAI,CAACE,UAAU,CAACD,MAAM,CAAC,EAAE,OAAO,KAAK;EAC1C,IAAID,IAAI,CAACG,MAAM,KAAKF,MAAM,CAACE,MAAM,EAAE,OAAO,IAAI;EAC9C,MAAMC,QAAQ,GAAGJ,IAAI,CAACH,UAAU,CAACI,MAAM,CAACE,MAAM,CAAC;EAC/C,OAAOC,QAAQ,KAAKR,SAAS,IAAIQ,QAAQ,KAAKN,aAAa;AAC5D,CAAC;AAEDO,MAAM,CAACC,OAAO,GAAG,MAAMC,kBAAkB,CAAC;EACzC;AACD;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,YAAY,EAAE;IACjC,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,YAAY,GAAGA,YAAY;EACjC;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CACNC,OAAO,CAAC,IAAI,CAACJ,MAAM,CAAC,CACpBK,QAAQ,CAAC,oBAAoB,EAAE,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACtE,IAAI,OAAOF,OAAO,CAACf,IAAI,KAAK,QAAQ,EAAE;QACrC,MAAMA,IAAI,GAAGe,OAAO,CAACf,IAAI;QACzB,KAAK,MAAMkB,IAAI,IAAI,IAAI,CAACR,YAAY,EAAE;UACrC,IAAI,OAAOQ,IAAI,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAACnB,QAAQ,CAACC,IAAI,EAAEkB,IAAI,CAAC,EAAE;cAC1B,IAAIF,cAAc,CAACG,GAAG,EAAE;gBACvBH,cAAc,CAACG,GAAG,CAChB,GAAEnB,IAAK,qCAAoCkB,IAAK,EAClD,CAAC;cACF;cACA,OAAOD,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;YAC5B;UACD,CAAC,MAAM,IAAI,CAACC,IAAI,CAACE,IAAI,CAACpB,IAAI,CAAC,EAAE;YAC5B,IAAIgB,cAAc,CAACG,GAAG,EAAE;cACvBH,cAAc,CAACG,GAAG,CAChB,GAAEnB,IAAK,kCAAiCkB,IAAK,EAC/C,CAAC;YACF;YACA,OAAOD,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;UAC5B;QACD;MACD;MAEAA,QAAQ,CAAC,CAAC;IACX,CAAC,CAAC;EACJ;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}