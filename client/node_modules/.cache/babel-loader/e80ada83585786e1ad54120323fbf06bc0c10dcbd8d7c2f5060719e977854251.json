{"ast":null,"code":"const path = require('path');\nconst childProcess = require('child_process');\nconst {\n  promises: fs,\n  constants: fsConstants\n} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\nconst {\n  platform,\n  arch\n} = process;\n\n// Podman detection\nconst hasContainerEnv = () => {\n  try {\n    fs.statSync('/run/.containerenv');\n    return true;\n  } catch {\n    return false;\n  }\n};\nlet cachedResult;\nfunction isInsideContainer() {\n  if (cachedResult === undefined) {\n    cachedResult = hasContainerEnv() || isDocker();\n  }\n  return cachedResult;\n}\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n  // Default value for \"root\" param\n  // according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n  const defaultMountPoint = '/mnt/';\n  let mountPoint;\n  return async function () {\n    if (mountPoint) {\n      // Return memoized mount point value\n      return mountPoint;\n    }\n    const configFilePath = '/etc/wsl.conf';\n    let isConfigFileExists = false;\n    try {\n      await fs.access(configFilePath, fsConstants.F_OK);\n      isConfigFileExists = true;\n    } catch {}\n    if (!isConfigFileExists) {\n      return defaultMountPoint;\n    }\n    const configContent = await fs.readFile(configFilePath, {\n      encoding: 'utf8'\n    });\n    const configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n    if (!configMountPoint) {\n      return defaultMountPoint;\n    }\n    mountPoint = configMountPoint.groups.mountPoint.trim();\n    mountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n    return mountPoint;\n  };\n})();\nconst pTryEach = async (array, mapper) => {\n  let latestError;\n  for (const item of array) {\n    try {\n      return await mapper(item); // eslint-disable-line no-await-in-loop\n    } catch (error) {\n      latestError = error;\n    }\n  }\n  throw latestError;\n};\nconst baseOpen = async options => {\n  options = {\n    wait: false,\n    background: false,\n    newInstance: false,\n    allowNonzeroExitCode: false,\n    ...options\n  };\n  if (Array.isArray(options.app)) {\n    return pTryEach(options.app, singleApp => baseOpen({\n      ...options,\n      app: singleApp\n    }));\n  }\n  let {\n    name: app,\n    arguments: appArguments = []\n  } = options.app || {};\n  appArguments = [...appArguments];\n  if (Array.isArray(app)) {\n    return pTryEach(app, appName => baseOpen({\n      ...options,\n      app: {\n        name: appName,\n        arguments: appArguments\n      }\n    }));\n  }\n  let command;\n  const cliArguments = [];\n  const childProcessOptions = {};\n  if (platform === 'darwin') {\n    command = 'open';\n    if (options.wait) {\n      cliArguments.push('--wait-apps');\n    }\n    if (options.background) {\n      cliArguments.push('--background');\n    }\n    if (options.newInstance) {\n      cliArguments.push('--new');\n    }\n    if (app) {\n      cliArguments.push('-a', app);\n    }\n  } else if (platform === 'win32' || isWsl && !isInsideContainer() && !app) {\n    const mountPoint = await getWslDrivesMountPoint();\n    command = isWsl ? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n    cliArguments.push('-NoProfile', '-NonInteractive', 'â€“ExecutionPolicy', 'Bypass', '-EncodedCommand');\n    if (!isWsl) {\n      childProcessOptions.windowsVerbatimArguments = true;\n    }\n    const encodedArguments = ['Start'];\n    if (options.wait) {\n      encodedArguments.push('-Wait');\n    }\n    if (app) {\n      // Double quote with double quotes to ensure the inner quotes are passed through.\n      // Inner quotes are delimited for PowerShell interpretation with backticks.\n      encodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n      if (options.target) {\n        appArguments.unshift(options.target);\n      }\n    } else if (options.target) {\n      encodedArguments.push(`\"${options.target}\"`);\n    }\n    if (appArguments.length > 0) {\n      appArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n      encodedArguments.push(appArguments.join(','));\n    }\n\n    // Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n    options.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n  } else {\n    if (app) {\n      command = app;\n    } else {\n      // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n      const isBundled = !__dirname || __dirname === '/';\n\n      // Check if local `xdg-open` exists and is executable.\n      let exeLocalXdgOpen = false;\n      try {\n        await fs.access(localXdgOpenPath, fsConstants.X_OK);\n        exeLocalXdgOpen = true;\n      } catch {}\n      const useSystemXdgOpen = process.versions.electron || platform === 'android' || isBundled || !exeLocalXdgOpen;\n      command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n    }\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n    if (!options.wait) {\n      // `xdg-open` will block the process unless stdio is ignored\n      // and it's detached from the parent even if it's unref'd.\n      childProcessOptions.stdio = 'ignore';\n      childProcessOptions.detached = true;\n    }\n  }\n  if (options.target) {\n    cliArguments.push(options.target);\n  }\n  if (platform === 'darwin' && appArguments.length > 0) {\n    cliArguments.push('--args', ...appArguments);\n  }\n  const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n  if (options.wait) {\n    return new Promise((resolve, reject) => {\n      subprocess.once('error', reject);\n      subprocess.once('close', exitCode => {\n        if (!options.allowNonzeroExitCode && exitCode > 0) {\n          reject(new Error(`Exited with code ${exitCode}`));\n          return;\n        }\n        resolve(subprocess);\n      });\n    });\n  }\n  subprocess.unref();\n  return subprocess;\n};\nconst open = (target, options) => {\n  if (typeof target !== 'string') {\n    throw new TypeError('Expected a `target`');\n  }\n  return baseOpen({\n    ...options,\n    target\n  });\n};\nconst openApp = (name, options) => {\n  if (typeof name !== 'string') {\n    throw new TypeError('Expected a `name`');\n  }\n  const {\n    arguments: appArguments = []\n  } = options || {};\n  if (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n    throw new TypeError('Expected `appArguments` as Array type');\n  }\n  return baseOpen({\n    ...options,\n    app: {\n      name,\n      arguments: appArguments\n    }\n  });\n};\nfunction detectArchBinary(binary) {\n  if (typeof binary === 'string' || Array.isArray(binary)) {\n    return binary;\n  }\n  const {\n    [arch]: archBinary\n  } = binary;\n  if (!archBinary) {\n    throw new Error(`${arch} is not supported`);\n  }\n  return archBinary;\n}\nfunction detectPlatformBinary(_ref, _ref2) {\n  let {\n    [platform]: platformBinary\n  } = _ref;\n  let {\n    wsl\n  } = _ref2;\n  if (wsl && isWsl) {\n    return detectArchBinary(wsl);\n  }\n  if (!platformBinary) {\n    throw new Error(`${platform} is not supported`);\n  }\n  return detectArchBinary(platformBinary);\n}\nconst apps = {};\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n  darwin: 'google chrome',\n  win32: 'chrome',\n  linux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n  wsl: {\n    ia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n    x64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n  }\n}));\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n  darwin: 'firefox',\n  win32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n  linux: 'firefox'\n}, {\n  wsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n  darwin: 'microsoft edge',\n  win32: 'msedge',\n  linux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n  wsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\nopen.apps = apps;\nopen.openApp = openApp;\nmodule.exports = open;","map":{"version":3,"names":["path","require","childProcess","promises","fs","constants","fsConstants","isWsl","isDocker","defineLazyProperty","localXdgOpenPath","join","__dirname","platform","arch","process","hasContainerEnv","statSync","cachedResult","isInsideContainer","undefined","getWslDrivesMountPoint","defaultMountPoint","mountPoint","configFilePath","isConfigFileExists","access","F_OK","configContent","readFile","encoding","configMountPoint","exec","groups","trim","endsWith","pTryEach","array","mapper","latestError","item","error","baseOpen","options","wait","background","newInstance","allowNonzeroExitCode","Array","isArray","app","singleApp","name","arguments","appArguments","appName","command","cliArguments","childProcessOptions","push","env","SYSTEMROOT","windowsVerbatimArguments","encodedArguments","target","unshift","length","map","arg","Buffer","from","toString","isBundled","exeLocalXdgOpen","X_OK","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref","open","TypeError","openApp","detectArchBinary","binary","archBinary","detectPlatformBinary","_ref","_ref2","platformBinary","wsl","apps","darwin","win32","linux","ia32","x64","module","exports"],"sources":["/home/hemanth/react-project/client/node_modules/open/index.js"],"sourcesContent":["const path = require('path');\nconst childProcess = require('child_process');\nconst {promises: fs, constants: fsConstants} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n// Podman detection\nconst hasContainerEnv = () => {\n\ttry {\n\t\tfs.statSync('/run/.containerenv');\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nlet cachedResult;\nfunction isInsideContainer() {\n\tif (cachedResult === undefined) {\n\t\tcachedResult = hasContainerEnv() || isDocker();\n\t}\n\n\treturn cachedResult;\n}\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst baseOpen = async options => {\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\n\t\t\t...options,\n\t\t\tapp: singleApp\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app || {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => baseOpen({\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments\n\t\t\t}\n\t\t}));\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'â€“ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tif (options.target) {\n\t\t\t\tappArguments.unshift(options.target);\n\t\t\t}\n\t\t} else if (options.target) {\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tplatform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tif (options.target) {\n\t\tcliArguments.push(options.target);\n\t}\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (!options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nconst open = (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\ttarget\n\t});\n};\n\nconst openApp = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError('Expected a `name`');\n\t}\n\n\tconst {arguments: appArguments = []} = options || {};\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\tapp: {\n\t\t\tname,\n\t\t\targuments: appArguments\n\t\t}\n\t});\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nconst apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n\t}\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox'\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\n\nopen.apps = apps;\nopen.openApp = openApp;\n\nmodule.exports = open;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}